//! THIS IS A GENERATED FILE!
//! Take care when hand editing. Changes will be lost during subsequent runs of the code generator.
//!
//! version: 0.2.0
//!

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(non_local_definitions)]

use log::{debug, trace, warn};
use std::io::{Read, Write};
use yaserde_derive::{YaDeserialize, YaSerialize};

pub const SOAP_ENCODING: &str = "http://www.w3.org/2003/05/soap-encoding";
pub mod mod_mes {
    use super::*;
    /// Represents the message keys that can be returned by response error messages
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ResponseCodeType")]
    pub struct ResponseCodeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ResponseMessageType")]
    pub struct ResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ArrayOfResponseMessagesType")]
    pub struct ArrayOfResponseMessagesType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "BaseResponseMessageType")]
    pub struct BaseResponseMessageType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "BaseRequestType")]
    pub struct BaseRequestType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetFolderType")]
    pub struct GetFolderType {
        #[yaserde(prefix = "mes", rename = "FolderShape")]
        pub folder_shape: mod_typ::FolderResponseShapeType,
        #[yaserde(prefix = "mes", rename = "FolderIds")]
        pub folder_ids: mod_typ::NonEmptyArrayOfBaseFolderIdsType,
    }
    pub type GetFolder = mod_mes::GetFolderType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UploadItemsType")]
    pub struct UploadItemsType {
        #[yaserde(prefix = "mes", rename = "Items")]
        pub items: mod_typ::NonEmptyArrayOfUploadItemsType,
    }
    pub type UploadItems = mod_mes::UploadItemsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UploadItemsResponseMessageType")]
    pub struct UploadItemsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UploadItemsResponseType")]
    pub struct UploadItemsResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type UploadItemsResponse = mod_mes::UploadItemsResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ExportItemsType")]
    pub struct ExportItemsType {
        #[yaserde(prefix = "mes", rename = "ItemIds")]
        pub item_ids: mod_typ::NonEmptyArrayOfItemIdsType,
    }
    pub type ExportItems = mod_mes::ExportItemsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ExportItemsResponseMessageType")]
    pub struct ExportItemsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "mes", rename = "Data")]
        pub data: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ExportItemsResponseType")]
    pub struct ExportItemsResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type ExportItemsResponse = mod_mes::ExportItemsResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateFolderType")]
    pub struct CreateFolderType {
        #[yaserde(prefix = "mes", rename = "ParentFolderId")]
        pub parent_folder_id: mod_typ::TargetFolderIdType,
        #[yaserde(prefix = "mes", rename = "Folders")]
        pub folders: mod_typ::NonEmptyArrayOfFoldersType,
    }
    pub type CreateFolder = mod_mes::CreateFolderType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindFolderType")]
    pub struct FindFolderType {
        #[yaserde(prefix = "mes", rename = "FolderShape")]
        pub folder_shape: mod_typ::FolderResponseShapeType,
        #[yaserde(prefix = "mes", rename = "IndexedPageFolderView")]
        pub indexed_page_folder_view: Option<mod_typ::IndexedPageViewType>,
        #[yaserde(prefix = "mes", rename = "FractionalPageFolderView")]
        pub fractional_page_folder_view: Option<mod_typ::FractionalPageViewType>,
        #[yaserde(prefix = "mes", rename = "Restriction")]
        pub restriction: Option<mod_typ::RestrictionType>,
        #[yaserde(prefix = "mes", rename = "ParentFolderIds")]
        pub parent_folder_ids: mod_typ::NonEmptyArrayOfBaseFolderIdsType,
    }
    pub type FindFolder = mod_mes::FindFolderType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FolderInfoResponseMessageType")]
    pub struct FolderInfoResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Folders")]
        pub folders: Option<mod_typ::ArrayOfFoldersType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindFolderResponseMessageType")]
    pub struct FindFolderResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "RootFolder")]
        pub root_folder: Option<mod_typ::FindFolderParentType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindFolderResponseType")]
    pub struct FindFolderResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type FindFolderResponse = mod_mes::FindFolderResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteFolderType")]
    pub struct DeleteFolderType {
        #[yaserde(prefix = "mes", rename = "FolderIds")]
        pub folder_ids: mod_typ::NonEmptyArrayOfBaseFolderIdsType,
    }
    pub type DeleteFolder = mod_mes::DeleteFolderType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteFolderResponseType")]
    pub struct DeleteFolderResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type DeleteFolderResponse = mod_mes::DeleteFolderResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "EmptyFolderType")]
    pub struct EmptyFolderType {
        #[yaserde(prefix = "mes", rename = "FolderIds")]
        pub folder_ids: mod_typ::NonEmptyArrayOfBaseFolderIdsType,
    }
    pub type EmptyFolder = mod_mes::EmptyFolderType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "EmptyFolderResponseType")]
    pub struct EmptyFolderResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type EmptyFolderResponse = mod_mes::EmptyFolderResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "BaseMoveCopyFolderType")]
    pub struct BaseMoveCopyFolderType {
        #[yaserde(prefix = "mes", rename = "ToFolderId")]
        pub to_folder_id: mod_typ::TargetFolderIdType,
        #[yaserde(prefix = "mes", rename = "FolderIds")]
        pub folder_ids: mod_typ::NonEmptyArrayOfBaseFolderIdsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "MoveFolderType")]
    pub struct MoveFolderType {
        #[yaserde(prefix = "mes", rename = "ToFolderId")]
        pub to_folder_id: mod_typ::TargetFolderIdType,
        #[yaserde(prefix = "mes", rename = "FolderIds")]
        pub folder_ids: mod_typ::NonEmptyArrayOfBaseFolderIdsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CopyFolderType")]
    pub struct CopyFolderType {
        #[yaserde(prefix = "mes", rename = "ToFolderId")]
        pub to_folder_id: mod_typ::TargetFolderIdType,
        #[yaserde(prefix = "mes", rename = "FolderIds")]
        pub folder_ids: mod_typ::NonEmptyArrayOfBaseFolderIdsType,
    }
    pub type MoveFolder = mod_mes::MoveFolderType;
    pub type CopyFolder = mod_mes::CopyFolderType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateFolderType")]
    pub struct UpdateFolderType {
        #[yaserde(prefix = "mes", rename = "FolderChanges")]
        pub folder_changes: mod_typ::NonEmptyArrayOfFolderChangesType,
    }
    pub type UpdateFolder = mod_mes::UpdateFolderType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateFolderResponseType")]
    pub struct CreateFolderResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type CreateFolderResponse = mod_mes::CreateFolderResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetFolderResponseType")]
    pub struct GetFolderResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type GetFolderResponse = mod_mes::GetFolderResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateFolderResponseType")]
    pub struct UpdateFolderResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type UpdateFolderResponse = mod_mes::UpdateFolderResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "MoveFolderResponseType")]
    pub struct MoveFolderResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CopyFolderResponseType")]
    pub struct CopyFolderResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type MoveFolderResponse = mod_mes::MoveFolderResponseType;
    pub type CopyFolderResponse = mod_mes::CopyFolderResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateFolderPathType")]
    pub struct CreateFolderPathType {
        #[yaserde(prefix = "mes", rename = "ParentFolderId")]
        pub parent_folder_id: mod_typ::TargetFolderIdType,
        #[yaserde(prefix = "mes", rename = "RelativeFolderPath")]
        pub relative_folder_path: mod_typ::NonEmptyArrayOfFoldersType,
    }
    pub type CreateFolderPath = mod_mes::CreateFolderPathType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateFolderPathResponseType")]
    pub struct CreateFolderPathResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type CreateFolderPathResponse = mod_mes::CreateFolderPathResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetItemType")]
    pub struct GetItemType {
        #[yaserde(prefix = "mes", rename = "ItemShape")]
        pub item_shape: mod_typ::ItemResponseShapeType,
        #[yaserde(prefix = "mes", rename = "ItemIds")]
        pub item_ids: mod_typ::NonEmptyArrayOfBaseItemIdsType,
    }
    pub type GetItem = mod_mes::GetItemType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateItemType")]
    pub struct CreateItemType {
        #[yaserde(prefix = "mes", rename = "SavedItemFolderId")]
        pub saved_item_folder_id: Option<mod_typ::TargetFolderIdType>,
        #[yaserde(prefix = "mes", rename = "Items")]
        pub items: mod_typ::NonEmptyArrayOfAllItemsType,
    }
    pub type CreateItem = mod_mes::CreateItemType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateItemType")]
    pub struct UpdateItemType {
        #[yaserde(prefix = "mes", rename = "SavedItemFolderId")]
        pub saved_item_folder_id: Option<mod_typ::TargetFolderIdType>,
        #[yaserde(prefix = "mes", rename = "ItemChanges")]
        pub item_changes: mod_typ::NonEmptyArrayOfItemChangesType,
    }
    pub type UpdateItem = mod_mes::UpdateItemType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ItemInfoResponseMessageType")]
    pub struct ItemInfoResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Items")]
        pub items: mod_typ::ArrayOfRealItemsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateItemResponseMessageType")]
    pub struct UpdateItemResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Items")]
        pub items: mod_typ::ArrayOfRealItemsType,
        #[yaserde(prefix = "mes", rename = "ConflictResults")]
        pub conflict_results: Option<mod_typ::ConflictResultsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateItemInRecoverableItemsType")]
    pub struct UpdateItemInRecoverableItemsType {
        #[yaserde(prefix = "mes", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "mes", rename = "Updates")]
        pub updates: Option<mod_typ::NonEmptyArrayOfItemChangeDescriptionsType>,
        #[yaserde(prefix = "mes", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "mes", rename = "MakeItemImmutable")]
        pub make_item_immutable: Option<bool>,
    }
    pub type UpdateItemInRecoverableItems = mod_mes::UpdateItemInRecoverableItemsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateItemInRecoverableItemsResponseMessageType")]
    pub struct UpdateItemInRecoverableItemsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Items")]
        pub items: mod_typ::ArrayOfRealItemsType,
        #[yaserde(prefix = "mes", rename = "Attachments")]
        pub attachments: Option<mod_typ::ArrayOfAttachmentsType>,
        #[yaserde(prefix = "mes", rename = "ConflictResults")]
        pub conflict_results: Option<mod_typ::ConflictResultsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteItemType")]
    pub struct DeleteItemType {
        #[yaserde(prefix = "mes", rename = "ItemIds")]
        pub item_ids: mod_typ::NonEmptyArrayOfBaseItemIdsType,
    }
    pub type DeleteItem = mod_mes::DeleteItemType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AttachmentInfoResponseMessageType")]
    pub struct AttachmentInfoResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Attachments")]
        pub attachments: mod_typ::ArrayOfAttachmentsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteAttachmentResponseMessageType")]
    pub struct DeleteAttachmentResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "RootItemId")]
        pub root_item_id: Option<mod_typ::RootItemIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "BaseMoveCopyItemType")]
    pub struct BaseMoveCopyItemType {
        #[yaserde(prefix = "mes", rename = "ToFolderId")]
        pub to_folder_id: mod_typ::TargetFolderIdType,
        #[yaserde(prefix = "mes", rename = "ItemIds")]
        pub item_ids: mod_typ::NonEmptyArrayOfBaseItemIdsType,
        #[yaserde(prefix = "mes", rename = "ReturnNewItemIds")]
        pub return_new_item_ids: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "MoveItemType")]
    pub struct MoveItemType {
        #[yaserde(prefix = "mes", rename = "ToFolderId")]
        pub to_folder_id: mod_typ::TargetFolderIdType,
        #[yaserde(prefix = "mes", rename = "ItemIds")]
        pub item_ids: mod_typ::NonEmptyArrayOfBaseItemIdsType,
        #[yaserde(prefix = "mes", rename = "ReturnNewItemIds")]
        pub return_new_item_ids: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CopyItemType")]
    pub struct CopyItemType {
        #[yaserde(prefix = "mes", rename = "ToFolderId")]
        pub to_folder_id: mod_typ::TargetFolderIdType,
        #[yaserde(prefix = "mes", rename = "ItemIds")]
        pub item_ids: mod_typ::NonEmptyArrayOfBaseItemIdsType,
        #[yaserde(prefix = "mes", rename = "ReturnNewItemIds")]
        pub return_new_item_ids: Option<bool>,
    }
    pub type MoveItem = mod_mes::MoveItemType;
    pub type CopyItem = mod_mes::CopyItemType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ArchiveItemType")]
    pub struct ArchiveItemType {
        #[yaserde(prefix = "mes", rename = "ArchiveSourceFolderId")]
        pub archive_source_folder_id: mod_typ::TargetFolderIdType,
        #[yaserde(prefix = "mes", rename = "ItemIds")]
        pub item_ids: mod_typ::NonEmptyArrayOfBaseItemIdsType,
    }
    pub type ArchiveItem = mod_mes::ArchiveItemType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SendItemType")]
    pub struct SendItemType {
        #[yaserde(prefix = "mes", rename = "ItemIds")]
        pub item_ids: mod_typ::NonEmptyArrayOfBaseItemIdsType,
        #[yaserde(prefix = "mes", rename = "SavedItemFolderId")]
        pub saved_item_folder_id: Option<mod_typ::TargetFolderIdType>,
    }
    pub type SendItem = mod_mes::SendItemType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SendItemResponseType")]
    pub struct SendItemResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type SendItemResponse = mod_mes::SendItemResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "QueryStringType")]
    pub struct QueryStringType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindItemType")]
    pub struct FindItemType {
        #[yaserde(prefix = "mes", rename = "ItemShape")]
        pub item_shape: mod_typ::ItemResponseShapeType,
        #[yaserde(prefix = "mes", rename = "IndexedPageItemView")]
        pub indexed_page_item_view: Option<mod_typ::IndexedPageViewType>,
        #[yaserde(prefix = "mes", rename = "FractionalPageItemView")]
        pub fractional_page_item_view: Option<mod_typ::FractionalPageViewType>,
        #[yaserde(prefix = "mes", rename = "SeekToConditionPageItemView")]
        pub seek_to_condition_page_item_view: Option<mod_typ::SeekToConditionPageViewType>,
        #[yaserde(prefix = "mes", rename = "CalendarView")]
        pub calendar_view: Option<mod_typ::CalendarViewType>,
        #[yaserde(prefix = "mes", rename = "ContactsView")]
        pub contacts_view: Option<mod_typ::ContactsViewType>,
        #[yaserde(prefix = "mes", rename = "GroupBy")]
        pub group_by: Option<mod_typ::GroupByType>,
        #[yaserde(prefix = "mes", rename = "DistinguishedGroupBy")]
        pub distinguished_group_by: Option<mod_typ::DistinguishedGroupByType>,
        #[yaserde(prefix = "mes", rename = "Restriction")]
        pub restriction: Option<mod_typ::RestrictionType>,
        #[yaserde(prefix = "mes", rename = "SortOrder")]
        pub sort_order: Option<mod_typ::NonEmptyArrayOfFieldOrdersType>,
        #[yaserde(prefix = "mes", rename = "ParentFolderIds")]
        pub parent_folder_ids: mod_typ::NonEmptyArrayOfBaseFolderIdsType,
        #[yaserde(prefix = "mes", rename = "QueryString")]
        pub query_string: Option<mod_mes::QueryStringType>,
    }
    pub type FindItem = mod_mes::FindItemType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindConversationType")]
    pub struct FindConversationType {
        #[yaserde(prefix = "mes", rename = "IndexedPageItemView")]
        pub indexed_page_item_view: Option<mod_typ::IndexedPageViewType>,
        #[yaserde(prefix = "mes", rename = "SeekToConditionPageItemView")]
        pub seek_to_condition_page_item_view: Option<mod_typ::SeekToConditionPageViewType>,
        #[yaserde(prefix = "mes", rename = "SortOrder")]
        pub sort_order: Option<mod_typ::NonEmptyArrayOfFieldOrdersType>,
        #[yaserde(prefix = "mes", rename = "ParentFolderId")]
        pub parent_folder_id: mod_typ::TargetFolderIdType,
        #[yaserde(prefix = "mes", rename = "MailboxScope")]
        pub mailbox_scope: Option<mod_typ::MailboxSearchLocationType>,
        #[yaserde(prefix = "mes", rename = "QueryString")]
        pub query_string: Option<mod_mes::QueryStringType>,
        #[yaserde(prefix = "mes", rename = "ConversationShape")]
        pub conversation_shape: Option<mod_typ::ConversationResponseShapeType>,
    }
    pub type FindConversation = mod_mes::FindConversationType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindConversationResponseMessageType")]
    pub struct FindConversationResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Conversations")]
        pub conversations: Option<mod_typ::ArrayOfConversationsType>,
        #[yaserde(prefix = "mes", rename = "HighlightTerms")]
        pub highlight_terms: Option<mod_typ::ArrayOfHighlightTermsType>,
        #[yaserde(prefix = "mes", rename = "TotalConversationsInView")]
        pub total_conversations_in_view: Option<i32>,
        #[yaserde(prefix = "mes", rename = "IndexedOffset")]
        pub indexed_offset: Option<i32>,
    }
    pub type FindConversationResponse = mod_mes::FindConversationResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "PerformInstantSearchRequest")]
    pub struct PerformInstantSearchRequest {
        #[yaserde(prefix = "mes", rename = "SearchSessionId")]
        pub search_session_id: String,
        #[yaserde(prefix = "mes", rename = "ItemType")]
        pub item_type: mod_typ::InstantSearchItemType,
        #[yaserde(prefix = "mes", rename = "QueryOptions")]
        pub query_options: mod_typ::QueryOptionsType,
        #[yaserde(prefix = "mes", rename = "SearchRequestId")]
        pub search_request_id: i64,
        #[yaserde(prefix = "mes", rename = "KqlQuery")]
        pub kql_query: String,
        #[yaserde(prefix = "mes", rename = "FolderScope")]
        pub folder_scope: mod_typ::ArrayOfFolderIdType,
        #[yaserde(prefix = "mes", rename = "DistinguishedFolderScope")]
        pub distinguished_folder_scope: Option<mod_typ::ArrayOfDistinguishedFolderIdType>,
        #[yaserde(prefix = "mes", rename = "IsDeepTraversal")]
        pub is_deep_traversal: Option<bool>,
        #[yaserde(prefix = "mes", rename = "WaitOnSearchResults")]
        pub wait_on_search_results: Option<bool>,
    }
    pub type PerformInstantSearch = mod_mes::PerformInstantSearchRequest;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "PerformInstantSearchResponse")]
    pub struct PerformInstantSearchResponse {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Payload")]
        pub payload: Option<mod_typ::InstantSearchPayloadType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "EndInstantSearchSessionRequest")]
    pub struct EndInstantSearchSessionRequest {
        #[yaserde(prefix = "mes", rename = "SessionId")]
        pub session_id: String,
    }
    pub type EndInstantSearchSession = mod_mes::EndInstantSearchSessionRequest;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ApplyConversationActionType")]
    pub struct ApplyConversationActionType {
        #[yaserde(prefix = "mes", rename = "ConversationActions")]
        pub conversation_actions: mod_typ::NonEmptyArrayOfApplyConversationActionType,
    }
    pub type ApplyConversationAction = mod_mes::ApplyConversationActionType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ApplyConversationActionResponseType")]
    pub struct ApplyConversationActionResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type ApplyConversationActionResponse = mod_mes::ApplyConversationActionResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ApplyConversationActionResponseMessageType")]
    pub struct ApplyConversationActionResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindPeopleType")]
    pub struct FindPeopleType {
        #[yaserde(prefix = "mes", rename = "PersonaShape")]
        pub persona_shape: Option<mod_typ::PersonaResponseShapeType>,
        #[yaserde(prefix = "mes", rename = "IndexedPageItemView")]
        pub indexed_page_item_view: mod_typ::IndexedPageViewType,
        #[yaserde(prefix = "mes", rename = "Restriction")]
        pub restriction: Option<mod_typ::RestrictionType>,
        #[yaserde(prefix = "mes", rename = "AggregationRestriction")]
        pub aggregation_restriction: Option<mod_typ::RestrictionType>,
        #[yaserde(prefix = "mes", rename = "SortOrder")]
        pub sort_order: Option<mod_typ::NonEmptyArrayOfFieldOrdersType>,
        #[yaserde(prefix = "mes", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::TargetFolderIdType>,
        #[yaserde(prefix = "mes", rename = "QueryString")]
        pub query_string: Option<String>,
        #[yaserde(prefix = "mes", rename = "SearchPeopleSuggestionIndex")]
        pub search_people_suggestion_index: Option<bool>,
        #[yaserde(prefix = "mes", rename = "TopicQueryString")]
        pub topic_query_string: Option<String>,
        #[yaserde(prefix = "mes", rename = "Context")]
        pub context: Option<mod_typ::ArrayOfContextProperty>,
        #[yaserde(prefix = "mes", rename = "QuerySources")]
        pub query_sources: Option<mod_typ::ArrayOfPeopleQuerySource>,
    }
    pub type FindPeople = mod_mes::FindPeopleType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindPeopleResponseMessageType")]
    pub struct FindPeopleResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "People")]
        pub people: Option<mod_typ::ArrayOfPeopleType>,
        #[yaserde(prefix = "mes", rename = "TotalNumberOfPeopleInView")]
        pub total_number_of_people_in_view: Option<i32>,
        #[yaserde(prefix = "mes", rename = "FirstMatchingRowIndex")]
        pub first_matching_row_index: Option<i32>,
        #[yaserde(prefix = "mes", rename = "FirstLoadedRowIndex")]
        pub first_loaded_row_index: Option<i32>,
        #[yaserde(prefix = "mes", rename = "TransactionId")]
        pub transaction_id: Option<mod_typ::GuidType>,
    }
    pub type FindPeopleResponse = mod_mes::FindPeopleResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindTagsType")]
    pub struct FindTagsType {
        #[yaserde(prefix = "mes", rename = "IndexedPageItemView")]
        pub indexed_page_item_view: mod_typ::IndexedPageViewType,
        #[yaserde(prefix = "mes", rename = "SortOrder")]
        pub sort_order: Option<mod_typ::NonEmptyArrayOfFieldOrdersType>,
        #[yaserde(prefix = "mes", rename = "QueryString")]
        pub query_string: Option<String>,
        #[yaserde(prefix = "mes", rename = "Context")]
        pub context: Option<mod_typ::ArrayOfContextProperty>,
    }
    pub type FindTags = mod_mes::FindTagsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindTagsResponseMessageType")]
    pub struct FindTagsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Tags")]
        pub tags: Option<mod_typ::ArrayOfStringsType>,
    }
    pub type FindTagsResponse = mod_mes::FindTagsResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddTagType")]
    pub struct AddTagType {
        #[yaserde(prefix = "mes", rename = "Tag")]
        pub tag: String,
        #[yaserde(prefix = "mes", rename = "AppName")]
        pub app_name: String,
    }
    pub type AddTag = mod_mes::AddTagType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddTagResponseMessageType")]
    pub struct AddTagResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "WasSuccessful")]
        pub was_successful: Option<bool>,
    }
    pub type AddTagResponse = mod_mes::AddTagResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "HideTagType")]
    pub struct HideTagType {
        #[yaserde(prefix = "mes", rename = "Tag")]
        pub tag: String,
    }
    pub type HideTag = mod_mes::HideTagType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "HideTagResponseMessageType")]
    pub struct HideTagResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "WasSuccessful")]
        pub was_successful: Option<bool>,
    }
    pub type HideTagResponse = mod_mes::HideTagResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetPersonaType")]
    pub struct GetPersonaType {
        #[yaserde(prefix = "mes", rename = "PersonaId")]
        pub persona_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "mes", rename = "EmailAddress")]
        pub email_address: Option<mod_typ::EmailAddressType>,
        #[yaserde(prefix = "mes", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::TargetFolderIdType>,
        #[yaserde(prefix = "mes", rename = "ItemLinkId")]
        pub item_link_id: Option<String>,
        #[yaserde(prefix = "mes", rename = "AdditionalProperties")]
        pub additional_properties: Option<mod_typ::NonEmptyArrayOfPathsToElementType>,
    }
    pub type GetPersona = mod_mes::GetPersonaType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetPersonaResponseMessageType")]
    pub struct GetPersonaResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Persona")]
        pub persona: mod_typ::PersonaType,
    }
    pub type GetPersonaResponseMessage = mod_mes::GetPersonaResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateAttachmentType")]
    pub struct CreateAttachmentType {
        #[yaserde(prefix = "mes", rename = "ParentItemId")]
        pub parent_item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "mes", rename = "Attachments")]
        pub attachments: mod_typ::NonEmptyArrayOfAttachmentsType,
    }
    pub type CreateAttachment = mod_mes::CreateAttachmentType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateAttachmentResponseType")]
    pub struct CreateAttachmentResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type CreateAttachmentResponse = mod_mes::CreateAttachmentResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteAttachmentType")]
    pub struct DeleteAttachmentType {
        #[yaserde(prefix = "mes", rename = "AttachmentIds")]
        pub attachment_ids: mod_typ::NonEmptyArrayOfRequestAttachmentIdsType,
    }
    pub type DeleteAttachment = mod_mes::DeleteAttachmentType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteAttachmentResponseType")]
    pub struct DeleteAttachmentResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type DeleteAttachmentResponse = mod_mes::DeleteAttachmentResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetAttachmentType")]
    pub struct GetAttachmentType {
        #[yaserde(prefix = "mes", rename = "AttachmentShape")]
        pub attachment_shape: Option<mod_typ::AttachmentResponseShapeType>,
        #[yaserde(prefix = "mes", rename = "AttachmentIds")]
        pub attachment_ids: mod_typ::NonEmptyArrayOfRequestAttachmentIdsType,
    }
    pub type GetAttachment = mod_mes::GetAttachmentType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetAttachmentResponseType")]
    pub struct GetAttachmentResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type GetAttachmentResponse = mod_mes::GetAttachmentResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateItemResponseType")]
    pub struct CreateItemResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type CreateItemResponse = mod_mes::CreateItemResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateItemResponseType")]
    pub struct UpdateItemResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type UpdateItemResponse = mod_mes::UpdateItemResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateItemInRecoverableItemsResponseType")]
    pub struct UpdateItemInRecoverableItemsResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type UpdateItemInRecoverableItemsResponse = mod_mes::UpdateItemInRecoverableItemsResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetItemResponseType")]
    pub struct GetItemResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type GetItemResponse = mod_mes::GetItemResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "MoveItemResponseType")]
    pub struct MoveItemResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CopyItemResponseType")]
    pub struct CopyItemResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type MoveItemResponse = mod_mes::MoveItemResponseType;
    pub type CopyItemResponse = mod_mes::CopyItemResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteItemResponseType")]
    pub struct DeleteItemResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type DeleteItemResponse = mod_mes::DeleteItemResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteItemResponseMessageType")]
    pub struct DeleteItemResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindItemResponseMessageType")]
    pub struct FindItemResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "RootFolder")]
        pub root_folder: Option<mod_typ::FindItemParentType>,
        #[yaserde(prefix = "mes", rename = "HighlightTerms")]
        pub highlight_terms: Option<mod_typ::ArrayOfHighlightTermsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindItemResponseType")]
    pub struct FindItemResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type FindItemResponse = mod_mes::FindItemResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ArchiveItemResponseType")]
    pub struct ArchiveItemResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type ArchiveItemResponse = mod_mes::ArchiveItemResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetClientAccessTokenType")]
    pub struct GetClientAccessTokenType {
        #[yaserde(prefix = "mes", rename = "TokenRequests")]
        pub token_requests: mod_typ::NonEmptyArrayOfClientAccessTokenRequestsType,
    }
    pub type GetClientAccessToken = mod_mes::GetClientAccessTokenType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetClientAccessTokenResponseMessageType")]
    pub struct GetClientAccessTokenResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Token")]
        pub token: Option<mod_typ::ClientAccessTokenType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetClientAccessTokenResponseType")]
    pub struct GetClientAccessTokenResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type GetClientAccessTokenResponse = mod_mes::GetClientAccessTokenResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetFocusedOtherOverridesRequestType")]
    pub struct GetFocusedOtherOverridesRequestType {}
    pub type GetFocusedOtherOverrides = mod_mes::GetFocusedOtherOverridesRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetFocusedOtherOverridesResponseType")]
    pub struct GetFocusedOtherOverridesResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
        #[yaserde(prefix = "mes", rename = "Overrides")]
        pub overrides: mod_typ::ArrayOfInferenceClassificationOverridesType,
    }
    pub type GetFocusedOtherOverridesResponse = mod_mes::GetFocusedOtherOverridesResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateOrUpdateFocusedOtherOverrideRequestType")]
    pub struct CreateOrUpdateFocusedOtherOverrideRequestType {
        #[yaserde(prefix = "mes", rename = "SenderSmtpAddress")]
        pub sender_smtp_address: String,
        #[yaserde(prefix = "mes", rename = "SenderDisplayName")]
        pub sender_display_name: Option<String>,
        #[yaserde(prefix = "mes", rename = "AlwaysClassifyAs")]
        pub always_classify_as: mod_typ::InferenceClassificationType,
    }
    pub type CreateOrUpdateFocusedOtherOverride = mod_mes::CreateOrUpdateFocusedOtherOverrideRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateOrUpdateFocusedOtherOverrideResponseType")]
    pub struct CreateOrUpdateFocusedOtherOverrideResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
        #[yaserde(prefix = "mes", rename = "Override")]
        pub r#override: mod_typ::InferenceClassificationOverrideType,
    }
    pub type CreateOrUpdateFocusedOtherOverrideResponse = mod_mes::CreateOrUpdateFocusedOtherOverrideResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteFocusedOtherOverrideRequestType")]
    pub struct DeleteFocusedOtherOverrideRequestType {
        #[yaserde(prefix = "mes", rename = "Id")]
        pub id: mod_typ::GuidType,
    }
    pub type DeleteFocusedOtherOverride = mod_mes::DeleteFocusedOtherOverrideRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteFocusedOtherOverrideResponseType")]
    pub struct DeleteFocusedOtherOverrideResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
        #[yaserde(prefix = "mes", rename = "Override")]
        pub r#override: mod_typ::InferenceClassificationOverrideType,
    }
    pub type DeleteFocusedOtherOverrideResponse = mod_mes::DeleteFocusedOtherOverrideResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ResolveNamesType")]
    pub struct ResolveNamesType {
        #[yaserde(prefix = "mes", rename = "ParentFolderIds")]
        pub parent_folder_ids: Option<mod_typ::NonEmptyArrayOfBaseFolderIdsType>,
        #[yaserde(prefix = "mes", rename = "UnresolvedEntry")]
        pub unresolved_entry: mod_typ::NonEmptyStringType,
    }
    pub type ResolveNames = mod_mes::ResolveNamesType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ResolveNamesResponseMessageType")]
    pub struct ResolveNamesResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ResolutionSet")]
        pub resolution_set: Option<mod_typ::ArrayOfResolutionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ResolveNamesResponseType")]
    pub struct ResolveNamesResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type ResolveNamesResponse = mod_mes::ResolveNamesResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetPasswordExpirationDateType")]
    pub struct GetPasswordExpirationDateType {
        #[yaserde(prefix = "mes", rename = "MailboxSmtpAddress")]
        pub mailbox_smtp_address: Option<String>,
    }
    pub type GetPasswordExpirationDate = mod_mes::GetPasswordExpirationDateType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetPasswordExpirationDateResponseMessageType")]
    pub struct GetPasswordExpirationDateResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "PasswordExpirationDate")]
        pub password_expiration_date: String,
    }
    pub type GetPasswordExpirationDateResponse = mod_mes::GetPasswordExpirationDateResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetMailTipsType")]
    pub struct GetMailTipsType {
        #[yaserde(prefix = "mes", rename = "SendingAs")]
        pub sending_as: mod_typ::EmailAddressType,
        #[yaserde(prefix = "mes", rename = "Recipients")]
        pub recipients: mod_typ::ArrayOfRecipientsType,
        #[yaserde(prefix = "mes", rename = "MailTipsRequested")]
        pub mail_tips_requested: mod_typ::MailTipTypes,
    }
    pub type GetMailTips = mod_mes::GetMailTipsType;
    pub type GetMailTipsResponse = mod_mes::GetMailTipsResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetMailTipsResponseMessageType")]
    pub struct GetMailTipsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: Option<mod_mes::ArrayOfMailTipsResponseMessageType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ArrayOfMailTipsResponseMessageType")]
    pub struct ArrayOfMailTipsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MailTipsResponseMessageType")]
        pub mail_tips_response_message_type: Vec<mod_mes::MailTipsResponseMessageType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "MailTipsResponseMessageType")]
    pub struct MailTipsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MailTips")]
        pub mail_tips: Option<mod_typ::MailTips>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "PlayOnPhoneType")]
    pub struct PlayOnPhoneType {
        #[yaserde(prefix = "mes", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "mes", rename = "DialString")]
        pub dial_string: String,
    }
    pub type PlayOnPhone = mod_mes::PlayOnPhoneType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "PlayOnPhoneResponseMessageType")]
    pub struct PlayOnPhoneResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "PhoneCallId")]
        pub phone_call_id: Option<mod_typ::PhoneCallIdType>,
    }
    pub type PlayOnPhoneResponse = mod_mes::PlayOnPhoneResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetPhoneCallInformationType")]
    pub struct GetPhoneCallInformationType {
        #[yaserde(prefix = "mes", rename = "PhoneCallId")]
        pub phone_call_id: mod_typ::PhoneCallIdType,
    }
    pub type GetPhoneCallInformation = mod_mes::GetPhoneCallInformationType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetPhoneCallInformationResponseMessageType")]
    pub struct GetPhoneCallInformationResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "PhoneCallInformation")]
        pub phone_call_information: Option<mod_typ::PhoneCallInformationType>,
    }
    pub type GetPhoneCallInformationResponse = mod_mes::GetPhoneCallInformationResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DisconnectPhoneCallType")]
    pub struct DisconnectPhoneCallType {
        #[yaserde(prefix = "mes", rename = "PhoneCallId")]
        pub phone_call_id: mod_typ::PhoneCallIdType,
    }
    pub type DisconnectPhoneCall = mod_mes::DisconnectPhoneCallType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DisconnectPhoneCallResponseMessageType")]
    pub struct DisconnectPhoneCallResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type DisconnectPhoneCallResponse = mod_mes::DisconnectPhoneCallResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ExpandDLType")]
    pub struct ExpandDLType {
        #[yaserde(prefix = "mes", rename = "Mailbox")]
        pub mailbox: mod_typ::EmailAddressType,
    }
    pub type ExpandDL = mod_mes::ExpandDLType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ExpandDLResponseMessageType")]
    pub struct ExpandDLResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "DLExpansion")]
        pub dl_expansion: Option<mod_typ::ArrayOfDLExpansionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ExpandDLResponseType")]
    pub struct ExpandDLResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type ExpandDLResponse = mod_mes::ExpandDLResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetServerTimeZonesType")]
    pub struct GetServerTimeZonesType {
        #[yaserde(prefix = "mes", rename = "Ids")]
        pub ids: Option<mod_typ::NonEmptyArrayOfTimeZoneIdType>,
    }
    pub type GetServerTimeZones = mod_mes::GetServerTimeZonesType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetServerTimeZonesResponseMessageType")]
    pub struct GetServerTimeZonesResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "TimeZoneDefinitions")]
        pub time_zone_definitions: mod_typ::ArrayOfTimeZoneDefinitionType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetServerTimeZonesResponseType")]
    pub struct GetServerTimeZonesResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type GetServerTimeZonesResponse = mod_mes::GetServerTimeZonesResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateManagedFolderRequestType")]
    pub struct CreateManagedFolderRequestType {
        #[yaserde(prefix = "mes", rename = "FolderNames")]
        pub folder_names: mod_typ::NonEmptyArrayOfFolderNamesType,
        #[yaserde(prefix = "mes", rename = "Mailbox")]
        pub mailbox: Option<mod_typ::EmailAddressType>,
    }
    pub type CreateManagedFolder = mod_mes::CreateManagedFolderRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateManagedFolderResponseType")]
    pub struct CreateManagedFolderResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type CreateManagedFolderResponse = mod_mes::CreateManagedFolderResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SubscribeType")]
    pub struct SubscribeType {}
    pub type Subscribe = mod_mes::SubscribeType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SubscribeResponseMessageType")]
    pub struct SubscribeResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "SubscriptionId")]
        pub subscription_id: Option<mod_typ::SubscriptionIdType>,
        #[yaserde(prefix = "mes", rename = "Watermark")]
        pub watermark: Option<mod_typ::WatermarkType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SubscribeResponseType")]
    pub struct SubscribeResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type SubscribeResponse = mod_mes::SubscribeResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UnsubscribeType")]
    pub struct UnsubscribeType {
        #[yaserde(prefix = "mes", rename = "SubscriptionId")]
        pub subscription_id: mod_typ::SubscriptionIdType,
    }
    pub type Unsubscribe = mod_mes::UnsubscribeType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UnsubscribeResponseType")]
    pub struct UnsubscribeResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type UnsubscribeResponse = mod_mes::UnsubscribeResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetEventsType")]
    pub struct GetEventsType {
        #[yaserde(prefix = "mes", rename = "SubscriptionId")]
        pub subscription_id: mod_typ::SubscriptionIdType,
        #[yaserde(prefix = "mes", rename = "Watermark")]
        pub watermark: mod_typ::WatermarkType,
    }
    pub type GetEvents = mod_mes::GetEventsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetEventsResponseMessageType")]
    pub struct GetEventsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Notification")]
        pub notification: Option<mod_typ::NotificationType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetEventsResponseType")]
    pub struct GetEventsResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type GetEventsResponse = mod_mes::GetEventsResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetStreamingEventsType")]
    pub struct GetStreamingEventsType {
        #[yaserde(prefix = "mes", rename = "SubscriptionIds")]
        pub subscription_ids: mod_typ::NonEmptyArrayOfSubscriptionIdsType,
        #[yaserde(prefix = "mes", rename = "ConnectionTimeout")]
        pub connection_timeout: mod_typ::StreamingSubscriptionConnectionTimeoutType,
    }
    pub type GetStreamingEvents = mod_mes::GetStreamingEventsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetStreamingEventsResponseMessageType")]
    pub struct GetStreamingEventsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Notifications")]
        pub notifications: Option<mod_typ::NonEmptyArrayOfNotificationsType>,
        #[yaserde(prefix = "mes", rename = "ErrorSubscriptionIds")]
        pub error_subscription_ids: Option<mod_typ::NonEmptyArrayOfSubscriptionIdsType>,
        #[yaserde(prefix = "mes", rename = "ConnectionStatus")]
        pub connection_status: Option<mod_typ::ConnectionStatusType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetStreamingEventsResponseType")]
    pub struct GetStreamingEventsResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type GetStreamingEventsResponse = mod_mes::GetStreamingEventsResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SendNotificationResponseMessageType")]
    pub struct SendNotificationResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Notification")]
        pub notification: mod_typ::NotificationType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SendNotificationResponseType")]
    pub struct SendNotificationResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type SendNotification = mod_mes::SendNotificationResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SendNotificationResultType")]
    pub struct SendNotificationResultType {
        #[yaserde(prefix = "mes", rename = "SubscriptionStatus")]
        pub subscription_status: mod_typ::SubscriptionStatusType,
    }
    pub type SendNotificationResult = mod_mes::SendNotificationResultType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SyncFolderHierarchyType")]
    pub struct SyncFolderHierarchyType {
        #[yaserde(prefix = "mes", rename = "FolderShape")]
        pub folder_shape: mod_typ::FolderResponseShapeType,
        #[yaserde(prefix = "mes", rename = "SyncFolderId")]
        pub sync_folder_id: Option<mod_typ::TargetFolderIdType>,
        #[yaserde(prefix = "mes", rename = "SyncState")]
        pub sync_state: Option<String>,
    }
    pub type SyncFolderHierarchy = mod_mes::SyncFolderHierarchyType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SyncFolderHierarchyResponseMessageType")]
    pub struct SyncFolderHierarchyResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "SyncState")]
        pub sync_state: Option<String>,
        #[yaserde(prefix = "mes", rename = "IncludesLastFolderInRange")]
        pub includes_last_folder_in_range: Option<bool>,
        #[yaserde(prefix = "mes", rename = "Changes")]
        pub changes: Option<mod_typ::SyncFolderHierarchyChangesType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SyncFolderHierarchyResponseType")]
    pub struct SyncFolderHierarchyResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type SyncFolderHierarchyResponse = mod_mes::SyncFolderHierarchyResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SyncFolderItemsType")]
    pub struct SyncFolderItemsType {
        #[yaserde(prefix = "mes", rename = "ItemShape")]
        pub item_shape: mod_typ::ItemResponseShapeType,
        #[yaserde(prefix = "mes", rename = "SyncFolderId")]
        pub sync_folder_id: mod_typ::TargetFolderIdType,
        #[yaserde(prefix = "mes", rename = "SyncState")]
        pub sync_state: Option<String>,
        #[yaserde(prefix = "mes", rename = "Ignore")]
        pub ignore: Option<mod_typ::ArrayOfBaseItemIdsType>,
        #[yaserde(prefix = "mes", rename = "MaxChangesReturned")]
        pub max_changes_returned: mod_typ::MaxSyncChangesReturnedType,
        #[yaserde(prefix = "mes", rename = "SyncScope")]
        pub sync_scope: Option<mod_typ::SyncFolderItemsScopeType>,
    }
    pub type SyncFolderItems = mod_mes::SyncFolderItemsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SyncFolderItemsResponseMessageType")]
    pub struct SyncFolderItemsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "SyncState")]
        pub sync_state: Option<String>,
        #[yaserde(prefix = "mes", rename = "IncludesLastItemInRange")]
        pub includes_last_item_in_range: Option<bool>,
        #[yaserde(prefix = "mes", rename = "Changes")]
        pub changes: Option<mod_typ::SyncFolderItemsChangesType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SyncFolderItemsResponseType")]
    pub struct SyncFolderItemsResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type SyncFolderItemsResponse = mod_mes::SyncFolderItemsResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetUserAvailabilityRequestType")]
    pub struct GetUserAvailabilityRequestType {
        #[yaserde(rename = "TimeZone")]
        pub time_zone: Option<mod_typ::TimeZone>,
        #[yaserde(prefix = "mes", rename = "MailboxDataArray")]
        pub mailbox_data_array: mod_typ::ArrayOfMailboxData,
        #[yaserde(rename = "FreeBusyViewOptions")]
        pub free_busy_view_options: Option<mod_typ::FreeBusyViewOptions>,
        #[yaserde(rename = "SuggestionsViewOptions")]
        pub suggestions_view_options: Option<mod_typ::SuggestionsViewOptions>,
    }
    pub type GetUserAvailabilityRequest = mod_mes::GetUserAvailabilityRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FreeBusyResponseType")]
    pub struct FreeBusyResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessage")]
        pub response_message: Option<mod_mes::ResponseMessageType>,
        #[yaserde(prefix = "mes", rename = "FreeBusyView")]
        pub free_busy_view: Option<mod_typ::FreeBusyView>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ArrayOfFreeBusyResponse")]
    pub struct ArrayOfFreeBusyResponse {
        #[yaserde(prefix = "mes", rename = "FreeBusyResponse")]
        pub free_busy_response: Vec<mod_mes::FreeBusyResponseType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SuggestionsResponseType")]
    pub struct SuggestionsResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessage")]
        pub response_message: Option<mod_mes::ResponseMessageType>,
        #[yaserde(prefix = "mes", rename = "SuggestionDayResultArray")]
        pub suggestion_day_result_array: Option<mod_typ::ArrayOfSuggestionDayResult>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetUserAvailabilityResponseType")]
    pub struct GetUserAvailabilityResponseType {
        #[yaserde(prefix = "mes", rename = "FreeBusyResponseArray")]
        pub free_busy_response_array: Option<mod_mes::ArrayOfFreeBusyResponse>,
        #[yaserde(prefix = "mes", rename = "SuggestionsResponse")]
        pub suggestions_response: Option<mod_mes::SuggestionsResponseType>,
    }
    pub type GetUserAvailabilityResponse = mod_mes::GetUserAvailabilityResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetUserOofSettingsRequest")]
    pub struct GetUserOofSettingsRequest {
        #[yaserde(rename = "Mailbox")]
        pub mailbox: mod_typ::Mailbox,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetUserOofSettingsResponse")]
    pub struct GetUserOofSettingsResponse {
        #[yaserde(prefix = "mes", rename = "ResponseMessage")]
        pub response_message: mod_mes::ResponseMessageType,
        #[yaserde(rename = "OofSettings")]
        pub oof_settings: Option<mod_typ::OofSettings>,
        #[yaserde(prefix = "mes", rename = "AllowExternalOof")]
        pub allow_external_oof: Option<mod_typ::ExternalAudience>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetUserOofSettingsRequest")]
    pub struct SetUserOofSettingsRequest {
        #[yaserde(rename = "Mailbox")]
        pub mailbox: mod_typ::Mailbox,
        #[yaserde(rename = "UserOofSettings")]
        pub user_oof_settings: mod_typ::UserOofSettings,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetUserOofSettingsResponse")]
    pub struct SetUserOofSettingsResponse {
        #[yaserde(prefix = "mes", rename = "ResponseMessage")]
        pub response_message: Option<mod_mes::ResponseMessageType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ConvertIdType")]
    pub struct ConvertIdType {
        #[yaserde(prefix = "mes", rename = "SourceIds")]
        pub source_ids: mod_typ::NonEmptyArrayOfAlternateIdsType,
    }
    pub type ConvertId = mod_mes::ConvertIdType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ConvertIdResponseType")]
    pub struct ConvertIdResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type ConvertIdResponse = mod_mes::ConvertIdResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ConvertIdResponseMessageType")]
    pub struct ConvertIdResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "AlternateId")]
        pub alternate_id: Option<mod_typ::AlternateIdBaseType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetDelegateType")]
    pub struct GetDelegateType {
        #[yaserde(prefix = "mes", rename = "Mailbox")]
        pub mailbox: mod_typ::EmailAddressType,
        #[yaserde(prefix = "mes", rename = "UserIds")]
        pub user_ids: Option<mod_typ::ArrayOfUserIdType>,
    }
    pub type GetDelegate = mod_mes::GetDelegateType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetDelegateResponseMessageType")]
    pub struct GetDelegateResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: Option<mod_mes::ArrayOfDelegateUserResponseMessageType>,
        #[yaserde(prefix = "mes", rename = "DeliverMeetingRequests")]
        pub deliver_meeting_requests: Option<mod_typ::DeliverMeetingRequestsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ArrayOfDelegateUserResponseMessageType")]
    pub struct ArrayOfDelegateUserResponseMessageType {
        #[yaserde(prefix = "mes", rename = "DelegateUserResponseMessageType")]
        pub delegate_user_response_message_type: Vec<mod_mes::DelegateUserResponseMessageType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DelegateUserResponseMessageType")]
    pub struct DelegateUserResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "DelegateUser")]
        pub delegate_user: Option<mod_typ::DelegateUserType>,
    }
    pub type GetDelegateResponse = mod_mes::GetDelegateResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddDelegateType")]
    pub struct AddDelegateType {
        #[yaserde(prefix = "mes", rename = "Mailbox")]
        pub mailbox: mod_typ::EmailAddressType,
        #[yaserde(prefix = "mes", rename = "DelegateUsers")]
        pub delegate_users: mod_typ::ArrayOfDelegateUserType,
        #[yaserde(prefix = "mes", rename = "DeliverMeetingRequests")]
        pub deliver_meeting_requests: Option<mod_typ::DeliverMeetingRequestsType>,
    }
    pub type AddDelegate = mod_mes::AddDelegateType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "BaseDelegateResponseMessageType")]
    pub struct BaseDelegateResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: Option<mod_mes::ArrayOfDelegateUserResponseMessageType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "BaseDelegateType")]
    pub struct BaseDelegateType {
        #[yaserde(prefix = "mes", rename = "Mailbox")]
        pub mailbox: mod_typ::EmailAddressType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddDelegateResponseMessageType")]
    pub struct AddDelegateResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: Option<mod_mes::ArrayOfDelegateUserResponseMessageType>,
    }
    pub type AddDelegateResponse = mod_mes::AddDelegateResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RemoveDelegateType")]
    pub struct RemoveDelegateType {
        #[yaserde(prefix = "mes", rename = "Mailbox")]
        pub mailbox: mod_typ::EmailAddressType,
        #[yaserde(prefix = "mes", rename = "UserIds")]
        pub user_ids: mod_typ::ArrayOfUserIdType,
    }
    pub type RemoveDelegate = mod_mes::RemoveDelegateType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RemoveDelegateResponseMessageType")]
    pub struct RemoveDelegateResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: Option<mod_mes::ArrayOfDelegateUserResponseMessageType>,
    }
    pub type RemoveDelegateResponse = mod_mes::RemoveDelegateResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateDelegateType")]
    pub struct UpdateDelegateType {
        #[yaserde(prefix = "mes", rename = "Mailbox")]
        pub mailbox: mod_typ::EmailAddressType,
        #[yaserde(prefix = "mes", rename = "DelegateUsers")]
        pub delegate_users: Option<mod_typ::ArrayOfDelegateUserType>,
        #[yaserde(prefix = "mes", rename = "DeliverMeetingRequests")]
        pub deliver_meeting_requests: Option<mod_typ::DeliverMeetingRequestsType>,
    }
    pub type UpdateDelegate = mod_mes::UpdateDelegateType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateDelegateResponseMessageType")]
    pub struct UpdateDelegateResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: Option<mod_mes::ArrayOfDelegateUserResponseMessageType>,
    }
    pub type UpdateDelegateResponse = mod_mes::UpdateDelegateResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetSharingMetadataType")]
    pub struct GetSharingMetadataType {
        #[yaserde(prefix = "mes", rename = "IdOfFolderToShare")]
        pub id_of_folder_to_share: mod_typ::FolderIdType,
        #[yaserde(prefix = "mes", rename = "SenderSmtpAddress")]
        pub sender_smtp_address: mod_typ::NonEmptyStringType,
        #[yaserde(prefix = "mes", rename = "Recipients")]
        pub recipients: mod_typ::ArrayOfSmtpAddressType,
    }
    pub type GetSharingMetadata = mod_mes::GetSharingMetadataType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetSharingMetadataResponseMessageType")]
    pub struct GetSharingMetadataResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "EncryptedSharedFolderDataCollection")]
        pub encrypted_shared_folder_data_collection: Option<mod_typ::ArrayOfEncryptedSharedFolderDataType>,
        #[yaserde(prefix = "mes", rename = "InvalidRecipients")]
        pub invalid_recipients: Option<mod_typ::ArrayOfInvalidRecipientsType>,
    }
    pub type GetSharingMetadataResponse = mod_mes::GetSharingMetadataResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RefreshSharingFolderType")]
    pub struct RefreshSharingFolderType {
        #[yaserde(prefix = "mes", rename = "SharingFolderId")]
        pub sharing_folder_id: mod_typ::FolderIdType,
    }
    pub type RefreshSharingFolder = mod_mes::RefreshSharingFolderType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RefreshSharingFolderResponseMessageType")]
    pub struct RefreshSharingFolderResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type RefreshSharingFolderResponse = mod_mes::RefreshSharingFolderResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetSharingFolderType")]
    pub struct GetSharingFolderType {
        #[yaserde(prefix = "mes", rename = "SmtpAddress")]
        pub smtp_address: mod_typ::NonEmptyStringType,
        #[yaserde(prefix = "mes", rename = "DataType")]
        pub data_type: Option<mod_typ::SharingDataType>,
        #[yaserde(prefix = "mes", rename = "SharedFolderId")]
        pub shared_folder_id: Option<mod_typ::NonEmptyStringType>,
    }
    pub type GetSharingFolder = mod_mes::GetSharingFolderType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetSharingFolderResponseMessageType")]
    pub struct GetSharingFolderResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "SharingFolderId")]
        pub sharing_folder_id: Option<mod_typ::FolderIdType>,
    }
    pub type GetSharingFolderResponse = mod_mes::GetSharingFolderResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateUserConfigurationType")]
    pub struct CreateUserConfigurationType {
        #[yaserde(prefix = "mes", rename = "UserConfiguration")]
        pub user_configuration: mod_typ::UserConfigurationType,
    }
    pub type CreateUserConfiguration = mod_mes::CreateUserConfigurationType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateUserConfigurationResponseType")]
    pub struct CreateUserConfigurationResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type CreateUserConfigurationResponse = mod_mes::CreateUserConfigurationResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteUserConfigurationType")]
    pub struct DeleteUserConfigurationType {
        #[yaserde(prefix = "mes", rename = "UserConfigurationName")]
        pub user_configuration_name: mod_typ::UserConfigurationNameType,
    }
    pub type DeleteUserConfiguration = mod_mes::DeleteUserConfigurationType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteUserConfigurationResponseType")]
    pub struct DeleteUserConfigurationResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type DeleteUserConfigurationResponse = mod_mes::DeleteUserConfigurationResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetUserConfigurationType")]
    pub struct GetUserConfigurationType {
        #[yaserde(prefix = "mes", rename = "UserConfigurationName")]
        pub user_configuration_name: mod_typ::UserConfigurationNameType,
        #[yaserde(prefix = "mes", rename = "UserConfigurationProperties")]
        pub user_configuration_properties: mod_typ::UserConfigurationPropertyType,
    }
    pub type GetUserConfiguration = mod_mes::GetUserConfigurationType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetUserConfigurationResponseMessageType")]
    pub struct GetUserConfigurationResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "UserConfiguration")]
        pub user_configuration: Option<mod_typ::UserConfigurationType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetUserConfigurationResponseType")]
    pub struct GetUserConfigurationResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type GetUserConfigurationResponse = mod_mes::GetUserConfigurationResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetSpecificUserConfigurationType")]
    pub struct GetSpecificUserConfigurationType {
        #[yaserde(prefix = "mes", rename = "UserConfigurationName")]
        pub user_configuration_name: mod_typ::UserConfigurationNameType,
        #[yaserde(prefix = "mes", rename = "UserConfigurationProperties")]
        pub user_configuration_properties: mod_typ::UserConfigurationPropertyType,
    }
    pub type GetSpecificUserConfiguration = mod_mes::GetSpecificUserConfigurationType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetSpecificUserConfigurationResponseMessageType")]
    pub struct GetSpecificUserConfigurationResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "UserConfiguration")]
        pub user_configuration: Option<mod_typ::UserConfigurationType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetSpecificUserConfigurationResponseType")]
    pub struct GetSpecificUserConfigurationResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type GetSpecificUserConfigurationResponse = mod_mes::GetSpecificUserConfigurationResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateUserConfigurationType")]
    pub struct UpdateUserConfigurationType {
        #[yaserde(prefix = "mes", rename = "UserConfiguration")]
        pub user_configuration: mod_typ::UserConfigurationType,
    }
    pub type UpdateUserConfiguration = mod_mes::UpdateUserConfigurationType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateUserConfigurationResponseType")]
    pub struct UpdateUserConfigurationResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type UpdateUserConfigurationResponse = mod_mes::UpdateUserConfigurationResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetTeamMailboxRequestType")]
    pub struct SetTeamMailboxRequestType {
        #[yaserde(prefix = "mes", rename = "EmailAddress")]
        pub email_address: mod_typ::EmailAddressType,
        #[yaserde(prefix = "mes", rename = "SharePointSiteUrl")]
        pub share_point_site_url: String,
        #[yaserde(prefix = "mes", rename = "State")]
        pub state: mod_typ::TeamMailboxLifecycleStateType,
    }
    pub type SetTeamMailbox = mod_mes::SetTeamMailboxRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UnpinTeamMailboxRequestType")]
    pub struct UnpinTeamMailboxRequestType {
        #[yaserde(prefix = "mes", rename = "EmailAddress")]
        pub email_address: mod_typ::EmailAddressType,
    }
    pub type UnpinTeamMailbox = mod_mes::UnpinTeamMailboxRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetTeamMailboxResponseMessageType")]
    pub struct SetTeamMailboxResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type SetTeamMailboxResponse = mod_mes::SetTeamMailboxResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UnpinTeamMailboxResponseMessageType")]
    pub struct UnpinTeamMailboxResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type UnpinTeamMailboxResponse = mod_mes::UnpinTeamMailboxResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetRoomListsType")]
    pub struct GetRoomListsType {}
    pub type GetRoomLists = mod_mes::GetRoomListsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetRoomListsResponseMessageType")]
    pub struct GetRoomListsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "RoomLists")]
        pub room_lists: Option<mod_typ::ArrayOfEmailAddressesType>,
    }
    pub type GetRoomListsResponse = mod_mes::GetRoomListsResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetRoomsType")]
    pub struct GetRoomsType {
        #[yaserde(prefix = "mes", rename = "RoomList")]
        pub room_list: mod_typ::EmailAddressType,
    }
    pub type GetRooms = mod_mes::GetRoomsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetRoomsResponseMessageType")]
    pub struct GetRoomsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Rooms")]
        pub rooms: Option<mod_typ::ArrayOfRoomsType>,
    }
    pub type GetRoomsResponse = mod_mes::GetRoomsResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetRemindersType")]
    pub struct GetRemindersType {
        #[yaserde(prefix = "mes", rename = "BeginTime")]
        pub begin_time: Option<String>,
        #[yaserde(prefix = "mes", rename = "EndTime")]
        pub end_time: Option<String>,
        #[yaserde(prefix = "mes", rename = "MaxItems")]
        pub max_items: Option<String>,
        #[yaserde(prefix = "mes", rename = "ReminderType")]
        pub reminder_type: Option<String>,
    }
    pub type GetReminders = mod_mes::GetRemindersType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetRemindersResponseMessageType")]
    pub struct GetRemindersResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Reminders")]
        pub reminders: mod_typ::ArrayOfRemindersType,
    }
    pub type GetRemindersResponse = mod_mes::GetRemindersResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "PerformReminderActionType")]
    pub struct PerformReminderActionType {
        #[yaserde(prefix = "mes", rename = "ReminderItemActions")]
        pub reminder_item_actions: mod_typ::NonEmptyArrayOfReminderItemActionType,
    }
    pub type PerformReminderAction = mod_mes::PerformReminderActionType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "PerformReminderActionResponseMessageType")]
    pub struct PerformReminderActionResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "UpdatedItemIds")]
        pub updated_item_ids: mod_typ::NonEmptyArrayOfItemIdsType,
    }
    pub type PerformReminderActionResponse = mod_mes::PerformReminderActionResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ArrayOfServiceConfigurationType")]
    pub struct ArrayOfServiceConfigurationType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetServiceConfigurationType")]
    pub struct GetServiceConfigurationType {
        #[yaserde(prefix = "mes", rename = "ActingAs")]
        pub acting_as: Option<mod_typ::EmailAddressType>,
        #[yaserde(prefix = "mes", rename = "RequestedConfiguration")]
        pub requested_configuration: mod_mes::ArrayOfServiceConfigurationType,
        #[yaserde(prefix = "mes", rename = "ConfigurationRequestDetails")]
        pub configuration_request_details: Option<mod_typ::ConfigurationRequestDetailsType>,
    }
    pub type GetServiceConfiguration = mod_mes::GetServiceConfigurationType;
    pub type GetServiceConfigurationResponse = mod_mes::GetServiceConfigurationResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetServiceConfigurationResponseMessageType")]
    pub struct GetServiceConfigurationResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: Option<mod_mes::ArrayOfServiceConfigurationResponseMessageType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ArrayOfServiceConfigurationResponseMessageType")]
    pub struct ArrayOfServiceConfigurationResponseMessageType {
        #[yaserde(prefix = "mes", rename = "ServiceConfigurationResponseMessageType")]
        pub service_configuration_response_message_type: Vec<mod_mes::ServiceConfigurationResponseMessageType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ServiceConfigurationResponseMessageType")]
    pub struct ServiceConfigurationResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MailTipsConfiguration")]
        pub mail_tips_configuration: Option<mod_typ::MailTipsServiceConfiguration>,
        #[yaserde(prefix = "mes", rename = "UnifiedMessagingConfiguration")]
        pub unified_messaging_configuration: Option<mod_typ::UnifiedMessageServiceConfiguration>,
        #[yaserde(prefix = "mes", rename = "ProtectionRulesConfiguration")]
        pub protection_rules_configuration: Option<mod_typ::ProtectionRulesServiceConfiguration>,
        #[yaserde(prefix = "mes", rename = "PolicyNudgeRulesConfiguration")]
        pub policy_nudge_rules_configuration: Option<mod_typ::PolicyNudgeRulesServiceConfiguration>,
        #[yaserde(prefix = "mes", rename = "SharePointURLsConfiguration")]
        pub share_point_ur_ls_configuration: Option<mod_typ::SharePointURLsServiceConfiguration>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindMessageTrackingReportRequestType")]
    pub struct FindMessageTrackingReportRequestType {}
    pub type FindMessageTrackingReport = mod_mes::FindMessageTrackingReportRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindMessageTrackingReportResponseMessageType")]
    pub struct FindMessageTrackingReportResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Diagnostics")]
        pub diagnostics: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "mes", rename = "MessageTrackingSearchResults")]
        pub message_tracking_search_results: Option<mod_typ::ArrayOfFindMessageTrackingSearchResultType>,
        #[yaserde(prefix = "mes", rename = "ExecutedSearchScope")]
        pub executed_search_scope: Option<String>,
        #[yaserde(prefix = "mes", rename = "Errors")]
        pub errors: Option<mod_typ::ArrayOfArraysOfTrackingPropertiesType>,
        #[yaserde(prefix = "mes", rename = "Properties")]
        pub properties: Option<mod_typ::ArrayOfTrackingPropertiesType>,
    }
    pub type FindMessageTrackingReportResponse = mod_mes::FindMessageTrackingReportResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetMessageTrackingReportRequestType")]
    pub struct GetMessageTrackingReportRequestType {}
    pub type GetMessageTrackingReport = mod_mes::GetMessageTrackingReportRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetMessageTrackingReportResponseMessageType")]
    pub struct GetMessageTrackingReportResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MessageTrackingReport")]
        pub message_tracking_report: Option<mod_typ::MessageTrackingReportType>,
        #[yaserde(prefix = "mes", rename = "Diagnostics")]
        pub diagnostics: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "mes", rename = "Errors")]
        pub errors: Option<mod_typ::ArrayOfArraysOfTrackingPropertiesType>,
        #[yaserde(prefix = "mes", rename = "Properties")]
        pub properties: Option<mod_typ::ArrayOfTrackingPropertiesType>,
    }
    pub type GetMessageTrackingReportResponse = mod_mes::GetMessageTrackingReportResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetInboxRulesRequestType")]
    pub struct GetInboxRulesRequestType {
        #[yaserde(prefix = "mes", rename = "MailboxSmtpAddress")]
        pub mailbox_smtp_address: Option<String>,
    }
    pub type GetInboxRules = mod_mes::GetInboxRulesRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetInboxRulesResponseType")]
    pub struct GetInboxRulesResponseType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "OutlookRuleBlobExists")]
        pub outlook_rule_blob_exists: Option<bool>,
        #[yaserde(prefix = "mes", rename = "InboxRules")]
        pub inbox_rules: Option<mod_typ::ArrayOfRulesType>,
    }
    pub type GetInboxRulesResponse = mod_mes::GetInboxRulesResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateInboxRulesRequestType")]
    pub struct UpdateInboxRulesRequestType {
        #[yaserde(prefix = "mes", rename = "MailboxSmtpAddress")]
        pub mailbox_smtp_address: Option<String>,
        #[yaserde(prefix = "mes", rename = "RemoveOutlookRuleBlob")]
        pub remove_outlook_rule_blob: Option<bool>,
        #[yaserde(prefix = "mes", rename = "Operations")]
        pub operations: mod_typ::ArrayOfRuleOperationsType,
    }
    pub type UpdateInboxRules = mod_mes::UpdateInboxRulesRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateInboxRulesResponseType")]
    pub struct UpdateInboxRulesResponseType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "RuleOperationErrors")]
        pub rule_operation_errors: Option<mod_typ::ArrayOfRuleOperationErrorsType>,
    }
    pub type UpdateInboxRulesResponse = mod_mes::UpdateInboxRulesResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindMailboxStatisticsByKeywordsType")]
    pub struct FindMailboxStatisticsByKeywordsType {
        #[yaserde(prefix = "mes", rename = "Mailboxes")]
        pub mailboxes: mod_typ::ArrayOfUserMailboxesType,
        #[yaserde(prefix = "mes", rename = "Keywords")]
        pub keywords: mod_typ::ArrayOfStringsType,
        #[yaserde(prefix = "mes", rename = "Language")]
        pub language: Option<String>,
        #[yaserde(prefix = "mes", rename = "Senders")]
        pub senders: Option<mod_typ::ArrayOfSmtpAddressType>,
        #[yaserde(prefix = "mes", rename = "Recipients")]
        pub recipients: Option<mod_typ::ArrayOfSmtpAddressType>,
        #[yaserde(prefix = "mes", rename = "FromDate")]
        pub from_date: Option<String>,
        #[yaserde(prefix = "mes", rename = "ToDate")]
        pub to_date: Option<String>,
        #[yaserde(prefix = "mes", rename = "MessageTypes")]
        pub message_types: Option<mod_typ::ArrayOfSearchItemKindsType>,
        #[yaserde(prefix = "mes", rename = "SearchDumpster")]
        pub search_dumpster: Option<bool>,
        #[yaserde(prefix = "mes", rename = "IncludePersonalArchive")]
        pub include_personal_archive: Option<bool>,
        #[yaserde(prefix = "mes", rename = "IncludeUnsearchableItems")]
        pub include_unsearchable_items: Option<bool>,
    }
    pub type FindMailboxStatisticsByKeywords = mod_mes::FindMailboxStatisticsByKeywordsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindMailboxStatisticsByKeywordsResponseType")]
    pub struct FindMailboxStatisticsByKeywordsResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type FindMailboxStatisticsByKeywordsResponse = mod_mes::FindMailboxStatisticsByKeywordsResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindMailboxStatisticsByKeywordsResponseMessageType")]
    pub struct FindMailboxStatisticsByKeywordsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MailboxStatisticsSearchResult")]
        pub mailbox_statistics_search_result: mod_typ::MailboxStatisticsSearchResultType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetSearchableMailboxesType")]
    pub struct GetSearchableMailboxesType {
        #[yaserde(prefix = "mes", rename = "SearchFilter")]
        pub search_filter: Option<String>,
        #[yaserde(prefix = "mes", rename = "ExpandGroupMembership")]
        pub expand_group_membership: Option<bool>,
    }
    pub type GetSearchableMailboxes = mod_mes::GetSearchableMailboxesType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetSearchableMailboxesResponseMessageType")]
    pub struct GetSearchableMailboxesResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "SearchableMailboxes")]
        pub searchable_mailboxes: mod_typ::ArrayOfSearchableMailboxesType,
        #[yaserde(prefix = "mes", rename = "FailedMailboxes")]
        pub failed_mailboxes: Option<mod_typ::ArrayOfFailedSearchMailboxesType>,
    }
    pub type GetSearchableMailboxesResponse = mod_mes::GetSearchableMailboxesResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SearchMailboxesType")]
    pub struct SearchMailboxesType {
        #[yaserde(prefix = "mes", rename = "SearchQueries")]
        pub search_queries: mod_typ::NonEmptyArrayOfMailboxQueriesType,
        #[yaserde(prefix = "mes", rename = "ResultType")]
        pub result_type: mod_typ::SearchResultType,
        #[yaserde(prefix = "mes", rename = "PreviewItemResponseShape")]
        pub preview_item_response_shape: Option<mod_typ::PreviewItemResponseShapeType>,
        #[yaserde(prefix = "mes", rename = "SortBy")]
        pub sort_by: Option<mod_typ::FieldOrderType>,
        #[yaserde(prefix = "mes", rename = "Language")]
        pub language: Option<String>,
        #[yaserde(prefix = "mes", rename = "Deduplication")]
        pub deduplication: Option<bool>,
        #[yaserde(prefix = "mes", rename = "PageSize")]
        pub page_size: Option<i32>,
        #[yaserde(prefix = "mes", rename = "PageItemReference")]
        pub page_item_reference: Option<String>,
        #[yaserde(prefix = "mes", rename = "PageDirection")]
        pub page_direction: Option<mod_typ::SearchPageDirectionType>,
    }
    pub type SearchMailboxes = mod_mes::SearchMailboxesType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SearchMailboxesResponseType")]
    pub struct SearchMailboxesResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type SearchMailboxesResponse = mod_mes::SearchMailboxesResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SearchMailboxesResponseMessageType")]
    pub struct SearchMailboxesResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "SearchMailboxesResult")]
        pub search_mailboxes_result: Option<mod_typ::SearchMailboxesResultType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetDiscoverySearchConfigurationType")]
    pub struct GetDiscoverySearchConfigurationType {
        #[yaserde(prefix = "mes", rename = "SearchId")]
        pub search_id: Option<String>,
        #[yaserde(prefix = "mes", rename = "ExpandGroupMembership")]
        pub expand_group_membership: Option<bool>,
        #[yaserde(prefix = "mes", rename = "InPlaceHoldConfigurationOnly")]
        pub in_place_hold_configuration_only: Option<bool>,
    }
    pub type GetDiscoverySearchConfiguration = mod_mes::GetDiscoverySearchConfigurationType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetDiscoverySearchConfigurationResponseMessageType")]
    pub struct GetDiscoverySearchConfigurationResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "DiscoverySearchConfigurations")]
        pub discovery_search_configurations: mod_typ::ArrayOfDiscoverySearchConfigurationType,
    }
    pub type GetDiscoverySearchConfigurationResponse = mod_mes::GetDiscoverySearchConfigurationResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetHoldOnMailboxesType")]
    pub struct GetHoldOnMailboxesType {
        #[yaserde(prefix = "mes", rename = "HoldId")]
        pub hold_id: String,
    }
    pub type GetHoldOnMailboxes = mod_mes::GetHoldOnMailboxesType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetHoldOnMailboxesResponseMessageType")]
    pub struct GetHoldOnMailboxesResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MailboxHoldResult")]
        pub mailbox_hold_result: Option<mod_typ::MailboxHoldResultType>,
    }
    pub type GetHoldOnMailboxesResponse = mod_mes::GetHoldOnMailboxesResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetHoldOnMailboxesType")]
    pub struct SetHoldOnMailboxesType {
        #[yaserde(prefix = "mes", rename = "ActionType")]
        pub action_type: mod_typ::HoldActionType,
        #[yaserde(prefix = "mes", rename = "HoldId")]
        pub hold_id: String,
        #[yaserde(prefix = "mes", rename = "Query")]
        pub query: String,
        #[yaserde(prefix = "mes", rename = "Mailboxes")]
        pub mailboxes: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "mes", rename = "Language")]
        pub language: Option<String>,
        #[yaserde(prefix = "mes", rename = "IncludeNonIndexableItems")]
        pub include_non_indexable_items: Option<bool>,
        #[yaserde(prefix = "mes", rename = "Deduplication")]
        pub deduplication: Option<bool>,
        #[yaserde(prefix = "mes", rename = "InPlaceHoldIdentity")]
        pub in_place_hold_identity: Option<String>,
        #[yaserde(prefix = "mes", rename = "ItemHoldPeriod")]
        pub item_hold_period: Option<String>,
    }
    pub type SetHoldOnMailboxes = mod_mes::SetHoldOnMailboxesType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetHoldOnMailboxesResponseMessageType")]
    pub struct SetHoldOnMailboxesResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MailboxHoldResult")]
        pub mailbox_hold_result: Option<mod_typ::MailboxHoldResultType>,
    }
    pub type SetHoldOnMailboxesResponse = mod_mes::SetHoldOnMailboxesResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetNonIndexableItemStatisticsType")]
    pub struct GetNonIndexableItemStatisticsType {
        #[yaserde(prefix = "mes", rename = "Mailboxes")]
        pub mailboxes: mod_typ::NonEmptyArrayOfLegacyDNsType,
        #[yaserde(prefix = "mes", rename = "SearchArchiveOnly")]
        pub search_archive_only: Option<bool>,
    }
    pub type GetNonIndexableItemStatistics = mod_mes::GetNonIndexableItemStatisticsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetNonIndexableItemStatisticsResponseMessageType")]
    pub struct GetNonIndexableItemStatisticsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "NonIndexableItemStatistics")]
        pub non_indexable_item_statistics: Option<mod_typ::ArrayOfNonIndexableItemStatisticsType>,
    }
    pub type GetNonIndexableItemStatisticsResponse = mod_mes::GetNonIndexableItemStatisticsResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetNonIndexableItemDetailsType")]
    pub struct GetNonIndexableItemDetailsType {
        #[yaserde(prefix = "mes", rename = "Mailboxes")]
        pub mailboxes: mod_typ::NonEmptyArrayOfLegacyDNsType,
        #[yaserde(prefix = "mes", rename = "PageSize")]
        pub page_size: Option<i32>,
        #[yaserde(prefix = "mes", rename = "PageItemReference")]
        pub page_item_reference: Option<String>,
        #[yaserde(prefix = "mes", rename = "PageDirection")]
        pub page_direction: Option<mod_typ::SearchPageDirectionType>,
        #[yaserde(prefix = "mes", rename = "SearchArchiveOnly")]
        pub search_archive_only: Option<bool>,
    }
    pub type GetNonIndexableItemDetails = mod_mes::GetNonIndexableItemDetailsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetNonIndexableItemDetailsResponseMessageType")]
    pub struct GetNonIndexableItemDetailsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "NonIndexableItemDetailsResult")]
        pub non_indexable_item_details_result: Option<mod_typ::NonIndexableItemDetailResultType>,
    }
    pub type GetNonIndexableItemDetailsResponse = mod_mes::GetNonIndexableItemDetailsResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "MarkAllItemsAsReadType")]
    pub struct MarkAllItemsAsReadType {
        #[yaserde(prefix = "mes", rename = "ReadFlag")]
        pub read_flag: bool,
        #[yaserde(prefix = "mes", rename = "SuppressReadReceipts")]
        pub suppress_read_receipts: bool,
        #[yaserde(prefix = "mes", rename = "FolderIds")]
        pub folder_ids: mod_typ::NonEmptyArrayOfBaseFolderIdsType,
    }
    pub type MarkAllItemsAsRead = mod_mes::MarkAllItemsAsReadType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "MarkAllItemsAsReadResponseType")]
    pub struct MarkAllItemsAsReadResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type MarkAllItemsAsReadResponse = mod_mes::MarkAllItemsAsReadResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetConversationItemsType")]
    pub struct GetConversationItemsType {
        #[yaserde(prefix = "mes", rename = "ItemShape")]
        pub item_shape: mod_typ::ItemResponseShapeType,
        #[yaserde(prefix = "mes", rename = "FoldersToIgnore")]
        pub folders_to_ignore: Option<mod_typ::NonEmptyArrayOfBaseFolderIdsType>,
        #[yaserde(prefix = "mes", rename = "MaxItemsToReturn")]
        pub max_items_to_return: Option<i32>,
        #[yaserde(prefix = "mes", rename = "SortOrder")]
        pub sort_order: Option<mod_typ::ConversationNodeSortOrder>,
        #[yaserde(prefix = "mes", rename = "MailboxScope")]
        pub mailbox_scope: Option<mod_typ::MailboxSearchLocationType>,
        #[yaserde(prefix = "mes", rename = "Conversations")]
        pub conversations: mod_typ::ArrayOfConversationRequestsType,
    }
    pub type GetConversationItems = mod_mes::GetConversationItemsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetConversationItemsResponseMessageType")]
    pub struct GetConversationItemsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Conversation")]
        pub conversation: Option<mod_typ::ConversationResponseType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetConversationItemsResponseType")]
    pub struct GetConversationItemsResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type GetConversationItemsResponse = mod_mes::GetConversationItemsResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetOMEConfigurationType")]
    pub struct GetOMEConfigurationType {}
    pub type GetOMEConfiguration = mod_mes::GetOMEConfigurationType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "OMEConfigurationResponseType")]
    pub struct OmeconfigurationResponseType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Xml")]
        pub xml: Option<String>,
    }
    pub type GetOMEConfigurationResponse = mod_mes::OmeconfigurationResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetOMEConfigurationType")]
    pub struct SetOMEConfigurationType {
        #[yaserde(prefix = "mes", rename = "Xml")]
        pub xml: Option<String>,
    }
    pub type SetOMEConfiguration = mod_mes::SetOMEConfigurationType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetOMEConfigurationResponseType")]
    pub struct SetOMEConfigurationResponseType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type SetOMEConfigurationResponse = mod_mes::SetOMEConfigurationResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetAppManifestsType")]
    pub struct GetAppManifestsType {
        #[yaserde(prefix = "mes", rename = "ApiVersionSupported")]
        pub api_version_supported: Option<String>,
        #[yaserde(prefix = "mes", rename = "SchemaVersionSupported")]
        pub schema_version_supported: Option<String>,
        #[yaserde(prefix = "mes", rename = "IncludeAllInstalledAddIns")]
        pub include_all_installed_add_ins: Option<bool>,
        #[yaserde(prefix = "mes", rename = "IncludeEntitlementData")]
        pub include_entitlement_data: Option<bool>,
        #[yaserde(prefix = "mes", rename = "IncludeManifestData")]
        pub include_manifest_data: Option<bool>,
        #[yaserde(prefix = "mes", rename = "IncludeCustomAppsData")]
        pub include_custom_apps_data: Option<bool>,
        #[yaserde(prefix = "mes", rename = "ExtensionIds")]
        pub extension_ids: Option<mod_mes::ListOfExtensionIdsType>,
        #[yaserde(prefix = "mes", rename = "AddIns")]
        pub add_ins: Option<mod_mes::ArrayOfPrivateCatalogAddInsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ListOfExtensionIdsType")]
    pub struct ListOfExtensionIdsType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    pub type GetAppManifests = mod_mes::GetAppManifestsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetAppManifestsResponseType")]
    pub struct GetAppManifestsResponseType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ArrayOfAppManifestsType")]
    pub struct ArrayOfAppManifestsType {
        #[yaserde(prefix = "mes", rename = "Manifest")]
        pub manifest: Vec<String>,
    }
    pub type GetAppManifestsResponse = mod_mes::GetAppManifestsResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetAppMarketplaceUrlType")]
    pub struct GetAppMarketplaceUrlType {}
    pub type GetAppMarketplaceUrl = mod_mes::GetAppMarketplaceUrlType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetAppMarketplaceUrlResponseMessageType")]
    pub struct GetAppMarketplaceUrlResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "AppMarketplaceUrl")]
        pub app_marketplace_url: Option<String>,
        #[yaserde(prefix = "mes", rename = "ConnectorsManagementUrl")]
        pub connectors_management_url: Option<String>,
    }
    pub type GetAppMarketplaceUrlResponse = mod_mes::GetAppMarketplaceUrlResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "MarkAsJunkType")]
    pub struct MarkAsJunkType {
        #[yaserde(prefix = "mes", rename = "ItemIds")]
        pub item_ids: mod_typ::NonEmptyArrayOfBaseItemIdsType,
    }
    pub type MarkAsJunk = mod_mes::MarkAsJunkType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "MarkAsJunkResponseType")]
    pub struct MarkAsJunkResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type MarkAsJunkResponse = mod_mes::MarkAsJunkResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "MarkAsJunkResponseMessageType")]
    pub struct MarkAsJunkResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MovedItemId")]
        pub moved_item_id: Option<mod_typ::ItemIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ReportMessageType")]
    pub struct ReportMessageType {
        #[yaserde(prefix = "mes", rename = "ItemIds")]
        pub item_ids: mod_typ::NonEmptyArrayOfBaseItemIdsType,
    }
    pub type ReportMessage = mod_mes::ReportMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ReportMessageResponseType")]
    pub struct ReportMessageResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type ReportMessageResponse = mod_mes::ReportMessageResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ReportMessageResponseMessageType")]
    pub struct ReportMessageResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MovedItemId")]
        pub moved_item_id: Option<mod_typ::ItemIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "InstallAppType")]
    pub struct InstallAppType {
        #[yaserde(prefix = "mes", rename = "Manifest")]
        pub manifest: String,
        #[yaserde(prefix = "mes", rename = "MarketplaceAssetId")]
        pub marketplace_asset_id: Option<String>,
        #[yaserde(prefix = "mes", rename = "MarketplaceContentMarket")]
        pub marketplace_content_market: Option<String>,
        #[yaserde(prefix = "mes", rename = "SendWelcomeEmail")]
        pub send_welcome_email: Option<bool>,
        #[yaserde(prefix = "mes", rename = "ManifestUrl")]
        pub manifest_url: Option<String>,
        #[yaserde(prefix = "mes", rename = "MarketplaceCorrelationId")]
        pub marketplace_correlation_id: Option<String>,
        #[yaserde(prefix = "mes", rename = "CampaignId")]
        pub campaign_id: Option<String>,
    }
    pub type InstallApp = mod_mes::InstallAppType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "InstallAppResponseType")]
    pub struct InstallAppResponseType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "WasFirstInstall")]
        pub was_first_install: Option<bool>,
        #[yaserde(prefix = "mes", rename = "Extension")]
        pub extension: Option<mod_typ::InstalledAppType>,
    }
    pub type InstallAppResponse = mod_mes::InstallAppResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UninstallAppType")]
    pub struct UninstallAppType {
        #[yaserde(prefix = "mes", rename = "ID")]
        pub id: String,
    }
    pub type UninstallApp = mod_mes::UninstallAppType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UninstallAppResponseType")]
    pub struct UninstallAppResponseType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type UninstallAppResponse = mod_mes::UninstallAppResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DisableAppType")]
    pub struct DisableAppType {
        #[yaserde(prefix = "mes", rename = "ID")]
        pub id: String,
        #[yaserde(prefix = "mes", rename = "DisableReason")]
        pub disable_reason: mod_typ::DisableReasonType,
    }
    pub type DisableApp = mod_mes::DisableAppType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DisableAppResponseType")]
    pub struct DisableAppResponseType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type DisableAppResponse = mod_mes::DisableAppResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddNewImContactToGroupType")]
    pub struct AddNewImContactToGroupType {
        #[yaserde(prefix = "mes", rename = "ImAddress")]
        pub im_address: mod_typ::NonEmptyStringType,
        #[yaserde(prefix = "mes", rename = "DisplayName")]
        pub display_name: Option<mod_typ::NonEmptyStringType>,
        #[yaserde(prefix = "mes", rename = "GroupId")]
        pub group_id: Option<mod_typ::ItemIdType>,
    }
    pub type AddNewImContactToGroup = mod_mes::AddNewImContactToGroupType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddNewImContactToGroupResponseMessageType")]
    pub struct AddNewImContactToGroupResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Persona")]
        pub persona: Option<mod_typ::PersonaType>,
    }
    pub type AddNewImContactToGroupResponse = mod_mes::AddNewImContactToGroupResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddNewTelUriContactToGroupType")]
    pub struct AddNewTelUriContactToGroupType {
        #[yaserde(prefix = "mes", rename = "TelUriAddress")]
        pub tel_uri_address: mod_typ::NonEmptyStringType,
        #[yaserde(prefix = "mes", rename = "ImContactSipUriAddress")]
        pub im_contact_sip_uri_address: mod_typ::NonEmptyStringType,
        #[yaserde(prefix = "mes", rename = "ImTelephoneNumber")]
        pub im_telephone_number: mod_typ::NonEmptyStringType,
        #[yaserde(prefix = "mes", rename = "GroupId")]
        pub group_id: Option<mod_typ::ItemIdType>,
    }
    pub type AddNewTelUriContactToGroup = mod_mes::AddNewTelUriContactToGroupType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddNewTelUriContactToGroupResponseMessageType")]
    pub struct AddNewTelUriContactToGroupResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Persona")]
        pub persona: Option<mod_typ::PersonaType>,
    }
    pub type AddNewTelUriContactToGroupResponse = mod_mes::AddNewTelUriContactToGroupResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddImContactToGroupType")]
    pub struct AddImContactToGroupType {
        #[yaserde(prefix = "mes", rename = "ContactId")]
        pub contact_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "mes", rename = "GroupId")]
        pub group_id: Option<mod_typ::ItemIdType>,
    }
    pub type AddImContactToGroup = mod_mes::AddImContactToGroupType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddImContactToGroupResponseMessageType")]
    pub struct AddImContactToGroupResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type AddImContactToGroupResponse = mod_mes::AddImContactToGroupResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RemoveImContactFromGroupType")]
    pub struct RemoveImContactFromGroupType {
        #[yaserde(prefix = "mes", rename = "ContactId")]
        pub contact_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "mes", rename = "GroupId")]
        pub group_id: mod_typ::ItemIdType,
    }
    pub type RemoveImContactFromGroup = mod_mes::RemoveImContactFromGroupType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RemoveImContactFromGroupResponseMessageType")]
    pub struct RemoveImContactFromGroupResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type RemoveImContactFromGroupResponse = mod_mes::RemoveImContactFromGroupResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddImGroupType")]
    pub struct AddImGroupType {
        #[yaserde(prefix = "mes", rename = "DisplayName")]
        pub display_name: mod_typ::NonEmptyStringType,
    }
    pub type AddImGroup = mod_mes::AddImGroupType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddImGroupResponseMessageType")]
    pub struct AddImGroupResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ImGroup")]
        pub im_group: Option<mod_typ::ImGroupType>,
    }
    pub type AddImGroupResponse = mod_mes::AddImGroupResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddDistributionGroupToImListType")]
    pub struct AddDistributionGroupToImListType {
        #[yaserde(prefix = "mes", rename = "SmtpAddress")]
        pub smtp_address: mod_typ::NonEmptyStringType,
        #[yaserde(prefix = "mes", rename = "DisplayName")]
        pub display_name: mod_typ::NonEmptyStringType,
    }
    pub type AddDistributionGroupToImList = mod_mes::AddDistributionGroupToImListType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "AddDistributionGroupToImListResponseMessageType")]
    pub struct AddDistributionGroupToImListResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ImGroup")]
        pub im_group: Option<mod_typ::ImGroupType>,
    }
    pub type AddDistributionGroupToImListResponse = mod_mes::AddDistributionGroupToImListResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetImItemListType")]
    pub struct GetImItemListType {
        #[yaserde(prefix = "mes", rename = "ExtendedProperties")]
        pub extended_properties: Option<mod_typ::NonEmptyArrayOfExtendedFieldURIs>,
    }
    pub type GetImItemList = mod_mes::GetImItemListType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetImItemListResponseMessageType")]
    pub struct GetImItemListResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ImItemList")]
        pub im_item_list: Option<mod_typ::ImItemListType>,
    }
    pub type GetImItemListResponse = mod_mes::GetImItemListResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetImItemsType")]
    pub struct GetImItemsType {
        #[yaserde(prefix = "mes", rename = "ContactIds")]
        pub contact_ids: Option<mod_typ::NonEmptyArrayOfBaseItemIdsType>,
        #[yaserde(prefix = "mes", rename = "GroupIds")]
        pub group_ids: Option<mod_typ::NonEmptyArrayOfBaseItemIdsType>,
        #[yaserde(prefix = "mes", rename = "ExtendedProperties")]
        pub extended_properties: Option<mod_typ::NonEmptyArrayOfExtendedFieldURIs>,
    }
    pub type GetImItems = mod_mes::GetImItemsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetImItemsResponseMessageType")]
    pub struct GetImItemsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "ImItemList")]
        pub im_item_list: Option<mod_typ::ImItemListType>,
    }
    pub type GetImItemsResponse = mod_mes::GetImItemsResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RemoveContactFromImListType")]
    pub struct RemoveContactFromImListType {
        #[yaserde(prefix = "mes", rename = "ContactId")]
        pub contact_id: mod_typ::ItemIdType,
    }
    pub type RemoveContactFromImList = mod_mes::RemoveContactFromImListType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RemoveContactFromImListResponseMessageType")]
    pub struct RemoveContactFromImListResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type RemoveContactFromImListResponse = mod_mes::RemoveContactFromImListResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RemoveDistributionGroupFromImListType")]
    pub struct RemoveDistributionGroupFromImListType {
        #[yaserde(prefix = "mes", rename = "GroupId")]
        pub group_id: mod_typ::ItemIdType,
    }
    pub type RemoveDistributionGroupFromImList = mod_mes::RemoveDistributionGroupFromImListType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RemoveDistributionGroupFromImListResponseMessageType")]
    pub struct RemoveDistributionGroupFromImListResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type RemoveDistributionGroupFromImListResponse = mod_mes::RemoveDistributionGroupFromImListResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RemoveImGroupType")]
    pub struct RemoveImGroupType {
        #[yaserde(prefix = "mes", rename = "GroupId")]
        pub group_id: mod_typ::ItemIdType,
    }
    pub type RemoveImGroup = mod_mes::RemoveImGroupType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RemoveImGroupResponseMessageType")]
    pub struct RemoveImGroupResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type RemoveImGroupResponse = mod_mes::RemoveImGroupResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetImGroupType")]
    pub struct SetImGroupType {
        #[yaserde(prefix = "mes", rename = "GroupId")]
        pub group_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "mes", rename = "NewDisplayName")]
        pub new_display_name: mod_typ::NonEmptyStringType,
    }
    pub type SetImGroup = mod_mes::SetImGroupType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetImGroupResponseMessageType")]
    pub struct SetImGroupResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type SetImGroupResponse = mod_mes::SetImGroupResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetImListMigrationCompletedType")]
    pub struct SetImListMigrationCompletedType {
        #[yaserde(prefix = "mes", rename = "ImListMigrationCompleted")]
        pub im_list_migration_completed: bool,
    }
    pub type SetImListMigrationCompleted = mod_mes::SetImListMigrationCompletedType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetImListMigrationCompletedResponseMessageType")]
    pub struct SetImListMigrationCompletedResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type SetImListMigrationCompletedResponse = mod_mes::SetImListMigrationCompletedResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetUserRetentionPolicyTagsType")]
    pub struct GetUserRetentionPolicyTagsType {}
    pub type GetUserRetentionPolicyTags = mod_mes::GetUserRetentionPolicyTagsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetUserRetentionPolicyTagsResponseMessageType")]
    pub struct GetUserRetentionPolicyTagsResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "RetentionPolicyTags")]
        pub retention_policy_tags: mod_typ::ArrayOfRetentionPolicyTagsType,
    }
    pub type GetUserRetentionPolicyTagsResponse = mod_mes::GetUserRetentionPolicyTagsResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetUserPhotoType")]
    pub struct GetUserPhotoType {
        #[yaserde(prefix = "mes", rename = "Email")]
        pub email: String,
        #[yaserde(prefix = "mes", rename = "SizeRequested")]
        pub size_requested: mod_typ::UserPhotoSizeType,
        #[yaserde(prefix = "mes", rename = "TypeRequested")]
        pub type_requested: Option<mod_typ::UserPhotoTypeType>,
    }
    pub type GetUserPhoto = mod_mes::GetUserPhotoType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetUserPhotoResponseMessageType")]
    pub struct GetUserPhotoResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "HasChanged")]
        pub has_changed: bool,
        #[yaserde(prefix = "mes", rename = "PictureData")]
        pub picture_data: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetUserPhotoResponseType")]
    pub struct GetUserPhotoResponseType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type GetUserPhotoResponse = mod_mes::GetUserPhotoResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetMeetingSpaceType")]
    pub struct GetMeetingSpaceType {
        #[yaserde(prefix = "mes", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
    }
    pub type GetMeetingSpace = mod_mes::GetMeetingSpaceType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetMeetingSpaceResponseMessageType")]
    pub struct GetMeetingSpaceResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MeetingSpace")]
        pub meeting_space: mod_typ::MeetingSpaceType,
    }
    pub type GetMeetingSpaceResponseMessage = mod_mes::GetMeetingSpaceResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateMeetingSpaceType")]
    pub struct CreateMeetingSpaceType {
        #[yaserde(prefix = "mes", rename = "MeetingSpace")]
        pub meeting_space: mod_typ::MeetingSpaceType,
    }
    pub type CreateMeetingSpace = mod_mes::CreateMeetingSpaceType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateMeetingSpaceResponseMessageType")]
    pub struct CreateMeetingSpaceResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MeetingSpace")]
        pub meeting_space: mod_typ::MeetingSpaceType,
    }
    pub type CreateMeetingSpaceResponseMessage = mod_mes::CreateMeetingSpaceResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateMeetingSpaceType")]
    pub struct UpdateMeetingSpaceType {
        #[yaserde(prefix = "mes", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "mes", rename = "MeetingSpace")]
        pub meeting_space: mod_typ::MeetingSpaceType,
    }
    pub type UpdateMeetingSpace = mod_mes::UpdateMeetingSpaceType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateMeetingSpaceResponseMessageType")]
    pub struct UpdateMeetingSpaceResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MeetingSpace")]
        pub meeting_space: mod_typ::MeetingSpaceType,
    }
    pub type UpdateMeetingSpaceResponseMessage = mod_mes::UpdateMeetingSpaceResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindMeetingSpaceByJoinUrlType")]
    pub struct FindMeetingSpaceByJoinUrlType {
        #[yaserde(prefix = "mes", rename = "JoinUrl")]
        pub join_url: String,
    }
    pub type FindMeetingSpaceByJoinUrl = mod_mes::FindMeetingSpaceByJoinUrlType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindMeetingSpaceByJoinUrlResponseMessageType")]
    pub struct FindMeetingSpaceByJoinUrlResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MeetingSpace")]
        pub meeting_space: Option<mod_typ::MeetingSpaceType>,
    }
    pub type FindMeetingSpaceByJoinUrlResponseMessage = mod_mes::FindMeetingSpaceByJoinUrlResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteMeetingSpaceType")]
    pub struct DeleteMeetingSpaceType {
        #[yaserde(prefix = "mes", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
    }
    pub type DeleteMeetingSpace = mod_mes::DeleteMeetingSpaceType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteMeetingSpaceResponseMessageType")]
    pub struct DeleteMeetingSpaceResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type DeleteMeetingSpaceResponseMessage = mod_mes::DeleteMeetingSpaceResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetMeetingInstanceRequestType")]
    pub struct GetMeetingInstanceRequestType {
        #[yaserde(prefix = "mes", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
    }
    pub type GetMeetingInstanceRequest = mod_mes::GetMeetingInstanceRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetMeetingInstanceResponseMessageType")]
    pub struct GetMeetingInstanceResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MeetingInstance")]
        pub meeting_instance: mod_typ::MeetingInstanceType,
    }
    pub type GetMeetingInstanceResponse = mod_mes::GetMeetingInstanceResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateMeetingInstanceRequestType")]
    pub struct CreateMeetingInstanceRequestType {
        #[yaserde(prefix = "mes", rename = "MeetingInstance")]
        pub meeting_instance: mod_typ::MeetingInstanceType,
    }
    pub type CreateMeetingInstanceRequest = mod_mes::CreateMeetingInstanceRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "CreateMeetingInstanceResponseMessageType")]
    pub struct CreateMeetingInstanceResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MeetingInstance")]
        pub meeting_instance: mod_typ::MeetingInstanceType,
    }
    pub type CreateMeetingInstanceResponse = mod_mes::CreateMeetingInstanceResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateMeetingInstanceRequestType")]
    pub struct UpdateMeetingInstanceRequestType {
        #[yaserde(prefix = "mes", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "mes", rename = "MeetingInstance")]
        pub meeting_instance: Option<mod_typ::MeetingInstanceType>,
        #[yaserde(prefix = "mes", rename = "ContentActivitiesToAdd")]
        pub content_activities_to_add: Option<mod_typ::NonEmptyArrayOfContentActivities>,
        #[yaserde(prefix = "mes", rename = "ParticipantActivitiesToAdd")]
        pub participant_activities_to_add: Option<mod_typ::NonEmptyArrayOfParticipantActivities>,
    }
    pub type UpdateMeetingInstanceRequest = mod_mes::UpdateMeetingInstanceRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "UpdateMeetingInstanceResponseMessageType")]
    pub struct UpdateMeetingInstanceResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MeetingInstance")]
        pub meeting_instance: mod_typ::MeetingInstanceType,
    }
    pub type UpdateMeetingInstanceResponse = mod_mes::UpdateMeetingInstanceResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteMeetingInstanceRequestType")]
    pub struct DeleteMeetingInstanceRequestType {
        #[yaserde(prefix = "mes", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
    }
    pub type DeleteMeetingInstanceRequest = mod_mes::DeleteMeetingInstanceRequestType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteMeetingInstanceResponseMessageType")]
    pub struct DeleteMeetingInstanceResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type DeleteMeetingInstanceResponse = mod_mes::DeleteMeetingInstanceResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetUserPhotoType")]
    pub struct SetUserPhotoType {
        #[yaserde(prefix = "mes", rename = "Email")]
        pub email: mod_typ::NonEmptyStringType,
        #[yaserde(prefix = "mes", rename = "Content")]
        pub content: String,
        #[yaserde(prefix = "mes", rename = "TypeRequested")]
        pub type_requested: Option<mod_typ::UserPhotoTypeType>,
    }
    pub type SetUserPhoto = mod_mes::SetUserPhotoType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "SetUserPhotoResponseMessageType")]
    pub struct SetUserPhotoResponseMessageType {
        #[yaserde(prefix = "mes", rename = "ResponseMessages")]
        pub response_messages: mod_mes::ArrayOfResponseMessagesType,
    }
    pub type SetUserPhotoResponse = mod_mes::SetUserPhotoResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RegisterConsentType")]
    pub struct RegisterConsentType {
        #[yaserde(prefix = "mes", rename = "Id")]
        pub id: String,
        #[yaserde(prefix = "mes", rename = "ConsentState")]
        pub consent_state: mod_typ::ConsentStateType,
    }
    pub type RegisterConsent = mod_mes::RegisterConsentType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "RegisterConsentResponseMessageType")]
    pub struct RegisterConsentResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type RegisterConsentResponse = mod_mes::RegisterConsentResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindAvailableMeetingTimesType")]
    pub struct FindAvailableMeetingTimesType {
        #[yaserde(prefix = "mes", rename = "Attendees")]
        pub attendees: Option<mod_typ::ArrayOfSmtpAddressType>,
        #[yaserde(prefix = "mes", rename = "SearchWindowStart")]
        pub search_window_start: String,
        #[yaserde(prefix = "mes", rename = "SearchWindowDuration")]
        pub search_window_duration: String,
        #[yaserde(prefix = "mes", rename = "MeetingDurationInMinutes")]
        pub meeting_duration_in_minutes: Option<i32>,
        #[yaserde(prefix = "mes", rename = "Location")]
        pub location: Option<String>,
        #[yaserde(prefix = "mes", rename = "MaxCandidates")]
        pub max_candidates: Option<i32>,
        #[yaserde(prefix = "mes", rename = "ActivityDomain")]
        pub activity_domain: Option<mod_typ::ActivityDomainType>,
    }
    pub type FindAvailableMeetingTimes = mod_mes::FindAvailableMeetingTimesType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindAvailableMeetingTimesResponseMessageType")]
    pub struct FindAvailableMeetingTimesResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MeetingTimeCandidates")]
        pub meeting_time_candidates: mod_typ::ArrayOfMeetingTimeCandidate,
        #[yaserde(prefix = "mes", rename = "EmptySuggestionsHint")]
        pub empty_suggestions_hint: Option<mod_typ::EmptySuggestionReason>,
    }
    pub type FindAvailableMeetingTimesResponse = mod_mes::FindAvailableMeetingTimesResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindMeetingTimeCandidatesType")]
    pub struct FindMeetingTimeCandidatesType {
        #[yaserde(prefix = "mes", rename = "AttendeeConstraints")]
        pub attendee_constraints: Option<mod_typ::FindMeetingTimesAttendeeConstraints>,
        #[yaserde(prefix = "mes", rename = "LocationConstraints")]
        pub location_constraints: Option<mod_typ::FindMeetingTimesLocationConstraints>,
        #[yaserde(prefix = "mes", rename = "SearchConstraints")]
        pub search_constraints: Option<mod_typ::FindMeetingTimesSearchConstraints>,
        #[yaserde(prefix = "mes", rename = "Constraints")]
        pub constraints: Option<mod_typ::FindMeetingTimesConstraints>,
    }
    pub type FindMeetingTimeCandidates = mod_mes::FindMeetingTimeCandidatesType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "FindMeetingTimeCandidatesResponseMessageType")]
    pub struct FindMeetingTimeCandidatesResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "MeetingTimeCandidates")]
        pub meeting_time_candidates: mod_typ::ArrayOfMeetingTimeCandidate,
    }
    pub type FindMeetingTimeCandidatesResponse = mod_mes::FindMeetingTimeCandidatesResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "StartSearchSession")]
    pub struct StartSearchSession {
        #[yaserde(prefix = "mes", rename = "SearchSessionId")]
        pub search_session_id: mod_typ::GuidType,
        #[yaserde(prefix = "mes", rename = "WarmupOptions")]
        pub warmup_options: mod_typ::WarmupOptionsType,
        #[yaserde(prefix = "mes", rename = "SuggestionTypes")]
        pub suggestion_types: mod_typ::SuggestionKindType,
        #[yaserde(prefix = "mes", rename = "SearchScope")]
        pub search_scope: mod_typ::ArrayOfSearchScopeType,
        #[yaserde(prefix = "mes", rename = "IdFormat")]
        pub id_format: Option<mod_typ::IdFormatType>,
        #[yaserde(prefix = "mes", rename = "ApplicationId")]
        pub application_id: Option<String>,
        #[yaserde(prefix = "mes", rename = "Scenario")]
        pub scenario: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "StartSearchSessionResponseMessage")]
    pub struct StartSearchSessionResponseMessage {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type StartSearchSessionResponse = mod_mes::StartSearchSessionResponseMessage;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetSearchSuggestions")]
    pub struct GetSearchSuggestions {
        #[yaserde(prefix = "mes", rename = "SearchSessionId")]
        pub search_session_id: mod_typ::GuidType,
        #[yaserde(prefix = "mes", rename = "Query")]
        pub query: Option<String>,
        #[yaserde(prefix = "mes", rename = "SuggestionTypes")]
        pub suggestion_types: Option<mod_typ::SuggestionKindType>,
        #[yaserde(prefix = "mes", rename = "SuggestionsPrimer")]
        pub suggestions_primer: Option<bool>,
        #[yaserde(prefix = "mes", rename = "MaxSuggestionsCountPerSuggestionType")]
        pub max_suggestions_count_per_suggestion_type: Option<i64>,
        #[yaserde(prefix = "mes", rename = "SearchScope")]
        pub search_scope: Option<mod_typ::ArrayOfSearchScopeType>,
        #[yaserde(prefix = "mes", rename = "Scenario")]
        pub scenario: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetSearchSuggestionsResponseMessage")]
    pub struct GetSearchSuggestionsResponseMessage {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "SearchSuggestions")]
        pub search_suggestions: mod_typ::SearchSuggestionsType,
    }
    pub type GetSearchSuggestionsResponse = mod_mes::GetSearchSuggestionsResponseMessage;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteSearchSuggestion")]
    pub struct DeleteSearchSuggestion {
        #[yaserde(prefix = "mes", rename = "SearchSessionId")]
        pub search_session_id: mod_typ::GuidType,
        #[yaserde(prefix = "mes", rename = "Query")]
        pub query: String,
        #[yaserde(prefix = "mes", rename = "SuggestionTypes")]
        pub suggestion_types: mod_typ::SuggestionKindType,
        #[yaserde(prefix = "mes", rename = "SearchScope")]
        pub search_scope: Option<mod_typ::ArrayOfSearchScopeType>,
        #[yaserde(prefix = "mes", rename = "Scenario")]
        pub scenario: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "DeleteSearchSuggestionResponseMessageType")]
    pub struct DeleteSearchSuggestionResponseMessageType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "Response")]
        pub response: mod_typ::DeleteSearchSuggestionResponseType,
    }
    pub type DeleteSearchSuggestionResponse = mod_mes::DeleteSearchSuggestionResponseMessageType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ExecuteSearch")]
    pub struct ExecuteSearch {
        #[yaserde(prefix = "mes", rename = "ApplicationId")]
        pub application_id: mod_typ::SearchApplicationIdType,
        #[yaserde(prefix = "mes", rename = "Scenario")]
        pub scenario: String,
        #[yaserde(prefix = "mes", rename = "SearchSessionId")]
        pub search_session_id: mod_typ::GuidType,
        #[yaserde(prefix = "mes", rename = "SearchScope")]
        pub search_scope: mod_typ::ArrayOfSearchScopeType,
        #[yaserde(prefix = "mes", rename = "Query")]
        pub query: String,
        #[yaserde(prefix = "mes", rename = "AnalyzedQuery")]
        pub analyzed_query: Option<mod_typ::AnalyzedQuery>,
        #[yaserde(prefix = "mes", rename = "ResultRowCount")]
        pub result_row_count: Option<i64>,
        #[yaserde(prefix = "mes", rename = "ResultRowOffset")]
        pub result_row_offset: Option<i64>,
        #[yaserde(prefix = "mes", rename = "MaxResultsCountHint")]
        pub max_results_count_hint: Option<i64>,
        #[yaserde(prefix = "mes", rename = "MaxPreviewLength")]
        pub max_preview_length: Option<i64>,
        #[yaserde(prefix = "mes", rename = "SearchRefiners")]
        pub search_refiners: Option<String>,
        #[yaserde(prefix = "mes", rename = "ExtendedKeywords")]
        pub extended_keywords: Option<String>,
        #[yaserde(prefix = "mes", rename = "RetrieveRefiners")]
        pub retrieve_refiners: Option<bool>,
        #[yaserde(prefix = "mes", rename = "MaxRefinersCountPerRefinerType")]
        pub max_refiners_count_per_refiner_type: Option<i64>,
        #[yaserde(prefix = "mes", rename = "IdFormat")]
        pub id_format: Option<mod_typ::IdFormatType>,
        #[yaserde(prefix = "mes", rename = "ItemTypes")]
        pub item_types: mod_typ::ItemTypesFilterType,
        #[yaserde(prefix = "mes", rename = "PropertySetName")]
        pub property_set_name: Option<mod_typ::SearchResultsPropertySetNameType>,
        #[yaserde(prefix = "mes", rename = "SearchRestrictions")]
        pub search_restrictions: Option<mod_typ::RestrictionType>,
        #[yaserde(prefix = "mes", rename = "IncludeDeleted")]
        pub include_deleted: Option<bool>,
        #[yaserde(prefix = "mes", rename = "SortOrder")]
        pub sort_order: Option<mod_typ::ExecuteSearchSortOrderType>,
        #[yaserde(prefix = "mes", rename = "KeywordMatchOption")]
        pub keyword_match_option: Option<mod_typ::MatchOptionsType>,
        #[yaserde(prefix = "mes", rename = "ReturnAdditionalIds")]
        pub return_additional_ids: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ExecuteSearchResponseMessage")]
    pub struct ExecuteSearchResponseMessage {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "SearchResults")]
        pub search_results: mod_typ::SearchResultsType,
    }
    pub type ExecuteSearchResponse = mod_mes::ExecuteSearchResponseMessage;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "EndSearchSession")]
    pub struct EndSearchSession {
        #[yaserde(prefix = "mes", rename = "SearchSessionId")]
        pub search_session_id: mod_typ::GuidType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "EndSearchSessionResponseMessage")]
    pub struct EndSearchSessionResponseMessage {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type EndSearchSessionResponse = mod_mes::EndSearchSessionResponseMessage;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetLastPrivateCatalogUpdateType")]
    pub struct GetLastPrivateCatalogUpdateType {
        #[yaserde(prefix = "mes", rename = "Client")]
        pub client: Option<mod_typ::OfficeClientType>,
    }
    pub type GetLastPrivateCatalogUpdate = mod_mes::GetLastPrivateCatalogUpdateType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetLastPrivateCatalogUpdateResponseType")]
    pub struct GetLastPrivateCatalogUpdateResponseType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    pub type GetLastPrivateCatalogUpdateResponse = mod_mes::GetLastPrivateCatalogUpdateResponseType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetPrivateCatalogAddInsType")]
    pub struct GetPrivateCatalogAddInsType {
        #[yaserde(prefix = "mes", rename = "Client")]
        pub client: Option<mod_typ::OfficeClientType>,
    }
    pub type GetPrivateCatalogAddIns = mod_mes::GetPrivateCatalogAddInsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "GetPrivateCatalogAddInsResponseType")]
    pub struct GetPrivateCatalogAddInsResponseType {
        #[yaserde(prefix = "mes", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseCode")]
        pub response_code: Option<mod_mes::ResponseCodeType>,
        #[yaserde(prefix = "mes", rename = "DescriptiveLinkKey")]
        pub descriptive_link_key: Option<i32>,
        #[yaserde(prefix = "mes", rename = "MessageXml")]
        pub message_xml: Option<String>,
        #[yaserde(prefix = "mes", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
        #[yaserde(prefix = "mes", rename = "AddIns")]
        pub add_ins: Option<mod_mes::ArrayOfPrivateCatalogAddInsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "ArrayOfPrivateCatalogAddInsType")]
    pub struct ArrayOfPrivateCatalogAddInsType {
        #[yaserde(prefix = "mes", rename = "AddIn")]
        pub add_in: Vec<mod_mes::PrivateCatalogAddInsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "PrivateCatalogAddInsType")]
    pub struct PrivateCatalogAddInsType {
        #[yaserde(prefix = "mes", rename = "StoreInfo")]
        pub store_info: Option<mod_mes::PrivateCatalogAddInStoreInfoType>,
        #[yaserde(prefix = "mes", rename = "ProductId", attribute = true)]
        pub product_id: String,
        #[yaserde(prefix = "mes", rename = "State", attribute = true)]
        pub state: mod_typ::AddInStateType,
        #[yaserde(prefix = "mes", rename = "Version", attribute = true)]
        pub version: mod_typ::VersionType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "mes", namespaces = {"mes" = "http://schemas.microsoft.com/exchange/services/2006/messages"}, rename = "PrivateCatalogAddInStoreInfoType")]
    pub struct PrivateCatalogAddInStoreInfoType {
        #[yaserde(prefix = "mes", rename = "AssetId", attribute = true)]
        pub asset_id: String,
        #[yaserde(prefix = "mes", rename = "ContentMarket", attribute = true)]
        pub content_market: String,
    }
    pub type GetPrivateCatalogAddInsResponse = mod_mes::GetPrivateCatalogAddInsResponseType;
}
pub mod mod_typ {
    use super::*;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailboxCultureType")]
    pub struct MailboxCultureType {}
    pub type MailboxCulture = mod_typ::MailboxCultureType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InstalledAppType")]
    pub struct InstalledAppType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: Option<String>,
        #[yaserde(prefix = "typ", rename = "MarketplaceAssetId")]
        pub marketplace_asset_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "Enabled")]
        pub enabled: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConsentState")]
        pub consent_state: Option<String>,
        #[yaserde(prefix = "typ", rename = "Type")]
        pub r#type: Option<String>,
        #[yaserde(prefix = "typ", rename = "LicenseStatus")]
        pub license_status: Option<String>,
        #[yaserde(prefix = "typ", rename = "TrialExpirationDate")]
        pub trial_expiration_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProviderName")]
        pub provider_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "IconUrl")]
        pub icon_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "HighResolutionIconUrl")]
        pub high_resolution_icon_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Description")]
        pub description: Option<String>,
        #[yaserde(prefix = "typ", rename = "Requirements")]
        pub requirements: Option<String>,
        #[yaserde(prefix = "typ", rename = "Version")]
        pub version: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfRoleType")]
    pub struct NonEmptyArrayOfRoleType {
        #[yaserde(prefix = "typ", rename = "Role")]
        pub role: Vec<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ManagementRoleType")]
    pub struct ManagementRoleType {
        #[yaserde(prefix = "typ", rename = "UserRoles")]
        pub user_roles: Option<mod_typ::NonEmptyArrayOfRoleType>,
        #[yaserde(prefix = "typ", rename = "ApplicationRoles")]
        pub application_roles: Option<mod_typ::NonEmptyArrayOfRoleType>,
    }
    pub type ManagementRole = mod_typ::ManagementRoleType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SidAndAttributesType")]
    pub struct SidAndAttributesType {
        #[yaserde(prefix = "typ", rename = "SecurityIdentifier")]
        pub security_identifier: String,
        #[yaserde(prefix = "typ", rename = "Attributes", attribute = true)]
        pub attributes: u32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfGroupIdentifiersType")]
    pub struct NonEmptyArrayOfGroupIdentifiersType {
        #[yaserde(prefix = "typ", rename = "GroupIdentifier")]
        pub group_identifier: Vec<mod_typ::SidAndAttributesType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfRestrictedGroupIdentifiersType")]
    pub struct NonEmptyArrayOfRestrictedGroupIdentifiersType {
        #[yaserde(prefix = "typ", rename = "RestrictedGroupIdentifier")]
        pub restricted_group_identifier: Vec<mod_typ::SidAndAttributesType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SerializedSecurityContextType")]
    pub struct SerializedSecurityContextType {
        #[yaserde(prefix = "typ", rename = "UserSid")]
        pub user_sid: String,
        #[yaserde(prefix = "typ", rename = "GroupSids")]
        pub group_sids: Option<mod_typ::NonEmptyArrayOfGroupIdentifiersType>,
        #[yaserde(prefix = "typ", rename = "RestrictedGroupSids")]
        pub restricted_group_sids: Option<mod_typ::NonEmptyArrayOfRestrictedGroupIdentifiersType>,
        #[yaserde(prefix = "typ", rename = "PrimarySmtpAddress")]
        pub primary_smtp_address: Option<String>,
    }
    pub type SerializedSecurityContext = mod_typ::SerializedSecurityContextType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConnectingSIDType")]
    pub struct ConnectingSIDType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PrincipalNameType")]
    pub struct PrincipalNameType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SIDType")]
    pub struct Sidtype {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PrimarySmtpAddressType")]
    pub struct PrimarySmtpAddressType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SmtpAddressType")]
    pub struct SmtpAddressType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExchangeImpersonationType")]
    pub struct ExchangeImpersonationType {
        #[yaserde(prefix = "typ", rename = "ConnectingSID")]
        pub connecting_sid: mod_typ::ConnectingSIDType,
    }
    pub type ExchangeImpersonation = mod_typ::ExchangeImpersonationType;
    /// Surfaces the various logon types that are supported for conversion
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SpecialLogonTypeType")]
    pub struct SpecialLogonTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OpenAsAdminOrSystemServiceType")]
    pub struct OpenAsAdminOrSystemServiceType {
        #[yaserde(prefix = "typ", rename = "ConnectingSID")]
        pub connecting_sid: mod_typ::ConnectingSIDType,
        #[yaserde(prefix = "typ", rename = "LogonType", attribute = true)]
        pub logon_type: mod_typ::SpecialLogonTypeType,
        #[yaserde(prefix = "typ", rename = "BudgetType", attribute = true)]
        pub budget_type: Option<i32>,
    }
    pub type OpenAsAdminOrSystemService = mod_typ::OpenAsAdminOrSystemServiceType;
    pub type SharingSecurity = mod_typ::EncryptedDataContainerType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExchangeVersionType")]
    pub struct ExchangeVersionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProxySecurityContextType")]
    pub struct ProxySecurityContextType {}
    pub type ProxySecurityContext = mod_typ::ProxySecurityContextType;
    pub type ProxySuggesterSid = mod_typ::ProxySecurityContextType;
    pub type ProxyPartnerToken = mod_typ::ProxySecurityContextType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ServerVersionInfo")]
    pub struct ServerVersionInfo {
        #[yaserde(prefix = "typ", rename = "MajorVersion", attribute = true)]
        pub major_version: Option<i32>,
        #[yaserde(prefix = "typ", rename = "MinorVersion", attribute = true)]
        pub minor_version: Option<i32>,
        #[yaserde(prefix = "typ", rename = "MajorBuildNumber", attribute = true)]
        pub major_build_number: Option<i32>,
        #[yaserde(prefix = "typ", rename = "MinorBuildNumber", attribute = true)]
        pub minor_build_number: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Version", attribute = true)]
        pub version: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RequestServerVersion")]
    pub struct RequestServerVersion {
        #[yaserde(prefix = "typ", rename = "Version", attribute = true)]
        pub version: mod_typ::ExchangeVersionType,
    }
    /// Precision for returned DateTime values
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DateTimePrecisionType")]
    pub struct DateTimePrecisionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    pub type DateTimePrecision = mod_typ::DateTimePrecisionType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyStringType")]
    pub struct NonEmptyStringType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BaseEmailAddressType")]
    pub struct BaseEmailAddressType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailboxTypeType")]
    pub struct MailboxTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmailAddressType")]
    pub struct EmailAddressType {
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: Option<String>,
        #[yaserde(prefix = "typ", rename = "EmailAddress")]
        pub email_address: Option<mod_typ::NonEmptyStringType>,
        #[yaserde(prefix = "typ", rename = "RoutingType")]
        pub routing_type: Option<mod_typ::NonEmptyStringType>,
        #[yaserde(prefix = "typ", rename = "MailboxType")]
        pub mailbox_type: Option<mod_typ::MailboxTypeType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "OriginalDisplayName")]
        pub original_display_name: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmailAddressExtendedType")]
    pub struct EmailAddressExtendedType {
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: Option<String>,
        #[yaserde(prefix = "typ", rename = "EmailAddress")]
        pub email_address: Option<mod_typ::NonEmptyStringType>,
        #[yaserde(prefix = "typ", rename = "RoutingType")]
        pub routing_type: Option<mod_typ::NonEmptyStringType>,
        #[yaserde(prefix = "typ", rename = "MailboxType")]
        pub mailbox_type: Option<mod_typ::MailboxTypeType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "OriginalDisplayName")]
        pub original_display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "ExternalObjectId")]
        pub external_object_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "PrimaryEmailAddress")]
        pub primary_email_address: Option<mod_typ::NonEmptyStringType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfEmailAddressesType")]
    pub struct ArrayOfEmailAddressesType {
        #[yaserde(prefix = "typ", rename = "Address")]
        pub address: Vec<mod_typ::EmailAddressType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DirectoryEntryType")]
    pub struct DirectoryEntryType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: Option<mod_typ::EmailAddressType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RoomType")]
    pub struct RoomType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: Option<mod_typ::EmailAddressType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfRoomsType")]
    pub struct ArrayOfRoomsType {
        #[yaserde(prefix = "typ", rename = "Room")]
        pub room: Vec<mod_typ::RoomType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TimeSlot")]
    pub struct TimeSlot {
        #[yaserde(prefix = "typ", rename = "StartTime")]
        pub start_time: String,
        #[yaserde(prefix = "typ", rename = "DurationInMinutes")]
        pub duration_in_minutes: f64,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingLocation")]
    pub struct MeetingLocation {
        #[yaserde(prefix = "typ", rename = "EmailAddress")]
        pub email_address: String,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ActivityDomainType")]
    pub struct ActivityDomainType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ReminderGroupType")]
    pub struct ReminderGroupType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ReminderType")]
    pub struct ReminderType {
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: String,
        #[yaserde(prefix = "typ", rename = "Location")]
        pub location: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderTime")]
        pub reminder_time: String,
        #[yaserde(prefix = "typ", rename = "StartDate")]
        pub start_date: String,
        #[yaserde(prefix = "typ", rename = "EndDate")]
        pub end_date: String,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "RecurringMasterItemId")]
        pub recurring_master_item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ReminderGroup")]
        pub reminder_group: Option<mod_typ::ReminderGroupType>,
        #[yaserde(prefix = "typ", rename = "UID")]
        pub uid: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfRemindersType")]
    pub struct ArrayOfRemindersType {
        #[yaserde(prefix = "typ", rename = "Reminder")]
        pub reminder: Vec<mod_typ::ReminderType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfRecipientsType")]
    pub struct ArrayOfRecipientsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SingleRecipientType")]
    pub struct SingleRecipientType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UnindexedFieldURIType")]
    pub struct UnindexedFieldURIType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DictionaryURIType")]
    pub struct DictionaryURIType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExceptionPropertyURIType")]
    pub struct ExceptionPropertyURIType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    /// The regular expression captures the standard representation of a GUID
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "GuidType")]
    pub struct GuidType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    /// Defines the well known property set ids for extended properties.
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DistinguishedPropertySetType")]
    pub struct DistinguishedPropertySetType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    /// Includes all of the extended property types that we support.  Note that Error, Null,
    ///         Object and Object array can not be used in restrictions, or for setting/getting values.
    ///         They are only there for error reporting purposes.
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MapiPropertyTypeType")]
    pub struct MapiPropertyTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BasePathToElementType")]
    pub struct BasePathToElementType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PathToUnindexedFieldType")]
    pub struct PathToUnindexedFieldType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PathToIndexedFieldType")]
    pub struct PathToIndexedFieldType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PathToExceptionFieldType")]
    pub struct PathToExceptionFieldType {}
    /// This type represents the property tag (MINUS the type part).  There are two options
    ///         for representation:
    ///         1.  Hex ==> 0x3fa4
    ///         2.  Decimal ==> 0-65535
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PropertyTagType")]
    pub struct PropertyTagType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PathToExtendedFieldType")]
    pub struct PathToExtendedFieldType {}
    pub type Path = mod_typ::BasePathToElementType;
    pub type FieldURI = mod_typ::PathToUnindexedFieldType;
    pub type IndexedFieldURI = mod_typ::PathToIndexedFieldType;
    pub type ExtendedFieldURI = mod_typ::PathToExtendedFieldType;
    pub type ExceptionFieldURI = mod_typ::PathToExceptionFieldType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfPathsToElementType")]
    pub struct NonEmptyArrayOfPathsToElementType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfPropertyValuesType")]
    pub struct NonEmptyArrayOfPropertyValuesType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfExtendedPropertyType")]
    pub struct NonEmptyArrayOfExtendedPropertyType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExtendedPropertyType")]
    pub struct ExtendedPropertyType {
        #[yaserde(prefix = "typ", rename = "ExtendedFieldURI")]
        pub extended_field_uri: mod_typ::PathToExtendedFieldType,
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: String,
        #[yaserde(prefix = "typ", rename = "Values")]
        pub values: mod_typ::NonEmptyArrayOfPropertyValuesType,
    }
    /// Types of sub-tree traversal for deletion and enumeration
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FolderQueryTraversalType")]
    pub struct FolderQueryTraversalType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    /// Types of sub-tree traversal for deletion and enumeration
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchFolderTraversalType")]
    pub struct SearchFolderTraversalType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    /// Types of sub-tree traversal for deletion and enumeration
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ItemQueryTraversalType")]
    pub struct ItemQueryTraversalType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    /// Types of sub-tree traversal for conversations
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConversationQueryTraversalType")]
    pub struct ConversationQueryTraversalType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DefaultShapeNamesType")]
    pub struct DefaultShapeNamesType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BodyTypeResponseType")]
    pub struct BodyTypeResponseType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FolderResponseShapeType")]
    pub struct FolderResponseShapeType {
        #[yaserde(prefix = "typ", rename = "BaseShape")]
        pub base_shape: mod_typ::DefaultShapeNamesType,
        #[yaserde(prefix = "typ", rename = "AdditionalProperties")]
        pub additional_properties: Option<mod_typ::NonEmptyArrayOfPathsToElementType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ItemResponseShapeType")]
    pub struct ItemResponseShapeType {
        #[yaserde(prefix = "typ", rename = "BaseShape")]
        pub base_shape: mod_typ::DefaultShapeNamesType,
        #[yaserde(prefix = "typ", rename = "IncludeMimeContent")]
        pub include_mime_content: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BodyType")]
        pub body_type: Option<mod_typ::BodyTypeResponseType>,
        #[yaserde(prefix = "typ", rename = "UniqueBodyType")]
        pub unique_body_type: Option<mod_typ::BodyTypeResponseType>,
        #[yaserde(prefix = "typ", rename = "NormalizedBodyType")]
        pub normalized_body_type: Option<mod_typ::BodyTypeResponseType>,
        #[yaserde(prefix = "typ", rename = "FilterHtmlContent")]
        pub filter_html_content: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConvertHtmlCodePageToUTF8")]
        pub convert_html_code_page_to_utf8: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InlineImageUrlTemplate")]
        pub inline_image_url_template: Option<String>,
        #[yaserde(prefix = "typ", rename = "BlockExternalImages")]
        pub block_external_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "AddBlankTargetToLinks")]
        pub add_blank_target_to_links: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MaximumBodySize")]
        pub maximum_body_size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "AdditionalProperties")]
        pub additional_properties: Option<mod_typ::NonEmptyArrayOfPathsToElementType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AttachmentResponseShapeType")]
    pub struct AttachmentResponseShapeType {
        #[yaserde(prefix = "typ", rename = "IncludeMimeContent")]
        pub include_mime_content: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BodyType")]
        pub body_type: Option<mod_typ::BodyTypeResponseType>,
        #[yaserde(prefix = "typ", rename = "FilterHtmlContent")]
        pub filter_html_content: Option<bool>,
        #[yaserde(prefix = "typ", rename = "AdditionalProperties")]
        pub additional_properties: Option<mod_typ::NonEmptyArrayOfPathsToElementType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConversationResponseShapeType")]
    pub struct ConversationResponseShapeType {
        #[yaserde(prefix = "typ", rename = "BaseShape")]
        pub base_shape: mod_typ::DefaultShapeNamesType,
        #[yaserde(prefix = "typ", rename = "AdditionalProperties")]
        pub additional_properties: Option<mod_typ::NonEmptyArrayOfPathsToElementType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PersonaResponseShapeType")]
    pub struct PersonaResponseShapeType {
        #[yaserde(prefix = "typ", rename = "BaseShape")]
        pub base_shape: mod_typ::DefaultShapeNamesType,
        #[yaserde(prefix = "typ", rename = "AdditionalProperties")]
        pub additional_properties: Option<mod_typ::NonEmptyArrayOfPathsToElementType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DisposalType")]
    pub struct DisposalType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    /// Type of conflict resolution to attempt during update
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConflictResolutionType")]
    pub struct ConflictResolutionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ClientAccessTokenTypeType")]
    pub struct ClientAccessTokenTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfClientAccessTokenRequestsType")]
    pub struct NonEmptyArrayOfClientAccessTokenRequestsType {
        #[yaserde(prefix = "typ", rename = "TokenRequest")]
        pub token_request: Vec<mod_typ::ClientAccessTokenRequestType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ClientAccessTokenRequestType")]
    pub struct ClientAccessTokenRequestType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: String,
        #[yaserde(prefix = "typ", rename = "TokenType")]
        pub token_type: mod_typ::ClientAccessTokenTypeType,
        #[yaserde(prefix = "typ", rename = "Scope")]
        pub scope: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResourceUri")]
        pub resource_uri: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ClientAccessTokenType")]
    pub struct ClientAccessTokenType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: String,
        #[yaserde(prefix = "typ", rename = "TokenType")]
        pub token_type: mod_typ::ClientAccessTokenTypeType,
        #[yaserde(prefix = "typ", rename = "TokenValue")]
        pub token_value: String,
        #[yaserde(prefix = "typ", rename = "TTL")]
        pub ttl: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ResponseClassType")]
    pub struct ResponseClassType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ChangeDescriptionType")]
    pub struct ChangeDescriptionType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ItemChangeDescriptionType")]
    pub struct ItemChangeDescriptionType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FolderChangeDescriptionType")]
    pub struct FolderChangeDescriptionType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SetItemFieldType")]
    pub struct SetItemFieldType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SetFolderFieldType")]
    pub struct SetFolderFieldType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DeleteItemFieldType")]
    pub struct DeleteItemFieldType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DeleteFolderFieldType")]
    pub struct DeleteFolderFieldType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AppendToItemFieldType")]
    pub struct AppendToItemFieldType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AppendToFolderFieldType")]
    pub struct AppendToFolderFieldType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
        #[yaserde(prefix = "typ", rename = "Folder")]
        pub folder: mod_typ::FolderType,
        #[yaserde(prefix = "typ", rename = "CalendarFolder")]
        pub calendar_folder: mod_typ::CalendarFolderType,
        #[yaserde(prefix = "typ", rename = "ContactsFolder")]
        pub contacts_folder: mod_typ::ContactsFolderType,
        #[yaserde(prefix = "typ", rename = "SearchFolder")]
        pub search_folder: mod_typ::SearchFolderType,
        #[yaserde(prefix = "typ", rename = "TasksFolder")]
        pub tasks_folder: mod_typ::TasksFolderType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfItemChangeDescriptionsType")]
    pub struct NonEmptyArrayOfItemChangeDescriptionsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfFolderChangeDescriptionsType")]
    pub struct NonEmptyArrayOfFolderChangeDescriptionsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ItemChangeType")]
    pub struct ItemChangeType {
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "OccurrenceItemId")]
        pub occurrence_item_id: mod_typ::OccurrenceItemIdType,
        #[yaserde(prefix = "typ", rename = "RecurringMasterItemId")]
        pub recurring_master_item_id: mod_typ::RecurringMasterItemIdType,
        #[yaserde(prefix = "typ", rename = "Updates")]
        pub updates: mod_typ::NonEmptyArrayOfItemChangeDescriptionsType,
        #[yaserde(prefix = "typ", rename = "CalendarActivityData")]
        pub calendar_activity_data: Option<mod_typ::CalendarActivityDataType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfItemChangesType")]
    pub struct NonEmptyArrayOfItemChangesType {
        #[yaserde(prefix = "typ", rename = "ItemChange")]
        pub item_change: Vec<mod_typ::ItemChangeType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InternetHeaderType")]
    pub struct InternetHeaderType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfInternetHeadersType")]
    pub struct NonEmptyArrayOfInternetHeadersType {
        #[yaserde(prefix = "typ", rename = "InternetMessageHeader")]
        pub internet_message_header: Vec<mod_typ::InternetHeaderType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfPredictedActionReasonType")]
    pub struct NonEmptyArrayOfPredictedActionReasonType {
        #[yaserde(prefix = "typ", rename = "PredictedActionReason")]
        pub predicted_action_reason: Vec<mod_typ::PredictedActionReasonType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RequestAttachmentIdType")]
    pub struct RequestAttachmentIdType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AttachmentIdType")]
    pub struct AttachmentIdType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RootItemIdType")]
    pub struct RootItemIdType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfRequestAttachmentIdsType")]
    pub struct NonEmptyArrayOfRequestAttachmentIdsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AttachmentType")]
    pub struct AttachmentType {
        #[yaserde(prefix = "typ", rename = "AttachmentId")]
        pub attachment_id: Option<mod_typ::AttachmentIdType>,
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContentType")]
        pub content_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContentId")]
        pub content_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContentLocation")]
        pub content_location: Option<String>,
        #[yaserde(prefix = "typ", rename = "AttachmentOriginalUrl")]
        pub attachment_original_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsInline")]
        pub is_inline: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ItemAttachmentType")]
    pub struct ItemAttachmentType {
        #[yaserde(prefix = "typ", rename = "AttachmentId")]
        pub attachment_id: Option<mod_typ::AttachmentIdType>,
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContentType")]
        pub content_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContentId")]
        pub content_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContentLocation")]
        pub content_location: Option<String>,
        #[yaserde(prefix = "typ", rename = "AttachmentOriginalUrl")]
        pub attachment_original_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsInline")]
        pub is_inline: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SyncFolderItemsCreateOrUpdateType")]
    pub struct SyncFolderItemsCreateOrUpdateType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FileAttachmentType")]
    pub struct FileAttachmentType {
        #[yaserde(prefix = "typ", rename = "AttachmentId")]
        pub attachment_id: Option<mod_typ::AttachmentIdType>,
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContentType")]
        pub content_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContentId")]
        pub content_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContentLocation")]
        pub content_location: Option<String>,
        #[yaserde(prefix = "typ", rename = "AttachmentOriginalUrl")]
        pub attachment_original_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsInline")]
        pub is_inline: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsContactPhoto")]
        pub is_contact_photo: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Content")]
        pub content: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ReferenceAttachmentType")]
    pub struct ReferenceAttachmentType {
        #[yaserde(prefix = "typ", rename = "AttachmentId")]
        pub attachment_id: Option<mod_typ::AttachmentIdType>,
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContentType")]
        pub content_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContentId")]
        pub content_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContentLocation")]
        pub content_location: Option<String>,
        #[yaserde(prefix = "typ", rename = "AttachmentOriginalUrl")]
        pub attachment_original_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsInline")]
        pub is_inline: Option<bool>,
        #[yaserde(prefix = "typ", rename = "AttachLongPathName")]
        pub attach_long_path_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProviderType")]
        pub provider_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProviderEndpointUrl")]
        pub provider_endpoint_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "AttachmentThumbnailUrl")]
        pub attachment_thumbnail_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "AttachmentPreviewUrl")]
        pub attachment_preview_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "PermissionType")]
        pub permission_type: Option<i32>,
        #[yaserde(prefix = "typ", rename = "OriginalPermissionType")]
        pub original_permission_type: Option<i32>,
        #[yaserde(prefix = "typ", rename = "AttachmentIsFolder")]
        pub attachment_is_folder: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfAttachmentsType")]
    pub struct ArrayOfAttachmentsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfAttachmentsType")]
    pub struct NonEmptyArrayOfAttachmentsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SensitivityChoicesType")]
    pub struct SensitivityChoicesType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ImportanceChoicesType")]
    pub struct ImportanceChoicesType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BodyTypeType")]
    pub struct BodyTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BodyType")]
    pub struct BodyType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UniqueBodyType")]
    pub struct UniqueBodyType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NormalizedBodyType")]
    pub struct NormalizedBodyType {}
    /// Utility type which should never appear in user documents
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BaseFolderIdType")]
    pub struct BaseFolderIdType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FolderClassType")]
    pub struct FolderClassType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    /// URIs for the distinguished folders accessible from a mailbox
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DistinguishedFolderIdNameType")]
    pub struct DistinguishedFolderIdNameType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DistinguishedFolderIdType")]
    pub struct DistinguishedFolderIdType {
        #[yaserde(prefix = "typ", rename = "Mailbox")]
        pub mailbox: Option<mod_typ::EmailAddressType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FolderIdType")]
    pub struct FolderIdType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AddressListIdType")]
    pub struct AddressListIdType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfDistinguishedFolderIdType")]
    pub struct ArrayOfDistinguishedFolderIdType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfBaseFolderIdsType")]
    pub struct NonEmptyArrayOfBaseFolderIdsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TargetFolderIdType")]
    pub struct TargetFolderIdType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfUploadItemsType")]
    pub struct NonEmptyArrayOfUploadItemsType {
        #[yaserde(prefix = "typ", rename = "Item")]
        pub item: Vec<mod_typ::UploadItemType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UploadItemType")]
    pub struct UploadItemType {
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: mod_typ::FolderIdType,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "Data")]
        pub data: String,
        #[yaserde(prefix = "typ", rename = "CreateAction", attribute = true)]
        pub create_action: mod_typ::CreateActionType,
        #[yaserde(prefix = "typ", rename = "IsAssociated", attribute = true)]
        pub is_associated: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CreateActionType")]
    pub struct CreateActionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CompleteActionType")]
    pub struct CompleteActionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    /// Types of view filters for finding items/conversations
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ViewFilterType")]
    pub struct ViewFilterType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FindFolderParentType")]
    pub struct FindFolderParentType {
        #[yaserde(prefix = "typ", rename = "Folders")]
        pub folders: Option<mod_typ::ArrayOfFoldersType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BaseFolderType")]
    pub struct BaseFolderType {
        #[yaserde(prefix = "typ", rename = "FolderId")]
        pub folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "FolderClass")]
        pub folder_class: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "TotalCount")]
        pub total_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ChildFolderCount")]
        pub child_folder_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "ManagedFolderInformation")]
        pub managed_folder_information: Option<mod_typ::ManagedFolderInformationType>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "DistinguishedFolderId")]
        pub distinguished_folder_id: Option<mod_typ::DistinguishedFolderIdNameType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ReplicaList")]
        pub replica_list: Option<mod_typ::ArrayOfStringsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ManagedFolderInformationType")]
    pub struct ManagedFolderInformationType {
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanRenameOrMove")]
        pub can_rename_or_move: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MustDisplayComment")]
        pub must_display_comment: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasQuota")]
        pub has_quota: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsManagedFoldersRoot")]
        pub is_managed_folders_root: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ManagedFolderId")]
        pub managed_folder_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "Comment")]
        pub comment: Option<String>,
        #[yaserde(prefix = "typ", rename = "StorageQuota")]
        pub storage_quota: Option<i32>,
        #[yaserde(prefix = "typ", rename = "FolderSize")]
        pub folder_size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "HomePage")]
        pub home_page: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FolderType")]
    pub struct FolderType {
        #[yaserde(prefix = "typ", rename = "FolderId")]
        pub folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "FolderClass")]
        pub folder_class: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "TotalCount")]
        pub total_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ChildFolderCount")]
        pub child_folder_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "ManagedFolderInformation")]
        pub managed_folder_information: Option<mod_typ::ManagedFolderInformationType>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "DistinguishedFolderId")]
        pub distinguished_folder_id: Option<mod_typ::DistinguishedFolderIdNameType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ReplicaList")]
        pub replica_list: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "PermissionSet")]
        pub permission_set: Option<mod_typ::PermissionSetType>,
        #[yaserde(prefix = "typ", rename = "UnreadCount")]
        pub unread_count: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CalendarFolderType")]
    pub struct CalendarFolderType {
        #[yaserde(prefix = "typ", rename = "FolderId")]
        pub folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "FolderClass")]
        pub folder_class: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "TotalCount")]
        pub total_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ChildFolderCount")]
        pub child_folder_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "ManagedFolderInformation")]
        pub managed_folder_information: Option<mod_typ::ManagedFolderInformationType>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "DistinguishedFolderId")]
        pub distinguished_folder_id: Option<mod_typ::DistinguishedFolderIdNameType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ReplicaList")]
        pub replica_list: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "SharingEffectiveRights")]
        pub sharing_effective_rights: Option<mod_typ::CalendarPermissionReadAccessType>,
        #[yaserde(prefix = "typ", rename = "PermissionSet")]
        pub permission_set: Option<mod_typ::CalendarPermissionSetType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ReminderActionType")]
    pub struct ReminderActionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ReminderItemActionType")]
    pub struct ReminderItemActionType {
        #[yaserde(prefix = "typ", rename = "ActionType")]
        pub action_type: mod_typ::ReminderActionType,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "NewReminderTime")]
        pub new_reminder_time: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfReminderItemActionType")]
    pub struct NonEmptyArrayOfReminderItemActionType {
        #[yaserde(prefix = "typ", rename = "ReminderItemAction")]
        pub reminder_item_action: Vec<mod_typ::ReminderItemActionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContactsFolderType")]
    pub struct ContactsFolderType {
        #[yaserde(prefix = "typ", rename = "FolderId")]
        pub folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "FolderClass")]
        pub folder_class: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "TotalCount")]
        pub total_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ChildFolderCount")]
        pub child_folder_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "ManagedFolderInformation")]
        pub managed_folder_information: Option<mod_typ::ManagedFolderInformationType>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "DistinguishedFolderId")]
        pub distinguished_folder_id: Option<mod_typ::DistinguishedFolderIdNameType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ReplicaList")]
        pub replica_list: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "SharingEffectiveRights")]
        pub sharing_effective_rights: Option<mod_typ::PermissionReadAccessType>,
        #[yaserde(prefix = "typ", rename = "PermissionSet")]
        pub permission_set: Option<mod_typ::PermissionSetType>,
        #[yaserde(prefix = "typ", rename = "SourceId")]
        pub source_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "AccountName")]
        pub account_name: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchFolderType")]
    pub struct SearchFolderType {
        #[yaserde(prefix = "typ", rename = "FolderId")]
        pub folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "FolderClass")]
        pub folder_class: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "TotalCount")]
        pub total_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ChildFolderCount")]
        pub child_folder_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "ManagedFolderInformation")]
        pub managed_folder_information: Option<mod_typ::ManagedFolderInformationType>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "DistinguishedFolderId")]
        pub distinguished_folder_id: Option<mod_typ::DistinguishedFolderIdNameType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ReplicaList")]
        pub replica_list: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "PermissionSet")]
        pub permission_set: Option<mod_typ::PermissionSetType>,
        #[yaserde(prefix = "typ", rename = "UnreadCount")]
        pub unread_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "SearchParameters")]
        pub search_parameters: Option<mod_typ::SearchParametersType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TasksFolderType")]
    pub struct TasksFolderType {
        #[yaserde(prefix = "typ", rename = "FolderId")]
        pub folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "FolderClass")]
        pub folder_class: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "TotalCount")]
        pub total_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ChildFolderCount")]
        pub child_folder_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "ManagedFolderInformation")]
        pub managed_folder_information: Option<mod_typ::ManagedFolderInformationType>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "DistinguishedFolderId")]
        pub distinguished_folder_id: Option<mod_typ::DistinguishedFolderIdNameType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ReplicaList")]
        pub replica_list: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "PermissionSet")]
        pub permission_set: Option<mod_typ::PermissionSetType>,
        #[yaserde(prefix = "typ", rename = "UnreadCount")]
        pub unread_count: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfFoldersType")]
    pub struct NonEmptyArrayOfFoldersType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfFoldersType")]
    pub struct ArrayOfFoldersType {}
    /// Abstract base type for item identifiers.  Should never be used in web service calls
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BaseItemIdType")]
    pub struct BaseItemIdType {}
    pub type BaseItemId = mod_typ::BaseItemIdType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DerivedItemIdType")]
    pub struct DerivedItemIdType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ItemIdType")]
    pub struct ItemIdType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfBaseItemIdsType")]
    pub struct NonEmptyArrayOfBaseItemIdsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfBaseItemIdsType")]
    pub struct ArrayOfBaseItemIdsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfItemIdsType")]
    pub struct NonEmptyArrayOfItemIdsType {
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Vec<mod_typ::ItemIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfItemIdsType")]
    pub struct ArrayOfItemIdsType {
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Vec<mod_typ::ItemIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ItemClassType")]
    pub struct ItemClassType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ResponseObjectCoreType")]
    pub struct ResponseObjectCoreType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "Sender")]
        pub sender: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ToRecipients")]
        pub to_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "CcRecipients")]
        pub cc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "BccRecipients")]
        pub bcc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "IsReadReceiptRequested")]
        pub is_read_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDeliveryReceiptRequested")]
        pub is_delivery_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConversationIndex")]
        pub conversation_index: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationTopic")]
        pub conversation_topic: Option<String>,
        #[yaserde(prefix = "typ", rename = "From")]
        pub from: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "InternetMessageId")]
        pub internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResponseRequested")]
        pub is_response_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "References")]
        pub references: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReplyTo")]
        pub reply_to: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "ReceivedBy")]
        pub received_by: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ReceivedRepresenting")]
        pub received_representing: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ApprovalRequestData")]
        pub approval_request_data: Option<mod_typ::ApprovalRequestDataType>,
        #[yaserde(prefix = "typ", rename = "VotingInformation")]
        pub voting_information: Option<mod_typ::VotingInformationType>,
        #[yaserde(prefix = "typ", rename = "ReminderMessageData")]
        pub reminder_message_data: Option<mod_typ::ReminderMessageDataType>,
        #[yaserde(prefix = "typ", rename = "MessageSafety")]
        pub message_safety: Option<mod_typ::MessageSafetyType>,
        #[yaserde(prefix = "typ", rename = "SenderSMTPAddress")]
        pub sender_smtp_address: Option<mod_typ::SmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "MailboxGuids")]
        pub mailbox_guids: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemIcs")]
        pub published_calendar_item_ics: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemName")]
        pub published_calendar_item_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReferenceItemId")]
        pub reference_item_id: Option<mod_typ::ItemIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ResponseObjectType")]
    pub struct ResponseObjectType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "Sender")]
        pub sender: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ToRecipients")]
        pub to_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "CcRecipients")]
        pub cc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "BccRecipients")]
        pub bcc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "IsReadReceiptRequested")]
        pub is_read_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDeliveryReceiptRequested")]
        pub is_delivery_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConversationIndex")]
        pub conversation_index: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationTopic")]
        pub conversation_topic: Option<String>,
        #[yaserde(prefix = "typ", rename = "From")]
        pub from: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "InternetMessageId")]
        pub internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResponseRequested")]
        pub is_response_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "References")]
        pub references: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReplyTo")]
        pub reply_to: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "ReceivedBy")]
        pub received_by: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ReceivedRepresenting")]
        pub received_representing: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ApprovalRequestData")]
        pub approval_request_data: Option<mod_typ::ApprovalRequestDataType>,
        #[yaserde(prefix = "typ", rename = "VotingInformation")]
        pub voting_information: Option<mod_typ::VotingInformationType>,
        #[yaserde(prefix = "typ", rename = "ReminderMessageData")]
        pub reminder_message_data: Option<mod_typ::ReminderMessageDataType>,
        #[yaserde(prefix = "typ", rename = "MessageSafety")]
        pub message_safety: Option<mod_typ::MessageSafetyType>,
        #[yaserde(prefix = "typ", rename = "SenderSMTPAddress")]
        pub sender_smtp_address: Option<mod_typ::SmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "MailboxGuids")]
        pub mailbox_guids: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemIcs")]
        pub published_calendar_item_ics: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemName")]
        pub published_calendar_item_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReferenceItemId")]
        pub reference_item_id: Option<mod_typ::ItemIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfResponseObjectsType")]
    pub struct NonEmptyArrayOfResponseObjectsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FolderChangeType")]
    pub struct FolderChangeType {
        #[yaserde(prefix = "typ", rename = "FolderId")]
        pub folder_id: mod_typ::FolderIdType,
        #[yaserde(prefix = "typ", rename = "DistinguishedFolderId")]
        pub distinguished_folder_id: mod_typ::DistinguishedFolderIdType,
        #[yaserde(prefix = "typ", rename = "Updates")]
        pub updates: mod_typ::NonEmptyArrayOfFolderChangeDescriptionsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfFolderChangesType")]
    pub struct NonEmptyArrayOfFolderChangesType {
        #[yaserde(prefix = "typ", rename = "FolderChange")]
        pub folder_change: Vec<mod_typ::FolderChangeType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "WellKnownResponseObjectType")]
    pub struct WellKnownResponseObjectType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SmartResponseBaseType")]
    pub struct SmartResponseBaseType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SmartResponseType")]
    pub struct SmartResponseType {
        #[yaserde(prefix = "typ", rename = "NewBodyContent")]
        pub new_body_content: Option<mod_typ::BodyType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ReplyToItemType")]
    pub struct ReplyToItemType {
        #[yaserde(prefix = "typ", rename = "NewBodyContent")]
        pub new_body_content: Option<mod_typ::BodyType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ReplyAllToItemType")]
    pub struct ReplyAllToItemType {
        #[yaserde(prefix = "typ", rename = "NewBodyContent")]
        pub new_body_content: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IsSpecificMessageReply")]
        pub is_specific_message_reply: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ForwardItemType")]
    pub struct ForwardItemType {
        #[yaserde(prefix = "typ", rename = "NewBodyContent")]
        pub new_body_content: Option<mod_typ::BodyType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CancelCalendarItemType")]
    pub struct CancelCalendarItemType {
        #[yaserde(prefix = "typ", rename = "NewBodyContent")]
        pub new_body_content: Option<mod_typ::BodyType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ReferenceItemResponseType")]
    pub struct ReferenceItemResponseType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SuppressReadReceiptType")]
    pub struct SuppressReadReceiptType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FindItemParentType")]
    pub struct FindItemParentType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ItemType")]
    pub struct ItemType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfItemClassType")]
    pub struct ArrayOfItemClassType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FlagType")]
    pub struct FlagType {
        #[yaserde(prefix = "typ", rename = "FlagStatus")]
        pub flag_status: mod_typ::FlagStatusType,
        #[yaserde(prefix = "typ", rename = "StartDate")]
        pub start_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "DueDate")]
        pub due_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "CompleteDate")]
        pub complete_date: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FlagStatusType")]
    pub struct FlagStatusType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PredictedActionReasonType")]
    pub struct PredictedActionReasonType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EntityType")]
    pub struct EntityType {
        #[yaserde(prefix = "typ", rename = "Position")]
        pub position: Vec<mod_typ::EmailPositionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfAddressesType")]
    pub struct ArrayOfAddressesType {
        #[yaserde(prefix = "typ", rename = "Address")]
        pub address: Vec<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfAddressEntitiesType")]
    pub struct ArrayOfAddressEntitiesType {
        #[yaserde(prefix = "typ", rename = "AddressEntity")]
        pub address_entity: Vec<mod_typ::AddressEntityType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AddressEntityType")]
    pub struct AddressEntityType {
        #[yaserde(prefix = "typ", rename = "Position")]
        pub position: Vec<mod_typ::EmailPositionType>,
        #[yaserde(prefix = "typ", rename = "Address")]
        pub address: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfEmailAddressEntitiesType")]
    pub struct ArrayOfEmailAddressEntitiesType {
        #[yaserde(prefix = "typ", rename = "EmailAddressEntity")]
        pub email_address_entity: Vec<mod_typ::EmailAddressEntityType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmailAddressEntityType")]
    pub struct EmailAddressEntityType {
        #[yaserde(prefix = "typ", rename = "Position")]
        pub position: Vec<mod_typ::EmailPositionType>,
        #[yaserde(prefix = "typ", rename = "EmailAddress")]
        pub email_address: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfUrlEntitiesType")]
    pub struct ArrayOfUrlEntitiesType {
        #[yaserde(prefix = "typ", rename = "UrlEntity")]
        pub url_entity: Vec<mod_typ::UrlEntityType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UrlEntityType")]
    pub struct UrlEntityType {
        #[yaserde(prefix = "typ", rename = "Position")]
        pub position: Vec<mod_typ::EmailPositionType>,
        #[yaserde(prefix = "typ", rename = "Url")]
        pub url: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfMeetingSuggestionsType")]
    pub struct ArrayOfMeetingSuggestionsType {
        #[yaserde(prefix = "typ", rename = "MeetingSuggestion")]
        pub meeting_suggestion: Vec<mod_typ::MeetingSuggestionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingSuggestionType")]
    pub struct MeetingSuggestionType {
        #[yaserde(prefix = "typ", rename = "Position")]
        pub position: Vec<mod_typ::EmailPositionType>,
        #[yaserde(prefix = "typ", rename = "Attendees")]
        pub attendees: Option<mod_typ::ArrayOfEmailUsersType>,
        #[yaserde(prefix = "typ", rename = "Location")]
        pub location: Option<String>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "MeetingString")]
        pub meeting_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "StartTime")]
        pub start_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "EndTime")]
        pub end_time: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfTaskSuggestionsType")]
    pub struct ArrayOfTaskSuggestionsType {
        #[yaserde(prefix = "typ", rename = "TaskSuggestion")]
        pub task_suggestion: Vec<mod_typ::TaskSuggestionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfContactsType")]
    pub struct ArrayOfContactsType {
        #[yaserde(prefix = "typ", rename = "Contact")]
        pub contact: Vec<mod_typ::ContactType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContactType")]
    pub struct ContactType {
        #[yaserde(prefix = "typ", rename = "Position")]
        pub position: Vec<mod_typ::EmailPositionType>,
        #[yaserde(prefix = "typ", rename = "PersonName")]
        pub person_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "BusinessName")]
        pub business_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "PhoneNumbers")]
        pub phone_numbers: Option<mod_typ::ArrayOfPhonesType>,
        #[yaserde(prefix = "typ", rename = "Urls")]
        pub urls: Option<mod_typ::ArrayOfUrlsType>,
        #[yaserde(prefix = "typ", rename = "EmailAddresses")]
        pub email_addresses: Option<mod_typ::ArrayOfExtractedEmailAddresses>,
        #[yaserde(prefix = "typ", rename = "Addresses")]
        pub addresses: Option<mod_typ::ArrayOfAddressesType>,
        #[yaserde(prefix = "typ", rename = "ContactString")]
        pub contact_string: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfUrlsType")]
    pub struct ArrayOfUrlsType {
        #[yaserde(prefix = "typ", rename = "Url")]
        pub url: Vec<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfPhonesType")]
    pub struct ArrayOfPhonesType {
        #[yaserde(prefix = "typ", rename = "Phone")]
        pub phone: Vec<mod_typ::PhoneType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PhoneType")]
    pub struct PhoneType {
        #[yaserde(prefix = "typ", rename = "OriginalPhoneString")]
        pub original_phone_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "PhoneString")]
        pub phone_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "Type")]
        pub r#type: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfPhoneEntitiesType")]
    pub struct ArrayOfPhoneEntitiesType {
        #[yaserde(prefix = "typ", rename = "Phone")]
        pub phone: Vec<mod_typ::PhoneEntityType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PhoneEntityType")]
    pub struct PhoneEntityType {
        #[yaserde(prefix = "typ", rename = "Position")]
        pub position: Vec<mod_typ::EmailPositionType>,
        #[yaserde(prefix = "typ", rename = "OriginalPhoneString")]
        pub original_phone_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "PhoneString")]
        pub phone_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "Type")]
        pub r#type: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmailPositionType")]
    pub struct EmailPositionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfEmailUsersType")]
    pub struct ArrayOfEmailUsersType {
        #[yaserde(prefix = "typ", rename = "EmailUser")]
        pub email_user: Vec<mod_typ::EmailUserType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmailUserType")]
    pub struct EmailUserType {
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: Option<String>,
        #[yaserde(prefix = "typ", rename = "UserId")]
        pub user_id: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TaskSuggestionType")]
    pub struct TaskSuggestionType {
        #[yaserde(prefix = "typ", rename = "Position")]
        pub position: Vec<mod_typ::EmailPositionType>,
        #[yaserde(prefix = "typ", rename = "TaskString")]
        pub task_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "Assignees")]
        pub assignees: Option<mod_typ::ArrayOfEmailUsersType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfExtractedEmailAddresses")]
    pub struct ArrayOfExtractedEmailAddresses {
        #[yaserde(prefix = "typ", rename = "EmailAddress")]
        pub email_address: Vec<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ParcelDeliveryEntityType")]
    pub struct ParcelDeliveryEntityType {
        #[yaserde(prefix = "typ", rename = "Carrier")]
        pub carrier: Option<String>,
        #[yaserde(prefix = "typ", rename = "TrackingNumber")]
        pub tracking_number: Option<String>,
        #[yaserde(prefix = "typ", rename = "TrackingUrl")]
        pub tracking_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "ExpectedArrivalFrom")]
        pub expected_arrival_from: Option<String>,
        #[yaserde(prefix = "typ", rename = "ExpectedArrivalUntil")]
        pub expected_arrival_until: Option<String>,
        #[yaserde(prefix = "typ", rename = "Product")]
        pub product: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProductUrl")]
        pub product_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProductImage")]
        pub product_image: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProductSku")]
        pub product_sku: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProductDescription")]
        pub product_description: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProductBrand")]
        pub product_brand: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProductColor")]
        pub product_color: Option<String>,
        #[yaserde(prefix = "typ", rename = "OrderNumber")]
        pub order_number: Option<String>,
        #[yaserde(prefix = "typ", rename = "Seller")]
        pub seller: Option<String>,
        #[yaserde(prefix = "typ", rename = "OrderStatus")]
        pub order_status: Option<String>,
        #[yaserde(prefix = "typ", rename = "AddressName")]
        pub address_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "StreetAddress")]
        pub street_address: Option<String>,
        #[yaserde(prefix = "typ", rename = "AddressLocality")]
        pub address_locality: Option<String>,
        #[yaserde(prefix = "typ", rename = "AddressRegion")]
        pub address_region: Option<String>,
        #[yaserde(prefix = "typ", rename = "AddressCountry")]
        pub address_country: Option<String>,
        #[yaserde(prefix = "typ", rename = "PostalCode")]
        pub postal_code: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InferenceClassificationType")]
    pub struct InferenceClassificationType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InferenceClassificationOverrideType")]
    pub struct InferenceClassificationOverrideType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: mod_typ::GuidType,
        #[yaserde(prefix = "typ", rename = "SenderSmtpAddress")]
        pub sender_smtp_address: String,
        #[yaserde(prefix = "typ", rename = "SenderDisplayName")]
        pub sender_display_name: String,
        #[yaserde(prefix = "typ", rename = "AlwaysClassifyAs")]
        pub always_classify_as: mod_typ::InferenceClassificationType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfInferenceClassificationOverridesType")]
    pub struct ArrayOfInferenceClassificationOverridesType {
        #[yaserde(prefix = "typ", rename = "Override")]
        pub r#override: Vec<mod_typ::InferenceClassificationOverrideType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfParcelDeliveryEntitiesType")]
    pub struct ArrayOfParcelDeliveryEntitiesType {
        #[yaserde(prefix = "typ", rename = "ParcelDelivery")]
        pub parcel_delivery: Vec<mod_typ::ParcelDeliveryEntityType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FlightEntityType")]
    pub struct FlightEntityType {
        #[yaserde(prefix = "typ", rename = "FlightNumber")]
        pub flight_number: Option<String>,
        #[yaserde(prefix = "typ", rename = "AirlineIataCode")]
        pub airline_iata_code: Option<String>,
        #[yaserde(prefix = "typ", rename = "DepartureTime")]
        pub departure_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "WindowsTimeZoneName")]
        pub windows_time_zone_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "DepartureAirportIataCode")]
        pub departure_airport_iata_code: Option<String>,
        #[yaserde(prefix = "typ", rename = "ArrivalAirportIataCode")]
        pub arrival_airport_iata_code: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfFlightsType")]
    pub struct ArrayOfFlightsType {
        #[yaserde(prefix = "typ", rename = "Flight")]
        pub flight: Vec<mod_typ::FlightEntityType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FlightReservationEntityType")]
    pub struct FlightReservationEntityType {
        #[yaserde(prefix = "typ", rename = "ReservationId")]
        pub reservation_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReservationStatus")]
        pub reservation_status: Option<String>,
        #[yaserde(prefix = "typ", rename = "UnderName")]
        pub under_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "BrokerName")]
        pub broker_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "BrokerPhone")]
        pub broker_phone: Option<String>,
        #[yaserde(prefix = "typ", rename = "Flights")]
        pub flights: Option<mod_typ::ArrayOfFlightsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfFlightReservationsType")]
    pub struct ArrayOfFlightReservationsType {
        #[yaserde(prefix = "typ", rename = "FlightReservation")]
        pub flight_reservation: Vec<mod_typ::FlightReservationEntityType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SenderAddInEntityType")]
    pub struct SenderAddInEntityType {
        #[yaserde(prefix = "typ", rename = "ExtensionId")]
        pub extension_id: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfSenderAddInsType")]
    pub struct ArrayOfSenderAddInsType {
        #[yaserde(prefix = "typ", rename = "Microsoft.OutlookServices.SenderApp")]
        pub microsoft_outlook_services_sender_app: Vec<mod_typ::SenderAddInEntityType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EntityExtractionResultType")]
    pub struct EntityExtractionResultType {
        #[yaserde(prefix = "typ", rename = "Addresses")]
        pub addresses: Option<mod_typ::ArrayOfAddressEntitiesType>,
        #[yaserde(prefix = "typ", rename = "MeetingSuggestions")]
        pub meeting_suggestions: Option<mod_typ::ArrayOfMeetingSuggestionsType>,
        #[yaserde(prefix = "typ", rename = "TaskSuggestions")]
        pub task_suggestions: Option<mod_typ::ArrayOfTaskSuggestionsType>,
        #[yaserde(prefix = "typ", rename = "EmailAddresses")]
        pub email_addresses: Option<mod_typ::ArrayOfEmailAddressEntitiesType>,
        #[yaserde(prefix = "typ", rename = "Contacts")]
        pub contacts: Option<mod_typ::ArrayOfContactsType>,
        #[yaserde(prefix = "typ", rename = "Urls")]
        pub urls: Option<mod_typ::ArrayOfUrlEntitiesType>,
        #[yaserde(prefix = "typ", rename = "PhoneNumbers")]
        pub phone_numbers: Option<mod_typ::ArrayOfPhoneEntitiesType>,
        #[yaserde(prefix = "typ", rename = "ParcelDeliveries")]
        pub parcel_deliveries: Option<mod_typ::ArrayOfParcelDeliveryEntitiesType>,
        #[yaserde(prefix = "typ", rename = "FlightReservations")]
        pub flight_reservations: Option<mod_typ::ArrayOfFlightReservationsType>,
        #[yaserde(prefix = "typ", rename = "SenderAddIns")]
        pub sender_add_ins: Option<mod_typ::ArrayOfSenderAddInsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RightsManagementLicenseDataType")]
    pub struct RightsManagementLicenseDataType {
        #[yaserde(prefix = "typ", rename = "RightsManagedMessageDecryptionStatus")]
        pub rights_managed_message_decryption_status: Option<i32>,
        #[yaserde(prefix = "typ", rename = "RmsTemplateId")]
        pub rms_template_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "TemplateName")]
        pub template_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "TemplateDescription")]
        pub template_description: Option<String>,
        #[yaserde(prefix = "typ", rename = "EditAllowed")]
        pub edit_allowed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReplyAllowed")]
        pub reply_allowed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReplyAllAllowed")]
        pub reply_all_allowed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ForwardAllowed")]
        pub forward_allowed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ModifyRecipientsAllowed")]
        pub modify_recipients_allowed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtractAllowed")]
        pub extract_allowed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "PrintAllowed")]
        pub print_allowed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExportAllowed")]
        pub export_allowed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ProgrammaticAccessAllowed")]
        pub programmatic_access_allowed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsOwner")]
        pub is_owner: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ContentOwner")]
        pub content_owner: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContentExpiryDate")]
        pub content_expiry_date: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConversationActionTypeType")]
    pub struct ConversationActionTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConversationActionType")]
    pub struct ConversationActionType {
        #[yaserde(prefix = "typ", rename = "Action")]
        pub action: mod_typ::ConversationActionTypeType,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "ContextFolderId")]
        pub context_folder_id: Option<mod_typ::TargetFolderIdType>,
        #[yaserde(prefix = "typ", rename = "ConversationLastSyncTime")]
        pub conversation_last_sync_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProcessRightAway")]
        pub process_right_away: Option<bool>,
        #[yaserde(prefix = "typ", rename = "DestinationFolderId")]
        pub destination_folder_id: Option<mod_typ::TargetFolderIdType>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "EnableAlwaysDelete")]
        pub enable_always_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "DeleteType")]
        pub delete_type: Option<mod_typ::DisposalType>,
        #[yaserde(prefix = "typ", rename = "RetentionPolicyType")]
        pub retention_policy_type: Option<mod_typ::RetentionType>,
        #[yaserde(prefix = "typ", rename = "RetentionPolicyTagId")]
        pub retention_policy_tag_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "SuppressReadReceipts")]
        pub suppress_read_receipts: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfApplyConversationActionType")]
    pub struct NonEmptyArrayOfApplyConversationActionType {
        #[yaserde(prefix = "typ", rename = "ConversationAction")]
        pub conversation_action: Vec<mod_typ::ConversationActionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConversationType")]
    pub struct ConversationType {
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ConversationTopic")]
        pub conversation_topic: Option<String>,
        #[yaserde(prefix = "typ", rename = "UniqueRecipients")]
        pub unique_recipients: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "GlobalUniqueRecipients")]
        pub global_unique_recipients: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "UniqueUnreadSenders")]
        pub unique_unread_senders: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "GlobalUniqueUnreadSenders")]
        pub global_unique_unread_senders: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "UniqueSenders")]
        pub unique_senders: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "GlobalUniqueSenders")]
        pub global_unique_senders: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "LastDeliveryTime")]
        pub last_delivery_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "GlobalLastDeliveryTime")]
        pub global_last_delivery_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "GlobalCategories")]
        pub global_categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "FlagStatus")]
        pub flag_status: Option<mod_typ::FlagStatusType>,
        #[yaserde(prefix = "typ", rename = "GlobalFlagStatus")]
        pub global_flag_status: Option<mod_typ::FlagStatusType>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "GlobalHasAttachments")]
        pub global_has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MessageCount")]
        pub message_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "GlobalMessageCount")]
        pub global_message_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "UnreadCount")]
        pub unread_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "GlobalUnreadCount")]
        pub global_unread_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "GlobalSize")]
        pub global_size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ItemClasses")]
        pub item_classes: Option<mod_typ::ArrayOfItemClassType>,
        #[yaserde(prefix = "typ", rename = "GlobalItemClasses")]
        pub global_item_classes: Option<mod_typ::ArrayOfItemClassType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "GlobalImportance")]
        pub global_importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "ItemIds")]
        pub item_ids: Option<mod_typ::NonEmptyArrayOfBaseItemIdsType>,
        #[yaserde(prefix = "typ", rename = "GlobalItemIds")]
        pub global_item_ids: Option<mod_typ::NonEmptyArrayOfBaseItemIdsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "MailboxScope")]
        pub mailbox_scope: Option<mod_typ::MailboxSearchLocationType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "GlobalIconIndex")]
        pub global_icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "DraftItemIds")]
        pub draft_item_ids: Option<mod_typ::NonEmptyArrayOfBaseItemIdsType>,
        #[yaserde(prefix = "typ", rename = "HasIrm")]
        pub has_irm: Option<bool>,
        #[yaserde(prefix = "typ", rename = "GlobalHasIrm")]
        pub global_has_irm: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "GlobalMentionedMe")]
        pub global_mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "SenderSMTPAddress")]
        pub sender_smtp_address: Option<mod_typ::SmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "MailboxGuids")]
        pub mailbox_guids: Option<String>,
        #[yaserde(prefix = "typ", rename = "From")]
        pub from: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "GlobalAtAllMention")]
        pub global_at_all_mention: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "HighlightTermType")]
    pub struct HighlightTermType {
        #[yaserde(prefix = "typ", rename = "Scope")]
        pub scope: String,
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfConversationsType")]
    pub struct ArrayOfConversationsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConversationRequestType")]
    pub struct ConversationRequestType {
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "SyncState")]
        pub sync_state: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfConversationRequestsType")]
    pub struct ArrayOfConversationRequestsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConversationNodeType")]
    pub struct ConversationNodeType {
        #[yaserde(prefix = "typ", rename = "InternetMessageId")]
        pub internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "ParentInternetMessageId")]
        pub parent_internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "Items")]
        pub items: Option<mod_typ::NonEmptyArrayOfAllItemsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfConversationNodesType")]
    pub struct ArrayOfConversationNodesType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConversationResponseType")]
    pub struct ConversationResponseType {
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "SyncState")]
        pub sync_state: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationNodes")]
        pub conversation_nodes: Option<mod_typ::ArrayOfConversationNodesType>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConversationNodeSortOrder")]
    pub struct ConversationNodeSortOrder {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfHighlightTermsType")]
    pub struct ArrayOfHighlightTermsType {
        #[yaserde(prefix = "typ", rename = "Term")]
        pub term: Vec<mod_typ::HighlightTermType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PersonaAttributionType")]
    pub struct PersonaAttributionType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: String,
        #[yaserde(prefix = "typ", rename = "SourceId")]
        pub source_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: String,
        #[yaserde(prefix = "typ", rename = "IsWritable")]
        pub is_writable: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsQuickContact")]
        pub is_quick_contact: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsHidden")]
        pub is_hidden: Option<bool>,
        #[yaserde(prefix = "typ", rename = "FolderId")]
        pub folder_id: Option<mod_typ::FolderIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfPersonaAttributionsType")]
    pub struct ArrayOfPersonaAttributionsType {
        #[yaserde(prefix = "typ", rename = "Attribution")]
        pub attribution: Vec<mod_typ::PersonaAttributionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfValueAttributionsType")]
    pub struct ArrayOfValueAttributionsType {
        #[yaserde(prefix = "typ", rename = "Attribution")]
        pub attribution: Vec<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfStringValueType")]
    pub struct ArrayOfStringValueType {
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: Vec<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "StringAttributedValueType")]
    pub struct StringAttributedValueType {
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: String,
        #[yaserde(prefix = "typ", rename = "Attributions")]
        pub attributions: mod_typ::ArrayOfValueAttributionsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BodyContentType")]
    pub struct BodyContentType {
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: String,
        #[yaserde(prefix = "typ", rename = "BodyType")]
        pub body_type: mod_typ::BodyTypeType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BodyContentAttributedValueType")]
    pub struct BodyContentAttributedValueType {
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: mod_typ::BodyContentType,
        #[yaserde(prefix = "typ", rename = "Attributions")]
        pub attributions: mod_typ::ArrayOfValueAttributionsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "StringArrayAttributedValueType")]
    pub struct StringArrayAttributedValueType {
        #[yaserde(prefix = "typ", rename = "Values")]
        pub values: mod_typ::ArrayOfStringValueType,
        #[yaserde(prefix = "typ", rename = "Attributions")]
        pub attributions: mod_typ::ArrayOfValueAttributionsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmailAddressAttributedValueType")]
    pub struct EmailAddressAttributedValueType {
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: mod_typ::EmailAddressType,
        #[yaserde(prefix = "typ", rename = "Attributions")]
        pub attributions: mod_typ::ArrayOfValueAttributionsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PersonaPhoneNumberType")]
    pub struct PersonaPhoneNumberType {
        #[yaserde(prefix = "typ", rename = "Number")]
        pub number: String,
        #[yaserde(prefix = "typ", rename = "Type")]
        pub r#type: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PhoneNumberAttributedValueType")]
    pub struct PhoneNumberAttributedValueType {
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: mod_typ::PersonaPhoneNumberType,
        #[yaserde(prefix = "typ", rename = "Attributions")]
        pub attributions: mod_typ::ArrayOfValueAttributionsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PersonaPostalAddressType")]
    pub struct PersonaPostalAddressType {
        #[yaserde(prefix = "typ", rename = "Street")]
        pub street: Option<String>,
        #[yaserde(prefix = "typ", rename = "City")]
        pub city: Option<String>,
        #[yaserde(prefix = "typ", rename = "State")]
        pub state: Option<String>,
        #[yaserde(prefix = "typ", rename = "Country")]
        pub country: Option<String>,
        #[yaserde(prefix = "typ", rename = "PostalCode")]
        pub postal_code: Option<String>,
        #[yaserde(prefix = "typ", rename = "PostOfficeBox")]
        pub post_office_box: Option<String>,
        #[yaserde(prefix = "typ", rename = "Type")]
        pub r#type: Option<String>,
        #[yaserde(prefix = "typ", rename = "Latitude")]
        pub latitude: Option<f64>,
        #[yaserde(prefix = "typ", rename = "Longitude")]
        pub longitude: Option<f64>,
        #[yaserde(prefix = "typ", rename = "Accuracy")]
        pub accuracy: Option<f64>,
        #[yaserde(prefix = "typ", rename = "Altitude")]
        pub altitude: Option<f64>,
        #[yaserde(prefix = "typ", rename = "AltitudeAccuracy")]
        pub altitude_accuracy: Option<f64>,
        #[yaserde(prefix = "typ", rename = "FormattedAddress")]
        pub formatted_address: Option<String>,
        #[yaserde(prefix = "typ", rename = "LocationUri")]
        pub location_uri: Option<String>,
        #[yaserde(prefix = "typ", rename = "LocationSource")]
        pub location_source: Option<mod_typ::LocationSourceType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PostalAddressAttributedValueType")]
    pub struct PostalAddressAttributedValueType {
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: mod_typ::PersonaPostalAddressType,
        #[yaserde(prefix = "typ", rename = "Attributions")]
        pub attributions: mod_typ::ArrayOfValueAttributionsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExtendedPropertyAttributedValueType")]
    pub struct ExtendedPropertyAttributedValueType {
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: mod_typ::ExtendedPropertyType,
        #[yaserde(prefix = "typ", rename = "Attributions")]
        pub attributions: mod_typ::ArrayOfValueAttributionsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfStringAttributedValuesType")]
    pub struct ArrayOfStringAttributedValuesType {
        #[yaserde(prefix = "typ", rename = "StringAttributedValue")]
        pub string_attributed_value: Vec<mod_typ::StringAttributedValueType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfStringArrayAttributedValuesType")]
    pub struct ArrayOfStringArrayAttributedValuesType {
        #[yaserde(prefix = "typ", rename = "StringArrayAttributedValue")]
        pub string_array_attributed_value: Vec<mod_typ::StringArrayAttributedValueType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfBodyContentAttributedValuesType")]
    pub struct ArrayOfBodyContentAttributedValuesType {
        #[yaserde(prefix = "typ", rename = "BodyContentAttributedValue")]
        pub body_content_attributed_value: Vec<mod_typ::BodyContentAttributedValueType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfEmailAddressAttributedValuesType")]
    pub struct ArrayOfEmailAddressAttributedValuesType {
        #[yaserde(prefix = "typ", rename = "EmailAddressAttributedValue")]
        pub email_address_attributed_value: Vec<mod_typ::EmailAddressAttributedValueType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfPhoneNumberAttributedValuesType")]
    pub struct ArrayOfPhoneNumberAttributedValuesType {
        #[yaserde(prefix = "typ", rename = "PhoneNumberAttributedValue")]
        pub phone_number_attributed_value: Vec<mod_typ::PhoneNumberAttributedValueType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfPostalAddressAttributedValuesType")]
    pub struct ArrayOfPostalAddressAttributedValuesType {
        #[yaserde(prefix = "typ", rename = "PostalAddressAttributedValue")]
        pub postal_address_attributed_value: Vec<mod_typ::PostalAddressAttributedValueType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfExtendedPropertyAttributedValueType")]
    pub struct ArrayOfExtendedPropertyAttributedValueType {
        #[yaserde(prefix = "typ", rename = "ExtendedPropertyAttributedValue")]
        pub extended_property_attributed_value: Vec<mod_typ::ExtendedPropertyAttributedValueType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InsightFiltersType")]
    pub struct InsightFiltersType {
        #[yaserde(prefix = "typ", rename = "Count")]
        pub count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Types")]
        pub types: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "KeyInsightsOnly")]
        pub key_insights_only: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InsightValue")]
    pub struct InsightValue {
        #[yaserde(prefix = "typ", rename = "InsightSource")]
        pub insight_source: Option<String>,
        #[yaserde(prefix = "typ", rename = "UpdatedUtcTicks")]
        pub updated_utc_ticks: Option<i64>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "StringInsightValue")]
    pub struct StringInsightValue {
        #[yaserde(prefix = "typ", rename = "InsightSource")]
        pub insight_source: Option<String>,
        #[yaserde(prefix = "typ", rename = "UpdatedUtcTicks")]
        pub updated_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Data")]
        pub data: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DelveDocument")]
    pub struct DelveDocument {
        #[yaserde(prefix = "typ", rename = "InsightSource")]
        pub insight_source: Option<String>,
        #[yaserde(prefix = "typ", rename = "UpdatedUtcTicks")]
        pub updated_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Rank")]
        pub rank: Option<f64>,
        #[yaserde(prefix = "typ", rename = "Author")]
        pub author: Option<String>,
        #[yaserde(prefix = "typ", rename = "Created")]
        pub created: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "DefaultEncodingURL")]
        pub default_encoding_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "FileType")]
        pub file_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "Title")]
        pub title: Option<String>,
        #[yaserde(prefix = "typ", rename = "DocumentId")]
        pub document_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "PreviewURL")]
        pub preview_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastEditor")]
        pub last_editor: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProfileInsightValue")]
    pub struct ProfileInsightValue {
        #[yaserde(prefix = "typ", rename = "InsightSource")]
        pub insight_source: Option<String>,
        #[yaserde(prefix = "typ", rename = "UpdatedUtcTicks")]
        pub updated_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "FullName")]
        pub full_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "FirstName")]
        pub first_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastName")]
        pub last_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "EmailAddress")]
        pub email_address: Option<String>,
        #[yaserde(prefix = "typ", rename = "Avatar")]
        pub avatar: Option<String>,
        #[yaserde(prefix = "typ", rename = "JoinedUtcTicks")]
        pub joined_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "ProfilePicture")]
        pub profile_picture: Option<mod_typ::UserProfilePicture>,
        #[yaserde(prefix = "typ", rename = "Title")]
        pub title: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OutOfOfficeInsightValue")]
    pub struct OutOfOfficeInsightValue {
        #[yaserde(prefix = "typ", rename = "InsightSource")]
        pub insight_source: Option<String>,
        #[yaserde(prefix = "typ", rename = "UpdatedUtcTicks")]
        pub updated_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "StartTime")]
        pub start_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "EndTime")]
        pub end_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "Message")]
        pub message: Option<String>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "JobInsightValue")]
    pub struct JobInsightValue {
        #[yaserde(prefix = "typ", rename = "InsightSource")]
        pub insight_source: Option<String>,
        #[yaserde(prefix = "typ", rename = "UpdatedUtcTicks")]
        pub updated_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Company")]
        pub company: Option<String>,
        #[yaserde(prefix = "typ", rename = "CompanyDescription")]
        pub company_description: Option<String>,
        #[yaserde(prefix = "typ", rename = "CompanyTicker")]
        pub company_ticker: Option<String>,
        #[yaserde(prefix = "typ", rename = "CompanyLogoUrl")]
        pub company_logo_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "CompanyWebsiteUrl")]
        pub company_website_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "CompanyLinkedInUrl")]
        pub company_linked_in_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "Title")]
        pub title: Option<String>,
        #[yaserde(prefix = "typ", rename = "StartUtcTicks")]
        pub start_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "EndUtcTicks")]
        pub end_utc_ticks: Option<i64>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CompanyInsightValue")]
    pub struct CompanyInsightValue {
        #[yaserde(prefix = "typ", rename = "InsightSource")]
        pub insight_source: Option<String>,
        #[yaserde(prefix = "typ", rename = "UpdatedUtcTicks")]
        pub updated_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: String,
        #[yaserde(prefix = "typ", rename = "SatoriId")]
        pub satori_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "Description")]
        pub description: Option<String>,
        #[yaserde(prefix = "typ", rename = "DescriptionAttribution")]
        pub description_attribution: Option<String>,
        #[yaserde(prefix = "typ", rename = "ImageUrl")]
        pub image_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "ImageUrlAttribution")]
        pub image_url_attribution: Option<String>,
        #[yaserde(prefix = "typ", rename = "YearFound")]
        pub year_found: Option<String>,
        #[yaserde(prefix = "typ", rename = "FinanceSymbol")]
        pub finance_symbol: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebsiteUrl")]
        pub website_url: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserProfilePicture")]
    pub struct UserProfilePicture {
        #[yaserde(prefix = "typ", rename = "InsightSource")]
        pub insight_source: Option<String>,
        #[yaserde(prefix = "typ", rename = "UpdatedUtcTicks")]
        pub updated_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Blob")]
        pub blob: Option<String>,
        #[yaserde(prefix = "typ", rename = "PhotoSize")]
        pub photo_size: Option<String>,
        #[yaserde(prefix = "typ", rename = "Url")]
        pub url: Option<String>,
        #[yaserde(prefix = "typ", rename = "ImageType")]
        pub image_type: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EducationInsightValue")]
    pub struct EducationInsightValue {
        #[yaserde(prefix = "typ", rename = "InsightSource")]
        pub insight_source: Option<String>,
        #[yaserde(prefix = "typ", rename = "UpdatedUtcTicks")]
        pub updated_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Institute")]
        pub institute: Option<String>,
        #[yaserde(prefix = "typ", rename = "Degree")]
        pub degree: Option<String>,
        #[yaserde(prefix = "typ", rename = "StartUtcTicks")]
        pub start_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "EndUtcTicks")]
        pub end_utc_ticks: Option<i64>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SkillInsightValue")]
    pub struct SkillInsightValue {
        #[yaserde(prefix = "typ", rename = "InsightSource")]
        pub insight_source: Option<String>,
        #[yaserde(prefix = "typ", rename = "UpdatedUtcTicks")]
        pub updated_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Strength")]
        pub strength: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingInsightValue")]
    pub struct MeetingInsightValue {
        #[yaserde(prefix = "typ", rename = "InsightSource")]
        pub insight_source: Option<String>,
        #[yaserde(prefix = "typ", rename = "UpdatedUtcTicks")]
        pub updated_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: Option<String>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "StartUtcTicks")]
        pub start_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "EndUtcTicks")]
        pub end_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Location")]
        pub location: Option<String>,
        #[yaserde(prefix = "typ", rename = "Organizer")]
        pub organizer: Option<mod_typ::ProfileInsightValue>,
        #[yaserde(prefix = "typ", rename = "Attendees")]
        pub attendees: Option<mod_typ::ArrayOfProfileInsightValue>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmailInsightValue")]
    pub struct EmailInsightValue {
        #[yaserde(prefix = "typ", rename = "InsightSource")]
        pub insight_source: Option<String>,
        #[yaserde(prefix = "typ", rename = "UpdatedUtcTicks")]
        pub updated_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: Option<String>,
        #[yaserde(prefix = "typ", rename = "ThreadId")]
        pub thread_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastEmailDateUtcTicks")]
        pub last_email_date_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastEmailSender")]
        pub last_email_sender: Option<mod_typ::ProfileInsightValue>,
        #[yaserde(prefix = "typ", rename = "EmailsCount")]
        pub emails_count: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfInsightValue")]
    pub struct ArrayOfInsightValue {
        #[yaserde(prefix = "typ", rename = "Item")]
        pub item: Vec<mod_typ::InsightValue>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfSkillInsightValue")]
    pub struct ArrayOfSkillInsightValue {
        #[yaserde(prefix = "typ", rename = "Item")]
        pub item: Vec<mod_typ::SkillInsightValue>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfProfileInsightValue")]
    pub struct ArrayOfProfileInsightValue {
        #[yaserde(prefix = "typ", rename = "Item")]
        pub item: Vec<mod_typ::ProfileInsightValue>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfJobInsightValue")]
    pub struct ArrayOfJobInsightValue {
        #[yaserde(prefix = "typ", rename = "Item")]
        pub item: Vec<mod_typ::JobInsightValue>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfCompanyInsightValue")]
    pub struct ArrayOfCompanyInsightValue {
        #[yaserde(prefix = "typ", rename = "Item")]
        pub item: Vec<mod_typ::CompanyInsightValue>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InsightContent")]
    pub struct InsightContent {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SingleValueInsightContent")]
    pub struct SingleValueInsightContent {
        #[yaserde(prefix = "typ", rename = "Item")]
        pub item: Option<mod_typ::InsightValue>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MultiValueInsightContent")]
    pub struct MultiValueInsightContent {
        #[yaserde(prefix = "typ", rename = "ItemList")]
        pub item_list: Option<mod_typ::ArrayOfInsightValue>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "Insight")]
    pub struct Insight {
        #[yaserde(prefix = "typ", rename = "InsightType")]
        pub insight_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "Rank")]
        pub rank: Option<f64>,
        #[yaserde(prefix = "typ", rename = "Content")]
        pub content: Option<mod_typ::InsightContent>,
        #[yaserde(prefix = "typ", rename = "Text")]
        pub text: Option<String>,
        #[yaserde(prefix = "typ", rename = "ItemList")]
        pub item_list: Option<mod_typ::ArrayOfInsightValue>,
        #[yaserde(prefix = "typ", rename = "RequiresToken")]
        pub requires_token: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ComputedInsightValueProperty")]
    pub struct ComputedInsightValueProperty {
        #[yaserde(prefix = "typ", rename = "Key")]
        pub key: String,
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfComputedInsightValueProperty")]
    pub struct ArrayOfComputedInsightValueProperty {
        #[yaserde(prefix = "typ", rename = "Property")]
        pub property: Vec<mod_typ::ComputedInsightValueProperty>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ComputedInsightValue")]
    pub struct ComputedInsightValue {
        #[yaserde(prefix = "typ", rename = "InsightSource")]
        pub insight_source: Option<String>,
        #[yaserde(prefix = "typ", rename = "UpdatedUtcTicks")]
        pub updated_utc_ticks: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Properties")]
        pub properties: Option<mod_typ::ArrayOfComputedInsightValueProperty>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfInsight")]
    pub struct ArrayOfInsight {
        #[yaserde(prefix = "typ", rename = "Insight")]
        pub insight: Vec<mod_typ::Insight>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PersonResponseShapeType")]
    pub struct PersonResponseShapeType {
        #[yaserde(prefix = "typ", rename = "BaseShape")]
        pub base_shape: mod_typ::DefaultShapeNamesType,
        #[yaserde(prefix = "typ", rename = "AdditionalProperties")]
        pub additional_properties: Option<mod_typ::NonEmptyArrayOfPathsToElementType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PersonType")]
    pub struct PersonType {
        #[yaserde(prefix = "typ", rename = "FullName")]
        pub full_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "GivenName")]
        pub given_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Surname")]
        pub surname: Option<String>,
        #[yaserde(prefix = "typ", rename = "PhoneNumber")]
        pub phone_number: Option<String>,
        #[yaserde(prefix = "typ", rename = "SMSNumber")]
        pub sms_number: Option<String>,
        #[yaserde(prefix = "typ", rename = "EmailAddress")]
        pub email_address: Option<String>,
        #[yaserde(prefix = "typ", rename = "Alias")]
        pub alias: Option<String>,
        #[yaserde(prefix = "typ", rename = "Department")]
        pub department: Option<String>,
        #[yaserde(prefix = "typ", rename = "LinkedInProfileLink")]
        pub linked_in_profile_link: Option<String>,
        #[yaserde(prefix = "typ", rename = "Skills")]
        pub skills: Option<mod_typ::ArrayOfSkillInsightValue>,
        #[yaserde(prefix = "typ", rename = "ProfessionalBiography")]
        pub professional_biography: Option<String>,
        #[yaserde(prefix = "typ", rename = "ManagementChain")]
        pub management_chain: Option<mod_typ::ArrayOfProfileInsightValue>,
        #[yaserde(prefix = "typ", rename = "DirectReports")]
        pub direct_reports: Option<mod_typ::ArrayOfProfileInsightValue>,
        #[yaserde(prefix = "typ", rename = "Peers")]
        pub peers: Option<mod_typ::ArrayOfProfileInsightValue>,
        #[yaserde(prefix = "typ", rename = "TeamSize")]
        pub team_size: Option<String>,
        #[yaserde(prefix = "typ", rename = "CurrentJob")]
        pub current_job: Option<mod_typ::ArrayOfJobInsightValue>,
        #[yaserde(prefix = "typ", rename = "Birthday")]
        pub birthday: Option<String>,
        #[yaserde(prefix = "typ", rename = "Hometown")]
        pub hometown: Option<String>,
        #[yaserde(prefix = "typ", rename = "CurrentLocation")]
        pub current_location: Option<String>,
        #[yaserde(prefix = "typ", rename = "CompanyProfile")]
        pub company_profile: Option<mod_typ::ArrayOfCompanyInsightValue>,
        #[yaserde(prefix = "typ", rename = "Office")]
        pub office: Option<String>,
        #[yaserde(prefix = "typ", rename = "Headline")]
        pub headline: Option<String>,
        #[yaserde(prefix = "typ", rename = "MutualConnections")]
        pub mutual_connections: Option<mod_typ::ArrayOfProfileInsightValue>,
        #[yaserde(prefix = "typ", rename = "Title")]
        pub title: Option<String>,
        #[yaserde(prefix = "typ", rename = "MutualManager")]
        pub mutual_manager: Option<mod_typ::ProfileInsightValue>,
        #[yaserde(prefix = "typ", rename = "Insights")]
        pub insights: Option<mod_typ::ArrayOfInsight>,
        #[yaserde(prefix = "typ", rename = "UserProfilePicture")]
        pub user_profile_picture: Option<mod_typ::UserProfilePicture>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfPersonType")]
    pub struct ArrayOfPersonType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TokenSourceType")]
    pub struct TokenSourceType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PeopleTokenType")]
    pub struct PeopleTokenType {
        #[yaserde(prefix = "typ", rename = "TokenSource")]
        pub token_source: mod_typ::TokenSourceType,
        #[yaserde(prefix = "typ", rename = "ExpirationDateTime")]
        pub expiration_date_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "TokenValue")]
        pub token_value: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfPeopleTokenType")]
    pub struct NonEmptyArrayOfPeopleTokenType {
        #[yaserde(prefix = "typ", rename = "PeopleToken")]
        pub people_token: Vec<mod_typ::PeopleTokenType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PersonaType")]
    pub struct PersonaType {
        #[yaserde(prefix = "typ", rename = "PersonaId")]
        pub persona_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "PersonaType")]
        pub persona_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "PersonaObjectStatus")]
        pub persona_object_status: Option<String>,
        #[yaserde(prefix = "typ", rename = "CreationTime")]
        pub creation_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "Bodies")]
        pub bodies: Option<mod_typ::ArrayOfBodyContentAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "DisplayNameFirstLastSortKey")]
        pub display_name_first_last_sort_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayNameLastFirstSortKey")]
        pub display_name_last_first_sort_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "CompanyNameSortKey")]
        pub company_name_sort_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "HomeCitySortKey")]
        pub home_city_sort_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "WorkCitySortKey")]
        pub work_city_sort_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayNameFirstLastHeader")]
        pub display_name_first_last_header: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayNameLastFirstHeader")]
        pub display_name_last_first_header: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayNameFirstLast")]
        pub display_name_first_last: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayNameLastFirst")]
        pub display_name_last_first: Option<String>,
        #[yaserde(prefix = "typ", rename = "FileAs")]
        pub file_as: Option<String>,
        #[yaserde(prefix = "typ", rename = "FileAsId")]
        pub file_as_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayNamePrefix")]
        pub display_name_prefix: Option<String>,
        #[yaserde(prefix = "typ", rename = "GivenName")]
        pub given_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "MiddleName")]
        pub middle_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Surname")]
        pub surname: Option<String>,
        #[yaserde(prefix = "typ", rename = "Generation")]
        pub generation: Option<String>,
        #[yaserde(prefix = "typ", rename = "Nickname")]
        pub nickname: Option<String>,
        #[yaserde(prefix = "typ", rename = "YomiCompanyName")]
        pub yomi_company_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "YomiFirstName")]
        pub yomi_first_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "YomiLastName")]
        pub yomi_last_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Title")]
        pub title: Option<String>,
        #[yaserde(prefix = "typ", rename = "Department")]
        pub department: Option<String>,
        #[yaserde(prefix = "typ", rename = "CompanyName")]
        pub company_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Location")]
        pub location: Option<String>,
        #[yaserde(prefix = "typ", rename = "EmailAddress")]
        pub email_address: Option<mod_typ::EmailAddressType>,
        #[yaserde(prefix = "typ", rename = "EmailAddresses")]
        pub email_addresses: Option<mod_typ::ArrayOfEmailAddressesType>,
        #[yaserde(prefix = "typ", rename = "PhoneNumber")]
        pub phone_number: Option<mod_typ::PersonaPhoneNumberType>,
        #[yaserde(prefix = "typ", rename = "ImAddress")]
        pub im_address: Option<String>,
        #[yaserde(prefix = "typ", rename = "HomeCity")]
        pub home_city: Option<String>,
        #[yaserde(prefix = "typ", rename = "WorkCity")]
        pub work_city: Option<String>,
        #[yaserde(prefix = "typ", rename = "RelevanceScore")]
        pub relevance_score: Option<i32>,
        #[yaserde(prefix = "typ", rename = "FolderIds")]
        pub folder_ids: Option<mod_typ::ArrayOfFolderIdType>,
        #[yaserde(prefix = "typ", rename = "Attributions")]
        pub attributions: Option<mod_typ::ArrayOfPersonaAttributionsType>,
        #[yaserde(prefix = "typ", rename = "DisplayNames")]
        pub display_names: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "FileAses")]
        pub file_ases: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "FileAsIds")]
        pub file_as_ids: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "DisplayNamePrefixes")]
        pub display_name_prefixes: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "GivenNames")]
        pub given_names: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "MiddleNames")]
        pub middle_names: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Surnames")]
        pub surnames: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Generations")]
        pub generations: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Nicknames")]
        pub nicknames: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Initials")]
        pub initials: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "YomiCompanyNames")]
        pub yomi_company_names: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "YomiFirstNames")]
        pub yomi_first_names: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "YomiLastNames")]
        pub yomi_last_names: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "BusinessPhoneNumbers")]
        pub business_phone_numbers: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "BusinessPhoneNumbers2")]
        pub business_phone_numbers_2: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "HomePhones")]
        pub home_phones: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "HomePhones2")]
        pub home_phones_2: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "MobilePhones")]
        pub mobile_phones: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "MobilePhones2")]
        pub mobile_phones_2: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "AssistantPhoneNumbers")]
        pub assistant_phone_numbers: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "CallbackPhones")]
        pub callback_phones: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "CarPhones")]
        pub car_phones: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "HomeFaxes")]
        pub home_faxes: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "OrganizationMainPhones")]
        pub organization_main_phones: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "OtherFaxes")]
        pub other_faxes: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "OtherTelephones")]
        pub other_telephones: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "OtherPhones2")]
        pub other_phones_2: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Pagers")]
        pub pagers: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "RadioPhones")]
        pub radio_phones: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "TelexNumbers")]
        pub telex_numbers: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "TTYTDDPhoneNumbers")]
        pub ttytdd_phone_numbers: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "WorkFaxes")]
        pub work_faxes: Option<mod_typ::ArrayOfPhoneNumberAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Emails1")]
        pub emails_1: Option<mod_typ::ArrayOfEmailAddressAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Emails2")]
        pub emails_2: Option<mod_typ::ArrayOfEmailAddressAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Emails3")]
        pub emails_3: Option<mod_typ::ArrayOfEmailAddressAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "BusinessHomePages")]
        pub business_home_pages: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "PersonalHomePages")]
        pub personal_home_pages: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "OfficeLocations")]
        pub office_locations: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "ImAddresses")]
        pub im_addresses: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "ImAddresses2")]
        pub im_addresses_2: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "ImAddresses3")]
        pub im_addresses_3: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "BusinessAddresses")]
        pub business_addresses: Option<mod_typ::ArrayOfPostalAddressAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "HomeAddresses")]
        pub home_addresses: Option<mod_typ::ArrayOfPostalAddressAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "OtherAddresses")]
        pub other_addresses: Option<mod_typ::ArrayOfPostalAddressAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Titles")]
        pub titles: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Departments")]
        pub departments: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "CompanyNames")]
        pub company_names: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Managers")]
        pub managers: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "AssistantNames")]
        pub assistant_names: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Professions")]
        pub professions: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "SpouseNames")]
        pub spouse_names: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Children")]
        pub children: Option<mod_typ::ArrayOfStringArrayAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Schools")]
        pub schools: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Hobbies")]
        pub hobbies: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "WeddingAnniversaries")]
        pub wedding_anniversaries: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Birthdays")]
        pub birthdays: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "Locations")]
        pub locations: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "InlineLinks")]
        pub inline_links: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "ItemLinkIds")]
        pub item_link_ids: Option<mod_typ::ArrayOfStringArrayAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "HasActiveDeals")]
        pub has_active_deals: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsBusinessContact")]
        pub is_business_contact: Option<String>,
        #[yaserde(prefix = "typ", rename = "AttributedHasActiveDeals")]
        pub attributed_has_active_deals: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "AttributedIsBusinessContact")]
        pub attributed_is_business_contact: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "SourceMailboxGuids")]
        pub source_mailbox_guids: Option<mod_typ::ArrayOfStringAttributedValuesType>,
        #[yaserde(prefix = "typ", rename = "LastContactedDate")]
        pub last_contacted_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperties")]
        pub extended_properties: Option<mod_typ::ArrayOfExtendedPropertyAttributedValueType>,
        #[yaserde(prefix = "typ", rename = "ExternalDirectoryObjectId")]
        pub external_directory_object_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "MapiEntryId")]
        pub mapi_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "MapiEmailAddress")]
        pub mapi_email_address: Option<String>,
        #[yaserde(prefix = "typ", rename = "MapiAddressType")]
        pub mapi_address_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "MapiSearchKey")]
        pub mapi_search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "MapiTransmittableDisplayName")]
        pub mapi_transmittable_display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "MapiSendRichInfo")]
        pub mapi_send_rich_info: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfPeopleType")]
    pub struct ArrayOfPeopleType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailboxLocatorType")]
    pub struct MailboxLocatorType {
        #[yaserde(prefix = "typ", rename = "ExternalDirectoryObjectId")]
        pub external_directory_object_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "LegacyDn")]
        pub legacy_dn: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "GroupLocatorType")]
    pub struct GroupLocatorType {
        #[yaserde(prefix = "typ", rename = "ExternalDirectoryObjectId")]
        pub external_directory_object_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "LegacyDn")]
        pub legacy_dn: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserLocatorType")]
    pub struct UserLocatorType {
        #[yaserde(prefix = "typ", rename = "ExternalDirectoryObjectId")]
        pub external_directory_object_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "LegacyDn")]
        pub legacy_dn: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "GroupMailboxConfigurationActionType")]
    pub struct GroupMailboxConfigurationActionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InstantSearchItemType")]
    pub struct InstantSearchItemType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InstantSearchResultType")]
    pub struct InstantSearchResultType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfItemsType")]
    pub struct ArrayOfItemsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfCalendarItemsType")]
    pub struct ArrayOfCalendarItemsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InstantSearchPayloadType")]
    pub struct InstantSearchPayloadType {
        #[yaserde(prefix = "typ", rename = "SearchSessionId")]
        pub search_session_id: String,
        #[yaserde(prefix = "typ", rename = "SearchRequestId")]
        pub search_request_id: i64,
        #[yaserde(prefix = "typ", rename = "ResultType")]
        pub result_type: mod_typ::InstantSearchResultType,
        #[yaserde(prefix = "typ", rename = "Items")]
        pub items: Option<mod_typ::ArrayOfItemsType>,
        #[yaserde(prefix = "typ", rename = "Conversations")]
        pub conversations: Option<mod_typ::ArrayOfConversationsType>,
        #[yaserde(prefix = "typ", rename = "CalendarItems")]
        pub calendar_items: Option<mod_typ::ArrayOfCalendarItemsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "QueryOptionsType")]
    pub struct QueryOptionsType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OneDriveViewType")]
    pub struct OneDriveViewType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DelveViewType")]
    pub struct DelveViewType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "GroupMemberIdentifierType")]
    pub struct GroupMemberIdentifierType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ModernGroupTypeType")]
    pub struct ModernGroupTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfStringsType")]
    pub struct ArrayOfStringsType {
        #[yaserde(prefix = "typ", rename = "String")]
        pub string: Vec<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfRealItemsType")]
    pub struct ArrayOfRealItemsType {
        #[yaserde(prefix = "typ", rename = "Item")]
        pub item: Vec<mod_typ::ItemType>,
        #[yaserde(prefix = "typ", rename = "Message")]
        pub message: Vec<mod_typ::MessageType>,
        #[yaserde(prefix = "typ", rename = "SharingMessage")]
        pub sharing_message: Vec<mod_typ::SharingMessageType>,
        #[yaserde(prefix = "typ", rename = "CalendarItem")]
        pub calendar_item: Vec<mod_typ::CalendarItemType>,
        #[yaserde(prefix = "typ", rename = "Contact")]
        pub contact: Vec<mod_typ::ContactItemType>,
        #[yaserde(prefix = "typ", rename = "DistributionList")]
        pub distribution_list: Vec<mod_typ::DistributionListType>,
        #[yaserde(prefix = "typ", rename = "MeetingMessage")]
        pub meeting_message: Vec<mod_typ::MeetingMessageType>,
        #[yaserde(prefix = "typ", rename = "MeetingRequest")]
        pub meeting_request: Vec<mod_typ::MeetingRequestMessageType>,
        #[yaserde(prefix = "typ", rename = "MeetingResponse")]
        pub meeting_response: Vec<mod_typ::MeetingResponseMessageType>,
        #[yaserde(prefix = "typ", rename = "MeetingCancellation")]
        pub meeting_cancellation: Vec<mod_typ::MeetingCancellationMessageType>,
        #[yaserde(prefix = "typ", rename = "Task")]
        pub task: Vec<mod_typ::TaskType>,
        #[yaserde(prefix = "typ", rename = "PostItem")]
        pub post_item: Vec<mod_typ::PostItemType>,
        #[yaserde(prefix = "typ", rename = "RoleMember")]
        pub role_member: Vec<mod_typ::RoleMemberItemType>,
        #[yaserde(prefix = "typ", rename = "Network")]
        pub network: Vec<mod_typ::NetworkItemType>,
        #[yaserde(prefix = "typ", rename = "Person")]
        pub person: Vec<mod_typ::AbchPersonItemType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfAllItemsType")]
    pub struct NonEmptyArrayOfAllItemsType {
        #[yaserde(prefix = "typ", rename = "Item")]
        pub item: Vec<mod_typ::ItemType>,
        #[yaserde(prefix = "typ", rename = "Message")]
        pub message: Vec<mod_typ::MessageType>,
        #[yaserde(prefix = "typ", rename = "SharingMessage")]
        pub sharing_message: Vec<mod_typ::SharingMessageType>,
        #[yaserde(prefix = "typ", rename = "CalendarItem")]
        pub calendar_item: Vec<mod_typ::CalendarItemType>,
        #[yaserde(prefix = "typ", rename = "Contact")]
        pub contact: Vec<mod_typ::ContactItemType>,
        #[yaserde(prefix = "typ", rename = "DistributionList")]
        pub distribution_list: Vec<mod_typ::DistributionListType>,
        #[yaserde(prefix = "typ", rename = "MeetingMessage")]
        pub meeting_message: Vec<mod_typ::MeetingMessageType>,
        #[yaserde(prefix = "typ", rename = "MeetingRequest")]
        pub meeting_request: Vec<mod_typ::MeetingRequestMessageType>,
        #[yaserde(prefix = "typ", rename = "MeetingResponse")]
        pub meeting_response: Vec<mod_typ::MeetingResponseMessageType>,
        #[yaserde(prefix = "typ", rename = "MeetingCancellation")]
        pub meeting_cancellation: Vec<mod_typ::MeetingCancellationMessageType>,
        #[yaserde(prefix = "typ", rename = "Task")]
        pub task: Vec<mod_typ::TaskType>,
        #[yaserde(prefix = "typ", rename = "PostItem")]
        pub post_item: Vec<mod_typ::PostItemType>,
        #[yaserde(prefix = "typ", rename = "ReplyToItem")]
        pub reply_to_item: Vec<mod_typ::ReplyToItemType>,
        #[yaserde(prefix = "typ", rename = "ForwardItem")]
        pub forward_item: Vec<mod_typ::ForwardItemType>,
        #[yaserde(prefix = "typ", rename = "ReplyAllToItem")]
        pub reply_all_to_item: Vec<mod_typ::ReplyAllToItemType>,
        #[yaserde(prefix = "typ", rename = "AcceptItem")]
        pub accept_item: Vec<mod_typ::AcceptItemType>,
        #[yaserde(prefix = "typ", rename = "TentativelyAcceptItem")]
        pub tentatively_accept_item: Vec<mod_typ::TentativelyAcceptItemType>,
        #[yaserde(prefix = "typ", rename = "DeclineItem")]
        pub decline_item: Vec<mod_typ::DeclineItemType>,
        #[yaserde(prefix = "typ", rename = "CancelCalendarItem")]
        pub cancel_calendar_item: Vec<mod_typ::CancelCalendarItemType>,
        #[yaserde(prefix = "typ", rename = "RemoveItem")]
        pub remove_item: Vec<mod_typ::RemoveItemType>,
        #[yaserde(prefix = "typ", rename = "SuppressReadReceipt")]
        pub suppress_read_receipt: Vec<mod_typ::SuppressReadReceiptType>,
        #[yaserde(prefix = "typ", rename = "PostReplyItem")]
        pub post_reply_item: Vec<mod_typ::PostReplyItemType>,
        #[yaserde(prefix = "typ", rename = "AcceptSharingInvitation")]
        pub accept_sharing_invitation: Vec<mod_typ::AcceptSharingInvitationType>,
        #[yaserde(prefix = "typ", rename = "RoleMember")]
        pub role_member: Vec<mod_typ::RoleMemberItemType>,
        #[yaserde(prefix = "typ", rename = "Network")]
        pub network: Vec<mod_typ::NetworkItemType>,
        #[yaserde(prefix = "typ", rename = "Person")]
        pub person: Vec<mod_typ::AbchPersonItemType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingRegistrationResponseObjectType")]
    pub struct MeetingRegistrationResponseObjectType {
        #[yaserde(prefix = "typ", rename = "ProposedStart")]
        pub proposed_start: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProposedEnd")]
        pub proposed_end: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AcceptItemType")]
    pub struct AcceptItemType {
        #[yaserde(prefix = "typ", rename = "ProposedStart")]
        pub proposed_start: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProposedEnd")]
        pub proposed_end: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TentativelyAcceptItemType")]
    pub struct TentativelyAcceptItemType {
        #[yaserde(prefix = "typ", rename = "ProposedStart")]
        pub proposed_start: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProposedEnd")]
        pub proposed_end: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DeclineItemType")]
    pub struct DeclineItemType {
        #[yaserde(prefix = "typ", rename = "ProposedStart")]
        pub proposed_start: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProposedEnd")]
        pub proposed_end: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProposeNewTimeType")]
    pub struct ProposeNewTimeType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "Sender")]
        pub sender: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ToRecipients")]
        pub to_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "CcRecipients")]
        pub cc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "BccRecipients")]
        pub bcc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "IsReadReceiptRequested")]
        pub is_read_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDeliveryReceiptRequested")]
        pub is_delivery_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConversationIndex")]
        pub conversation_index: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationTopic")]
        pub conversation_topic: Option<String>,
        #[yaserde(prefix = "typ", rename = "From")]
        pub from: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "InternetMessageId")]
        pub internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResponseRequested")]
        pub is_response_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "References")]
        pub references: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReplyTo")]
        pub reply_to: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "ReceivedBy")]
        pub received_by: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ReceivedRepresenting")]
        pub received_representing: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ApprovalRequestData")]
        pub approval_request_data: Option<mod_typ::ApprovalRequestDataType>,
        #[yaserde(prefix = "typ", rename = "VotingInformation")]
        pub voting_information: Option<mod_typ::VotingInformationType>,
        #[yaserde(prefix = "typ", rename = "ReminderMessageData")]
        pub reminder_message_data: Option<mod_typ::ReminderMessageDataType>,
        #[yaserde(prefix = "typ", rename = "MessageSafety")]
        pub message_safety: Option<mod_typ::MessageSafetyType>,
        #[yaserde(prefix = "typ", rename = "SenderSMTPAddress")]
        pub sender_smtp_address: Option<mod_typ::SmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "MailboxGuids")]
        pub mailbox_guids: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemIcs")]
        pub published_calendar_item_ics: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemName")]
        pub published_calendar_item_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReferenceItemId")]
        pub reference_item_id: Option<mod_typ::ItemIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RemoveItemType")]
    pub struct RemoveItemType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "Sender")]
        pub sender: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ToRecipients")]
        pub to_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "CcRecipients")]
        pub cc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "BccRecipients")]
        pub bcc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "IsReadReceiptRequested")]
        pub is_read_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDeliveryReceiptRequested")]
        pub is_delivery_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConversationIndex")]
        pub conversation_index: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationTopic")]
        pub conversation_topic: Option<String>,
        #[yaserde(prefix = "typ", rename = "From")]
        pub from: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "InternetMessageId")]
        pub internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResponseRequested")]
        pub is_response_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "References")]
        pub references: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReplyTo")]
        pub reply_to: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "ReceivedBy")]
        pub received_by: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ReceivedRepresenting")]
        pub received_representing: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ApprovalRequestData")]
        pub approval_request_data: Option<mod_typ::ApprovalRequestDataType>,
        #[yaserde(prefix = "typ", rename = "VotingInformation")]
        pub voting_information: Option<mod_typ::VotingInformationType>,
        #[yaserde(prefix = "typ", rename = "ReminderMessageData")]
        pub reminder_message_data: Option<mod_typ::ReminderMessageDataType>,
        #[yaserde(prefix = "typ", rename = "MessageSafety")]
        pub message_safety: Option<mod_typ::MessageSafetyType>,
        #[yaserde(prefix = "typ", rename = "SenderSMTPAddress")]
        pub sender_smtp_address: Option<mod_typ::SmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "MailboxGuids")]
        pub mailbox_guids: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemIcs")]
        pub published_calendar_item_ics: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemName")]
        pub published_calendar_item_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReferenceItemId")]
        pub reference_item_id: Option<mod_typ::ItemIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AddItemToMyCalendarType")]
    pub struct AddItemToMyCalendarType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "Sender")]
        pub sender: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ToRecipients")]
        pub to_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "CcRecipients")]
        pub cc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "BccRecipients")]
        pub bcc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "IsReadReceiptRequested")]
        pub is_read_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDeliveryReceiptRequested")]
        pub is_delivery_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConversationIndex")]
        pub conversation_index: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationTopic")]
        pub conversation_topic: Option<String>,
        #[yaserde(prefix = "typ", rename = "From")]
        pub from: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "InternetMessageId")]
        pub internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResponseRequested")]
        pub is_response_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "References")]
        pub references: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReplyTo")]
        pub reply_to: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "ReceivedBy")]
        pub received_by: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ReceivedRepresenting")]
        pub received_representing: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ApprovalRequestData")]
        pub approval_request_data: Option<mod_typ::ApprovalRequestDataType>,
        #[yaserde(prefix = "typ", rename = "VotingInformation")]
        pub voting_information: Option<mod_typ::VotingInformationType>,
        #[yaserde(prefix = "typ", rename = "ReminderMessageData")]
        pub reminder_message_data: Option<mod_typ::ReminderMessageDataType>,
        #[yaserde(prefix = "typ", rename = "MessageSafety")]
        pub message_safety: Option<mod_typ::MessageSafetyType>,
        #[yaserde(prefix = "typ", rename = "SenderSMTPAddress")]
        pub sender_smtp_address: Option<mod_typ::SmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "MailboxGuids")]
        pub mailbox_guids: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemIcs")]
        pub published_calendar_item_ics: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemName")]
        pub published_calendar_item_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReferenceItemId")]
        pub reference_item_id: Option<mod_typ::ItemIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PostReplyItemBaseType")]
    pub struct PostReplyItemBaseType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PostReplyItemType")]
    pub struct PostReplyItemType {
        #[yaserde(prefix = "typ", rename = "NewBodyContent")]
        pub new_body_content: Option<mod_typ::BodyType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MimeContentType")]
    pub struct MimeContentType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MimeContentUTF8Type")]
    pub struct MimeContentUTF8Type {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MessageDispositionType")]
    pub struct MessageDispositionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CalendarItemCreateOrDeleteOperationType")]
    pub struct CalendarItemCreateOrDeleteOperationType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CalendarItemUpdateOperationType")]
    pub struct CalendarItemUpdateOperationType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AffectedTaskOccurrencesType")]
    pub struct AffectedTaskOccurrencesType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MessageType")]
    pub struct MessageType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "Sender")]
        pub sender: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ToRecipients")]
        pub to_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "CcRecipients")]
        pub cc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "BccRecipients")]
        pub bcc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "IsReadReceiptRequested")]
        pub is_read_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDeliveryReceiptRequested")]
        pub is_delivery_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConversationIndex")]
        pub conversation_index: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationTopic")]
        pub conversation_topic: Option<String>,
        #[yaserde(prefix = "typ", rename = "From")]
        pub from: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "InternetMessageId")]
        pub internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResponseRequested")]
        pub is_response_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "References")]
        pub references: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReplyTo")]
        pub reply_to: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "ReceivedBy")]
        pub received_by: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ReceivedRepresenting")]
        pub received_representing: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ApprovalRequestData")]
        pub approval_request_data: Option<mod_typ::ApprovalRequestDataType>,
        #[yaserde(prefix = "typ", rename = "VotingInformation")]
        pub voting_information: Option<mod_typ::VotingInformationType>,
        #[yaserde(prefix = "typ", rename = "ReminderMessageData")]
        pub reminder_message_data: Option<mod_typ::ReminderMessageDataType>,
        #[yaserde(prefix = "typ", rename = "MessageSafety")]
        pub message_safety: Option<mod_typ::MessageSafetyType>,
        #[yaserde(prefix = "typ", rename = "SenderSMTPAddress")]
        pub sender_smtp_address: Option<mod_typ::SmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "MailboxGuids")]
        pub mailbox_guids: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemIcs")]
        pub published_calendar_item_ics: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemName")]
        pub published_calendar_item_name: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TaskStatusType")]
    pub struct TaskStatusType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TaskDelegateStateType")]
    pub struct TaskDelegateStateType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TaskType")]
    pub struct TaskType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "ActualWork")]
        pub actual_work: Option<i32>,
        #[yaserde(prefix = "typ", rename = "AssignedTime")]
        pub assigned_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "BillingInformation")]
        pub billing_information: Option<String>,
        #[yaserde(prefix = "typ", rename = "ChangeCount")]
        pub change_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Companies")]
        pub companies: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "CompleteDate")]
        pub complete_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Contacts")]
        pub contacts: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "DelegationState")]
        pub delegation_state: Option<mod_typ::TaskDelegateStateType>,
        #[yaserde(prefix = "typ", rename = "Delegator")]
        pub delegator: Option<String>,
        #[yaserde(prefix = "typ", rename = "DueDate")]
        pub due_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssignmentEditable")]
        pub is_assignment_editable: Option<i32>,
        #[yaserde(prefix = "typ", rename = "IsComplete")]
        pub is_complete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsRecurring")]
        pub is_recurring: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsTeamTask")]
        pub is_team_task: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Mileage")]
        pub mileage: Option<String>,
        #[yaserde(prefix = "typ", rename = "Owner")]
        pub owner: Option<String>,
        #[yaserde(prefix = "typ", rename = "PercentComplete")]
        pub percent_complete: Option<f64>,
        #[yaserde(prefix = "typ", rename = "Recurrence")]
        pub recurrence: Option<mod_typ::TaskRecurrenceType>,
        #[yaserde(prefix = "typ", rename = "StartDate")]
        pub start_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Status")]
        pub status: Option<mod_typ::TaskStatusType>,
        #[yaserde(prefix = "typ", rename = "StatusDescription")]
        pub status_description: Option<String>,
        #[yaserde(prefix = "typ", rename = "TotalWork")]
        pub total_work: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PostItemType")]
    pub struct PostItemType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "ConversationIndex")]
        pub conversation_index: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationTopic")]
        pub conversation_topic: Option<String>,
        #[yaserde(prefix = "typ", rename = "From")]
        pub from: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "InternetMessageId")]
        pub internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "PostedTime")]
        pub posted_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "References")]
        pub references: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sender")]
        pub sender: Option<mod_typ::SingleRecipientType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SharingMessageType")]
    pub struct SharingMessageType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "Sender")]
        pub sender: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ToRecipients")]
        pub to_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "CcRecipients")]
        pub cc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "BccRecipients")]
        pub bcc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "IsReadReceiptRequested")]
        pub is_read_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDeliveryReceiptRequested")]
        pub is_delivery_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConversationIndex")]
        pub conversation_index: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationTopic")]
        pub conversation_topic: Option<String>,
        #[yaserde(prefix = "typ", rename = "From")]
        pub from: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "InternetMessageId")]
        pub internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResponseRequested")]
        pub is_response_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "References")]
        pub references: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReplyTo")]
        pub reply_to: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "ReceivedBy")]
        pub received_by: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ReceivedRepresenting")]
        pub received_representing: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ApprovalRequestData")]
        pub approval_request_data: Option<mod_typ::ApprovalRequestDataType>,
        #[yaserde(prefix = "typ", rename = "VotingInformation")]
        pub voting_information: Option<mod_typ::VotingInformationType>,
        #[yaserde(prefix = "typ", rename = "ReminderMessageData")]
        pub reminder_message_data: Option<mod_typ::ReminderMessageDataType>,
        #[yaserde(prefix = "typ", rename = "MessageSafety")]
        pub message_safety: Option<mod_typ::MessageSafetyType>,
        #[yaserde(prefix = "typ", rename = "SenderSMTPAddress")]
        pub sender_smtp_address: Option<mod_typ::SmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "MailboxGuids")]
        pub mailbox_guids: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemIcs")]
        pub published_calendar_item_ics: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemName")]
        pub published_calendar_item_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "SharingMessageAction")]
        pub sharing_message_action: Option<mod_typ::SharingMessageActionType>,
        #[yaserde(prefix = "typ", rename = "SharingMessageActions")]
        pub sharing_message_actions: Option<mod_typ::ArrayOfSharingMessageActionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfSharingMessageActionType")]
    pub struct ArrayOfSharingMessageActionType {
        #[yaserde(prefix = "typ", rename = "SharingMessageAction")]
        pub sharing_message_action: Option<mod_typ::SharingMessageActionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SharingMessageActionType")]
    pub struct SharingMessageActionType {
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::SharingActionImportance>,
        #[yaserde(prefix = "typ", rename = "ActionType")]
        pub action_type: Option<mod_typ::SharingActionType>,
        #[yaserde(prefix = "typ", rename = "Action")]
        pub action: Option<mod_typ::SharingAction>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SharingActionImportance")]
    pub struct SharingActionImportance {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SharingAction")]
    pub struct SharingAction {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SharingActionType")]
    pub struct SharingActionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BasePagingType")]
    pub struct BasePagingType {
        #[yaserde(prefix = "typ", rename = "MaxEntriesReturned", attribute = true)]
        pub max_entries_returned: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "IndexBasePointType")]
    pub struct IndexBasePointType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "IndexedPageViewType")]
    pub struct IndexedPageViewType {
        #[yaserde(prefix = "typ", rename = "MaxEntriesReturned", attribute = true)]
        pub max_entries_returned: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FractionalPageViewType")]
    pub struct FractionalPageViewType {
        #[yaserde(prefix = "typ", rename = "MaxEntriesReturned", attribute = true)]
        pub max_entries_returned: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SeekToConditionPageViewType")]
    pub struct SeekToConditionPageViewType {
        #[yaserde(prefix = "typ", rename = "MaxEntriesReturned", attribute = true)]
        pub max_entries_returned: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Condition")]
        pub condition: mod_typ::RestrictionType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CalendarViewType")]
    pub struct CalendarViewType {
        #[yaserde(prefix = "typ", rename = "MaxEntriesReturned", attribute = true)]
        pub max_entries_returned: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContactsViewType")]
    pub struct ContactsViewType {
        #[yaserde(prefix = "typ", rename = "MaxEntriesReturned", attribute = true)]
        pub max_entries_returned: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ResolveNamesSearchScopeType")]
    pub struct ResolveNamesSearchScopeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ResolutionType")]
    pub struct ResolutionType {
        #[yaserde(prefix = "typ", rename = "Mailbox")]
        pub mailbox: mod_typ::EmailAddressType,
        #[yaserde(prefix = "typ", rename = "Contact")]
        pub contact: Option<mod_typ::ContactItemType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfResolutionType")]
    pub struct ArrayOfResolutionType {
        #[yaserde(prefix = "typ", rename = "Resolution")]
        pub resolution: Option<mod_typ::ResolutionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfDLExpansionType")]
    pub struct ArrayOfDLExpansionType {
        #[yaserde(prefix = "typ", rename = "Mailbox")]
        pub mailbox: Vec<mod_typ::EmailAddressType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfTimeZoneIdType")]
    pub struct NonEmptyArrayOfTimeZoneIdType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: Vec<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfTimeZoneDefinitionType")]
    pub struct ArrayOfTimeZoneDefinitionType {
        #[yaserde(prefix = "typ", rename = "TimeZoneDefinition")]
        pub time_zone_definition: Vec<mod_typ::TimeZoneDefinitionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingRequestTypeType")]
    pub struct MeetingRequestTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ReminderMinutesBeforeStartType")]
    pub struct ReminderMinutesBeforeStartType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AvailabilityStatusType")]
    pub struct AvailabilityStatusType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "LegacyFreeBusyType")]
    pub struct LegacyFreeBusyType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CalendarItemTypeType")]
    pub struct CalendarItemTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ResponseTypeType")]
    pub struct ResponseTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OnlineMeetingSettingsType")]
    pub struct OnlineMeetingSettingsType {
        #[yaserde(prefix = "typ", rename = "LobbyBypass")]
        pub lobby_bypass: mod_typ::LobbyBypassType,
        #[yaserde(prefix = "typ", rename = "AccessLevel")]
        pub access_level: mod_typ::OnlineMeetingAccessLevelType,
        #[yaserde(prefix = "typ", rename = "Presenters")]
        pub presenters: mod_typ::PresentersType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "LobbyBypassType")]
    pub struct LobbyBypassType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OnlineMeetingAccessLevelType")]
    pub struct OnlineMeetingAccessLevelType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PresentersType")]
    pub struct PresentersType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AttendeeType")]
    pub struct AttendeeType {
        #[yaserde(prefix = "typ", rename = "Mailbox")]
        pub mailbox: mod_typ::EmailAddressType,
        #[yaserde(prefix = "typ", rename = "ResponseType")]
        pub response_type: Option<mod_typ::ResponseTypeType>,
        #[yaserde(prefix = "typ", rename = "LastResponseTime")]
        pub last_response_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProposedStart")]
        pub proposed_start: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProposedEnd")]
        pub proposed_end: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfAttendeesType")]
    pub struct NonEmptyArrayOfAttendeesType {
        #[yaserde(prefix = "typ", rename = "Attendee")]
        pub attendee: Vec<mod_typ::AttendeeType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OccurrenceItemIdType")]
    pub struct OccurrenceItemIdType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RecurringMasterItemIdType")]
    pub struct RecurringMasterItemIdType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RecurringMasterItemIdRangesType")]
    pub struct RecurringMasterItemIdRangesType {
        #[yaserde(prefix = "typ", rename = "Ranges")]
        pub ranges: Option<mod_typ::ArrayOfOccurrenceRangesType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfOccurrenceRangesType")]
    pub struct ArrayOfOccurrenceRangesType {
        #[yaserde(prefix = "typ", rename = "Range")]
        pub range: Vec<mod_typ::OccurrencesRangeType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OccurrencesRangeType")]
    pub struct OccurrencesRangeType {
        #[yaserde(prefix = "typ", rename = "Start", attribute = true)]
        pub start: Option<String>,
        #[yaserde(prefix = "typ", rename = "End", attribute = true)]
        pub end: Option<String>,
        #[yaserde(prefix = "typ", rename = "Count", attribute = true)]
        pub count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "CompareOriginalStartTime", attribute = true)]
        pub compare_original_start_time: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DayOfWeekType")]
    pub struct DayOfWeekType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DaysOfWeekType")]
    pub struct DaysOfWeekType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DayOfWeekIndexType")]
    pub struct DayOfWeekIndexType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MonthNamesType")]
    pub struct MonthNamesType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RecurrencePatternBaseType")]
    pub struct RecurrencePatternBaseType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "IntervalRecurrencePatternBaseType")]
    pub struct IntervalRecurrencePatternBaseType {
        #[yaserde(prefix = "typ", rename = "Interval")]
        pub interval: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RegeneratingPatternBaseType")]
    pub struct RegeneratingPatternBaseType {
        #[yaserde(prefix = "typ", rename = "Interval")]
        pub interval: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DailyRegeneratingPatternType")]
    pub struct DailyRegeneratingPatternType {
        #[yaserde(prefix = "typ", rename = "Interval")]
        pub interval: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "WeeklyRegeneratingPatternType")]
    pub struct WeeklyRegeneratingPatternType {
        #[yaserde(prefix = "typ", rename = "Interval")]
        pub interval: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MonthlyRegeneratingPatternType")]
    pub struct MonthlyRegeneratingPatternType {
        #[yaserde(prefix = "typ", rename = "Interval")]
        pub interval: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "YearlyRegeneratingPatternType")]
    pub struct YearlyRegeneratingPatternType {
        #[yaserde(prefix = "typ", rename = "Interval")]
        pub interval: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RelativeYearlyRecurrencePatternType")]
    pub struct RelativeYearlyRecurrencePatternType {
        #[yaserde(prefix = "typ", rename = "DaysOfWeek")]
        pub days_of_week: mod_typ::DayOfWeekType,
        #[yaserde(prefix = "typ", rename = "DayOfWeekIndex")]
        pub day_of_week_index: mod_typ::DayOfWeekIndexType,
        #[yaserde(prefix = "typ", rename = "Month")]
        pub month: mod_typ::MonthNamesType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AbsoluteYearlyRecurrencePatternType")]
    pub struct AbsoluteYearlyRecurrencePatternType {
        #[yaserde(prefix = "typ", rename = "DayOfMonth")]
        pub day_of_month: i32,
        #[yaserde(prefix = "typ", rename = "Month")]
        pub month: mod_typ::MonthNamesType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RelativeMonthlyRecurrencePatternType")]
    pub struct RelativeMonthlyRecurrencePatternType {
        #[yaserde(prefix = "typ", rename = "Interval")]
        pub interval: i32,
        #[yaserde(prefix = "typ", rename = "DaysOfWeek")]
        pub days_of_week: mod_typ::DayOfWeekType,
        #[yaserde(prefix = "typ", rename = "DayOfWeekIndex")]
        pub day_of_week_index: mod_typ::DayOfWeekIndexType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AbsoluteMonthlyRecurrencePatternType")]
    pub struct AbsoluteMonthlyRecurrencePatternType {
        #[yaserde(prefix = "typ", rename = "Interval")]
        pub interval: i32,
        #[yaserde(prefix = "typ", rename = "DayOfMonth")]
        pub day_of_month: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "WeeklyRecurrencePatternType")]
    pub struct WeeklyRecurrencePatternType {
        #[yaserde(prefix = "typ", rename = "Interval")]
        pub interval: i32,
        #[yaserde(prefix = "typ", rename = "DaysOfWeek")]
        pub days_of_week: mod_typ::DaysOfWeekType,
        #[yaserde(prefix = "typ", rename = "FirstDayOfWeek")]
        pub first_day_of_week: Option<mod_typ::DayOfWeekType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DailyRecurrencePatternType")]
    pub struct DailyRecurrencePatternType {
        #[yaserde(prefix = "typ", rename = "Interval")]
        pub interval: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "LocationSourceType")]
    pub struct LocationSourceType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EnhancedLocationType")]
    pub struct EnhancedLocationType {
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: String,
        #[yaserde(prefix = "typ", rename = "Annotation")]
        pub annotation: Option<String>,
        #[yaserde(prefix = "typ", rename = "PostalAddress")]
        pub postal_address: Option<mod_typ::PersonaPostalAddressType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TimeChangePatternTypes")]
    pub struct TimeChangePatternTypes {
        #[yaserde(prefix = "typ", rename = "RelativeYearlyRecurrence")]
        pub relative_yearly_recurrence: mod_typ::RelativeYearlyRecurrencePatternType,
        #[yaserde(prefix = "typ", rename = "AbsoluteDate")]
        pub absolute_date: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TimeChangeType")]
    pub struct TimeChangeType {
        #[yaserde(prefix = "typ", rename = "Offset")]
        pub offset: String,
        #[yaserde(rename = "TimeChangePatternTypes")]
        pub time_change_pattern_types: Option<mod_typ::TimeChangePatternTypes>,
        #[yaserde(prefix = "typ", rename = "Time")]
        pub time: String,
        #[yaserde(prefix = "typ", rename = "TimeZoneName", attribute = true)]
        pub time_zone_name: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TimeZoneType")]
    pub struct TimeZoneType {
        #[yaserde(prefix = "typ", rename = "BaseOffset")]
        pub base_offset: Option<String>,
        #[yaserde(prefix = "typ", rename = "Standard")]
        pub standard: Option<mod_typ::TimeChangeType>,
        #[yaserde(prefix = "typ", rename = "Daylight")]
        pub daylight: Option<mod_typ::TimeChangeType>,
        #[yaserde(prefix = "typ", rename = "TimeZoneName", attribute = true)]
        pub time_zone_name: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TimeZoneContextType")]
    pub struct TimeZoneContextType {
        #[yaserde(prefix = "typ", rename = "TimeZoneDefinition")]
        pub time_zone_definition: mod_typ::TimeZoneDefinitionType,
    }
    pub type TimeZoneContext = mod_typ::TimeZoneContextType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TransitionTargetKindType")]
    pub struct TransitionTargetKindType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TransitionTargetType")]
    pub struct TransitionTargetType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TransitionType")]
    pub struct TransitionType {
        #[yaserde(prefix = "typ", rename = "To")]
        pub to: mod_typ::TransitionTargetType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AbsoluteDateTransitionType")]
    pub struct AbsoluteDateTransitionType {
        #[yaserde(prefix = "typ", rename = "To")]
        pub to: mod_typ::TransitionTargetType,
        #[yaserde(prefix = "typ", rename = "DateTime")]
        pub date_time: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RecurringTimeTransitionType")]
    pub struct RecurringTimeTransitionType {
        #[yaserde(prefix = "typ", rename = "To")]
        pub to: mod_typ::TransitionTargetType,
        #[yaserde(prefix = "typ", rename = "TimeOffset")]
        pub time_offset: String,
        #[yaserde(prefix = "typ", rename = "Month")]
        pub month: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RecurringDateTransitionType")]
    pub struct RecurringDateTransitionType {
        #[yaserde(prefix = "typ", rename = "To")]
        pub to: mod_typ::TransitionTargetType,
        #[yaserde(prefix = "typ", rename = "TimeOffset")]
        pub time_offset: String,
        #[yaserde(prefix = "typ", rename = "Month")]
        pub month: i32,
        #[yaserde(prefix = "typ", rename = "Day")]
        pub day: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RecurringDayTransitionType")]
    pub struct RecurringDayTransitionType {
        #[yaserde(prefix = "typ", rename = "To")]
        pub to: mod_typ::TransitionTargetType,
        #[yaserde(prefix = "typ", rename = "TimeOffset")]
        pub time_offset: String,
        #[yaserde(prefix = "typ", rename = "Month")]
        pub month: i32,
        #[yaserde(prefix = "typ", rename = "DayOfWeek")]
        pub day_of_week: mod_typ::DayOfWeekType,
        #[yaserde(prefix = "typ", rename = "Occurrence")]
        pub occurrence: i32,
    }
    pub type Transition = mod_typ::TransitionType;
    pub type AbsoluteDateTransition = mod_typ::AbsoluteDateTransitionType;
    pub type RecurringDayTransition = mod_typ::RecurringDayTransitionType;
    pub type RecurringDateTransition = mod_typ::RecurringDateTransitionType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TimeZoneDefinitionType")]
    pub struct TimeZoneDefinitionType {
        #[yaserde(prefix = "typ", rename = "Periods")]
        pub periods: Option<mod_typ::NonEmptyArrayOfPeriodsType>,
        #[yaserde(prefix = "typ", rename = "TransitionsGroups")]
        pub transitions_groups: Option<mod_typ::ArrayOfTransitionsGroupsType>,
        #[yaserde(prefix = "typ", rename = "Transitions")]
        pub transitions: Option<mod_typ::ArrayOfTransitionsType>,
        #[yaserde(prefix = "typ", rename = "Id", attribute = true)]
        pub id: Option<String>,
        #[yaserde(prefix = "typ", rename = "Name", attribute = true)]
        pub name: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfPeriodsType")]
    pub struct NonEmptyArrayOfPeriodsType {
        #[yaserde(prefix = "typ", rename = "Period")]
        pub period: Vec<mod_typ::PeriodType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PeriodType")]
    pub struct PeriodType {
        #[yaserde(prefix = "typ", rename = "Bias", attribute = true)]
        pub bias: Option<String>,
        #[yaserde(prefix = "typ", rename = "Name", attribute = true)]
        pub name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Id", attribute = true)]
        pub id: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfTransitionsGroupsType")]
    pub struct ArrayOfTransitionsGroupsType {
        #[yaserde(prefix = "typ", rename = "TransitionsGroup")]
        pub transitions_group: Vec<mod_typ::ArrayOfTransitionsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfTransitionsType")]
    pub struct ArrayOfTransitionsType {
        #[yaserde(rename = "Transition")]
        pub transition: Vec<mod_typ::Transition>,
        #[yaserde(prefix = "typ", rename = "Id", attribute = true)]
        pub id: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RecurrenceRangeBaseType")]
    pub struct RecurrenceRangeBaseType {
        #[yaserde(prefix = "typ", rename = "StartDate")]
        pub start_date: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NoEndRecurrenceRangeType")]
    pub struct NoEndRecurrenceRangeType {
        #[yaserde(prefix = "typ", rename = "StartDate")]
        pub start_date: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EndDateRecurrenceRangeType")]
    pub struct EndDateRecurrenceRangeType {
        #[yaserde(prefix = "typ", rename = "StartDate")]
        pub start_date: String,
        #[yaserde(prefix = "typ", rename = "EndDate")]
        pub end_date: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NumberedRecurrenceRangeType")]
    pub struct NumberedRecurrenceRangeType {
        #[yaserde(prefix = "typ", rename = "StartDate")]
        pub start_date: String,
        #[yaserde(prefix = "typ", rename = "NumberOfOccurrences")]
        pub number_of_occurrences: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RecurrencePatternTypes")]
    pub struct RecurrencePatternTypes {
        #[yaserde(prefix = "typ", rename = "RelativeYearlyRecurrence")]
        pub relative_yearly_recurrence: mod_typ::RelativeYearlyRecurrencePatternType,
        #[yaserde(prefix = "typ", rename = "AbsoluteYearlyRecurrence")]
        pub absolute_yearly_recurrence: mod_typ::AbsoluteYearlyRecurrencePatternType,
        #[yaserde(prefix = "typ", rename = "RelativeMonthlyRecurrence")]
        pub relative_monthly_recurrence: mod_typ::RelativeMonthlyRecurrencePatternType,
        #[yaserde(prefix = "typ", rename = "AbsoluteMonthlyRecurrence")]
        pub absolute_monthly_recurrence: mod_typ::AbsoluteMonthlyRecurrencePatternType,
        #[yaserde(prefix = "typ", rename = "WeeklyRecurrence")]
        pub weekly_recurrence: mod_typ::WeeklyRecurrencePatternType,
        #[yaserde(prefix = "typ", rename = "DailyRecurrence")]
        pub daily_recurrence: mod_typ::DailyRecurrencePatternType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TaskRecurrencePatternTypes")]
    pub struct TaskRecurrencePatternTypes {
        #[yaserde(prefix = "typ", rename = "RelativeYearlyRecurrence")]
        pub relative_yearly_recurrence: mod_typ::RelativeYearlyRecurrencePatternType,
        #[yaserde(prefix = "typ", rename = "AbsoluteYearlyRecurrence")]
        pub absolute_yearly_recurrence: mod_typ::AbsoluteYearlyRecurrencePatternType,
        #[yaserde(prefix = "typ", rename = "RelativeMonthlyRecurrence")]
        pub relative_monthly_recurrence: mod_typ::RelativeMonthlyRecurrencePatternType,
        #[yaserde(prefix = "typ", rename = "AbsoluteMonthlyRecurrence")]
        pub absolute_monthly_recurrence: mod_typ::AbsoluteMonthlyRecurrencePatternType,
        #[yaserde(prefix = "typ", rename = "WeeklyRecurrence")]
        pub weekly_recurrence: mod_typ::WeeklyRecurrencePatternType,
        #[yaserde(prefix = "typ", rename = "DailyRecurrence")]
        pub daily_recurrence: mod_typ::DailyRecurrencePatternType,
        #[yaserde(prefix = "typ", rename = "DailyRegeneration")]
        pub daily_regeneration: mod_typ::DailyRegeneratingPatternType,
        #[yaserde(prefix = "typ", rename = "WeeklyRegeneration")]
        pub weekly_regeneration: mod_typ::WeeklyRegeneratingPatternType,
        #[yaserde(prefix = "typ", rename = "MonthlyRegeneration")]
        pub monthly_regeneration: mod_typ::MonthlyRegeneratingPatternType,
        #[yaserde(prefix = "typ", rename = "YearlyRegeneration")]
        pub yearly_regeneration: mod_typ::YearlyRegeneratingPatternType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RecurrenceRangeTypes")]
    pub struct RecurrenceRangeTypes {
        #[yaserde(prefix = "typ", rename = "NoEndRecurrence")]
        pub no_end_recurrence: mod_typ::NoEndRecurrenceRangeType,
        #[yaserde(prefix = "typ", rename = "EndDateRecurrence")]
        pub end_date_recurrence: mod_typ::EndDateRecurrenceRangeType,
        #[yaserde(prefix = "typ", rename = "NumberedRecurrence")]
        pub numbered_recurrence: mod_typ::NumberedRecurrenceRangeType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RecurrenceType")]
    pub struct RecurrenceType {
        #[yaserde(rename = "RecurrencePatternTypes")]
        pub recurrence_pattern_types: mod_typ::RecurrencePatternTypes,
        #[yaserde(rename = "RecurrenceRangeTypes")]
        pub recurrence_range_types: mod_typ::RecurrenceRangeTypes,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TaskRecurrenceType")]
    pub struct TaskRecurrenceType {
        #[yaserde(rename = "TaskRecurrencePatternTypes")]
        pub task_recurrence_pattern_types: mod_typ::TaskRecurrencePatternTypes,
        #[yaserde(rename = "RecurrenceRangeTypes")]
        pub recurrence_range_types: mod_typ::RecurrenceRangeTypes,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OccurrenceInfoType")]
    pub struct OccurrenceInfoType {
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "Start")]
        pub start: String,
        #[yaserde(prefix = "typ", rename = "End")]
        pub end: String,
        #[yaserde(prefix = "typ", rename = "OriginalStart")]
        pub original_start: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfOccurrenceInfoType")]
    pub struct NonEmptyArrayOfOccurrenceInfoType {
        #[yaserde(prefix = "typ", rename = "Occurrence")]
        pub occurrence: Vec<mod_typ::OccurrenceInfoType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DeletedOccurrenceInfoType")]
    pub struct DeletedOccurrenceInfoType {
        #[yaserde(prefix = "typ", rename = "Start")]
        pub start: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfDeletedOccurrencesType")]
    pub struct NonEmptyArrayOfDeletedOccurrencesType {
        #[yaserde(prefix = "typ", rename = "DeletedOccurrence")]
        pub deleted_occurrence: Vec<mod_typ::DeletedOccurrenceInfoType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CalendarItemType")]
    pub struct CalendarItemType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "UID")]
        pub uid: Option<String>,
        #[yaserde(prefix = "typ", rename = "RecurrenceId")]
        pub recurrence_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeStamp")]
        pub date_time_stamp: Option<String>,
        #[yaserde(prefix = "typ", rename = "Start")]
        pub start: Option<String>,
        #[yaserde(prefix = "typ", rename = "End")]
        pub end: Option<String>,
        #[yaserde(prefix = "typ", rename = "OriginalStart")]
        pub original_start: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAllDayEvent")]
        pub is_all_day_event: Option<bool>,
        #[yaserde(prefix = "typ", rename = "LegacyFreeBusyStatus")]
        pub legacy_free_busy_status: Option<mod_typ::LegacyFreeBusyType>,
        #[yaserde(prefix = "typ", rename = "Location")]
        pub location: Option<String>,
        #[yaserde(prefix = "typ", rename = "When")]
        pub when: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsMeeting")]
        pub is_meeting: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsCancelled")]
        pub is_cancelled: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsRecurring")]
        pub is_recurring: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MeetingRequestWasSent")]
        pub meeting_request_was_sent: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResponseRequested")]
        pub is_response_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CalendarItemType")]
        pub calendar_item_type: Option<mod_typ::CalendarItemTypeType>,
        #[yaserde(prefix = "typ", rename = "MyResponseType")]
        pub my_response_type: Option<mod_typ::ResponseTypeType>,
        #[yaserde(prefix = "typ", rename = "Organizer")]
        pub organizer: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "RequiredAttendees")]
        pub required_attendees: Option<mod_typ::NonEmptyArrayOfAttendeesType>,
        #[yaserde(prefix = "typ", rename = "OptionalAttendees")]
        pub optional_attendees: Option<mod_typ::NonEmptyArrayOfAttendeesType>,
        #[yaserde(prefix = "typ", rename = "Resources")]
        pub resources: Option<mod_typ::NonEmptyArrayOfAttendeesType>,
        #[yaserde(prefix = "typ", rename = "InboxReminders")]
        pub inbox_reminders: Option<mod_typ::ArrayOfInboxReminderType>,
        #[yaserde(prefix = "typ", rename = "ConflictingMeetingCount")]
        pub conflicting_meeting_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "AdjacentMeetingCount")]
        pub adjacent_meeting_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ConflictingMeetings")]
        pub conflicting_meetings: Option<mod_typ::NonEmptyArrayOfAllItemsType>,
        #[yaserde(prefix = "typ", rename = "AdjacentMeetings")]
        pub adjacent_meetings: Option<mod_typ::NonEmptyArrayOfAllItemsType>,
        #[yaserde(prefix = "typ", rename = "Duration")]
        pub duration: Option<String>,
        #[yaserde(prefix = "typ", rename = "TimeZone")]
        pub time_zone: Option<String>,
        #[yaserde(prefix = "typ", rename = "AppointmentReplyTime")]
        pub appointment_reply_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "AppointmentSequenceNumber")]
        pub appointment_sequence_number: Option<i32>,
        #[yaserde(prefix = "typ", rename = "AppointmentState")]
        pub appointment_state: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Recurrence")]
        pub recurrence: Option<mod_typ::RecurrenceType>,
        #[yaserde(prefix = "typ", rename = "FirstOccurrence")]
        pub first_occurrence: Option<mod_typ::OccurrenceInfoType>,
        #[yaserde(prefix = "typ", rename = "LastOccurrence")]
        pub last_occurrence: Option<mod_typ::OccurrenceInfoType>,
        #[yaserde(prefix = "typ", rename = "ModifiedOccurrences")]
        pub modified_occurrences: Option<mod_typ::NonEmptyArrayOfOccurrenceInfoType>,
        #[yaserde(prefix = "typ", rename = "DeletedOccurrences")]
        pub deleted_occurrences: Option<mod_typ::NonEmptyArrayOfDeletedOccurrencesType>,
        #[yaserde(prefix = "typ", rename = "MeetingTimeZone")]
        pub meeting_time_zone: Option<mod_typ::TimeZoneType>,
        #[yaserde(prefix = "typ", rename = "StartTimeZone")]
        pub start_time_zone: Option<mod_typ::TimeZoneDefinitionType>,
        #[yaserde(prefix = "typ", rename = "EndTimeZone")]
        pub end_time_zone: Option<mod_typ::TimeZoneDefinitionType>,
        #[yaserde(prefix = "typ", rename = "ConferenceType")]
        pub conference_type: Option<i32>,
        #[yaserde(prefix = "typ", rename = "AllowNewTimeProposal")]
        pub allow_new_time_proposal: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsOnlineMeeting")]
        pub is_online_meeting: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MeetingWorkspaceUrl")]
        pub meeting_workspace_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "NetShowUrl")]
        pub net_show_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "EnhancedLocation")]
        pub enhanced_location: Option<mod_typ::EnhancedLocationType>,
        #[yaserde(prefix = "typ", rename = "StartWallClock")]
        pub start_wall_clock: Option<String>,
        #[yaserde(prefix = "typ", rename = "EndWallClock")]
        pub end_wall_clock: Option<String>,
        #[yaserde(prefix = "typ", rename = "StartTimeZoneId")]
        pub start_time_zone_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "EndTimeZoneId")]
        pub end_time_zone_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "IntendedFreeBusyStatus")]
        pub intended_free_busy_status: Option<mod_typ::LegacyFreeBusyType>,
        #[yaserde(prefix = "typ", rename = "JoinOnlineMeetingUrl")]
        pub join_online_meeting_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "OnlineMeetingSettings")]
        pub online_meeting_settings: Option<mod_typ::OnlineMeetingSettingsType>,
        #[yaserde(prefix = "typ", rename = "IsOrganizer")]
        pub is_organizer: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CalendarActivityData")]
        pub calendar_activity_data: Option<mod_typ::CalendarActivityDataType>,
        #[yaserde(prefix = "typ", rename = "DoNotForwardMeeting")]
        pub do_not_forward_meeting: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingMessageType")]
    pub struct MeetingMessageType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "Sender")]
        pub sender: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ToRecipients")]
        pub to_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "CcRecipients")]
        pub cc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "BccRecipients")]
        pub bcc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "IsReadReceiptRequested")]
        pub is_read_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDeliveryReceiptRequested")]
        pub is_delivery_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConversationIndex")]
        pub conversation_index: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationTopic")]
        pub conversation_topic: Option<String>,
        #[yaserde(prefix = "typ", rename = "From")]
        pub from: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "InternetMessageId")]
        pub internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResponseRequested")]
        pub is_response_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "References")]
        pub references: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReplyTo")]
        pub reply_to: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "ReceivedBy")]
        pub received_by: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ReceivedRepresenting")]
        pub received_representing: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ApprovalRequestData")]
        pub approval_request_data: Option<mod_typ::ApprovalRequestDataType>,
        #[yaserde(prefix = "typ", rename = "VotingInformation")]
        pub voting_information: Option<mod_typ::VotingInformationType>,
        #[yaserde(prefix = "typ", rename = "ReminderMessageData")]
        pub reminder_message_data: Option<mod_typ::ReminderMessageDataType>,
        #[yaserde(prefix = "typ", rename = "MessageSafety")]
        pub message_safety: Option<mod_typ::MessageSafetyType>,
        #[yaserde(prefix = "typ", rename = "SenderSMTPAddress")]
        pub sender_smtp_address: Option<mod_typ::SmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "MailboxGuids")]
        pub mailbox_guids: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemIcs")]
        pub published_calendar_item_ics: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemName")]
        pub published_calendar_item_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "AssociatedCalendarItemId")]
        pub associated_calendar_item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "IsDelegated")]
        pub is_delegated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsOutOfDate")]
        pub is_out_of_date: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBeenProcessed")]
        pub has_been_processed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ResponseType")]
        pub response_type: Option<mod_typ::ResponseTypeType>,
        #[yaserde(prefix = "typ", rename = "UID")]
        pub uid: Option<String>,
        #[yaserde(prefix = "typ", rename = "RecurrenceId")]
        pub recurrence_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeStamp")]
        pub date_time_stamp: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsOrganizer")]
        pub is_organizer: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ChangeHighlightsType")]
    pub struct ChangeHighlightsType {
        #[yaserde(prefix = "typ", rename = "HasLocationChanged")]
        pub has_location_changed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Location")]
        pub location: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasStartTimeChanged")]
        pub has_start_time_changed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Start")]
        pub start: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasEndTimeChanged")]
        pub has_end_time_changed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "End")]
        pub end: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingRequestMessageType")]
    pub struct MeetingRequestMessageType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "Sender")]
        pub sender: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ToRecipients")]
        pub to_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "CcRecipients")]
        pub cc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "BccRecipients")]
        pub bcc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "IsReadReceiptRequested")]
        pub is_read_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDeliveryReceiptRequested")]
        pub is_delivery_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConversationIndex")]
        pub conversation_index: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationTopic")]
        pub conversation_topic: Option<String>,
        #[yaserde(prefix = "typ", rename = "From")]
        pub from: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "InternetMessageId")]
        pub internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResponseRequested")]
        pub is_response_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "References")]
        pub references: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReplyTo")]
        pub reply_to: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "ReceivedBy")]
        pub received_by: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ReceivedRepresenting")]
        pub received_representing: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ApprovalRequestData")]
        pub approval_request_data: Option<mod_typ::ApprovalRequestDataType>,
        #[yaserde(prefix = "typ", rename = "VotingInformation")]
        pub voting_information: Option<mod_typ::VotingInformationType>,
        #[yaserde(prefix = "typ", rename = "ReminderMessageData")]
        pub reminder_message_data: Option<mod_typ::ReminderMessageDataType>,
        #[yaserde(prefix = "typ", rename = "MessageSafety")]
        pub message_safety: Option<mod_typ::MessageSafetyType>,
        #[yaserde(prefix = "typ", rename = "SenderSMTPAddress")]
        pub sender_smtp_address: Option<mod_typ::SmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "MailboxGuids")]
        pub mailbox_guids: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemIcs")]
        pub published_calendar_item_ics: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemName")]
        pub published_calendar_item_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "AssociatedCalendarItemId")]
        pub associated_calendar_item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "IsDelegated")]
        pub is_delegated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsOutOfDate")]
        pub is_out_of_date: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBeenProcessed")]
        pub has_been_processed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ResponseType")]
        pub response_type: Option<mod_typ::ResponseTypeType>,
        #[yaserde(prefix = "typ", rename = "UID")]
        pub uid: Option<String>,
        #[yaserde(prefix = "typ", rename = "RecurrenceId")]
        pub recurrence_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeStamp")]
        pub date_time_stamp: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsOrganizer")]
        pub is_organizer: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MeetingRequestType")]
        pub meeting_request_type: Option<mod_typ::MeetingRequestTypeType>,
        #[yaserde(prefix = "typ", rename = "IntendedFreeBusyStatus")]
        pub intended_free_busy_status: Option<mod_typ::LegacyFreeBusyType>,
        #[yaserde(prefix = "typ", rename = "Start")]
        pub start: Option<String>,
        #[yaserde(prefix = "typ", rename = "End")]
        pub end: Option<String>,
        #[yaserde(prefix = "typ", rename = "OriginalStart")]
        pub original_start: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAllDayEvent")]
        pub is_all_day_event: Option<bool>,
        #[yaserde(prefix = "typ", rename = "LegacyFreeBusyStatus")]
        pub legacy_free_busy_status: Option<mod_typ::LegacyFreeBusyType>,
        #[yaserde(prefix = "typ", rename = "Location")]
        pub location: Option<String>,
        #[yaserde(prefix = "typ", rename = "When")]
        pub when: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsMeeting")]
        pub is_meeting: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsCancelled")]
        pub is_cancelled: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsRecurring")]
        pub is_recurring: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MeetingRequestWasSent")]
        pub meeting_request_was_sent: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CalendarItemType")]
        pub calendar_item_type: Option<mod_typ::CalendarItemTypeType>,
        #[yaserde(prefix = "typ", rename = "MyResponseType")]
        pub my_response_type: Option<mod_typ::ResponseTypeType>,
        #[yaserde(prefix = "typ", rename = "Organizer")]
        pub organizer: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "RequiredAttendees")]
        pub required_attendees: Option<mod_typ::NonEmptyArrayOfAttendeesType>,
        #[yaserde(prefix = "typ", rename = "OptionalAttendees")]
        pub optional_attendees: Option<mod_typ::NonEmptyArrayOfAttendeesType>,
        #[yaserde(prefix = "typ", rename = "Resources")]
        pub resources: Option<mod_typ::NonEmptyArrayOfAttendeesType>,
        #[yaserde(prefix = "typ", rename = "ConflictingMeetingCount")]
        pub conflicting_meeting_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "AdjacentMeetingCount")]
        pub adjacent_meeting_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ConflictingMeetings")]
        pub conflicting_meetings: Option<mod_typ::NonEmptyArrayOfAllItemsType>,
        #[yaserde(prefix = "typ", rename = "AdjacentMeetings")]
        pub adjacent_meetings: Option<mod_typ::NonEmptyArrayOfAllItemsType>,
        #[yaserde(prefix = "typ", rename = "Duration")]
        pub duration: Option<String>,
        #[yaserde(prefix = "typ", rename = "TimeZone")]
        pub time_zone: Option<String>,
        #[yaserde(prefix = "typ", rename = "AppointmentReplyTime")]
        pub appointment_reply_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "AppointmentSequenceNumber")]
        pub appointment_sequence_number: Option<i32>,
        #[yaserde(prefix = "typ", rename = "AppointmentState")]
        pub appointment_state: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Recurrence")]
        pub recurrence: Option<mod_typ::RecurrenceType>,
        #[yaserde(prefix = "typ", rename = "FirstOccurrence")]
        pub first_occurrence: Option<mod_typ::OccurrenceInfoType>,
        #[yaserde(prefix = "typ", rename = "LastOccurrence")]
        pub last_occurrence: Option<mod_typ::OccurrenceInfoType>,
        #[yaserde(prefix = "typ", rename = "ModifiedOccurrences")]
        pub modified_occurrences: Option<mod_typ::NonEmptyArrayOfOccurrenceInfoType>,
        #[yaserde(prefix = "typ", rename = "DeletedOccurrences")]
        pub deleted_occurrences: Option<mod_typ::NonEmptyArrayOfDeletedOccurrencesType>,
        #[yaserde(prefix = "typ", rename = "MeetingTimeZone")]
        pub meeting_time_zone: Option<mod_typ::TimeZoneType>,
        #[yaserde(prefix = "typ", rename = "StartTimeZone")]
        pub start_time_zone: Option<mod_typ::TimeZoneDefinitionType>,
        #[yaserde(prefix = "typ", rename = "EndTimeZone")]
        pub end_time_zone: Option<mod_typ::TimeZoneDefinitionType>,
        #[yaserde(prefix = "typ", rename = "ConferenceType")]
        pub conference_type: Option<i32>,
        #[yaserde(prefix = "typ", rename = "AllowNewTimeProposal")]
        pub allow_new_time_proposal: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsOnlineMeeting")]
        pub is_online_meeting: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MeetingWorkspaceUrl")]
        pub meeting_workspace_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "NetShowUrl")]
        pub net_show_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "EnhancedLocation")]
        pub enhanced_location: Option<mod_typ::EnhancedLocationType>,
        #[yaserde(prefix = "typ", rename = "ChangeHighlights")]
        pub change_highlights: Option<mod_typ::ChangeHighlightsType>,
        #[yaserde(prefix = "typ", rename = "StartWallClock")]
        pub start_wall_clock: Option<String>,
        #[yaserde(prefix = "typ", rename = "EndWallClock")]
        pub end_wall_clock: Option<String>,
        #[yaserde(prefix = "typ", rename = "StartTimeZoneId")]
        pub start_time_zone_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "EndTimeZoneId")]
        pub end_time_zone_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "DoNotForwardMeeting")]
        pub do_not_forward_meeting: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingResponseMessageType")]
    pub struct MeetingResponseMessageType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "Sender")]
        pub sender: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ToRecipients")]
        pub to_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "CcRecipients")]
        pub cc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "BccRecipients")]
        pub bcc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "IsReadReceiptRequested")]
        pub is_read_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDeliveryReceiptRequested")]
        pub is_delivery_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConversationIndex")]
        pub conversation_index: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationTopic")]
        pub conversation_topic: Option<String>,
        #[yaserde(prefix = "typ", rename = "From")]
        pub from: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "InternetMessageId")]
        pub internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResponseRequested")]
        pub is_response_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "References")]
        pub references: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReplyTo")]
        pub reply_to: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "ReceivedBy")]
        pub received_by: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ReceivedRepresenting")]
        pub received_representing: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ApprovalRequestData")]
        pub approval_request_data: Option<mod_typ::ApprovalRequestDataType>,
        #[yaserde(prefix = "typ", rename = "VotingInformation")]
        pub voting_information: Option<mod_typ::VotingInformationType>,
        #[yaserde(prefix = "typ", rename = "ReminderMessageData")]
        pub reminder_message_data: Option<mod_typ::ReminderMessageDataType>,
        #[yaserde(prefix = "typ", rename = "MessageSafety")]
        pub message_safety: Option<mod_typ::MessageSafetyType>,
        #[yaserde(prefix = "typ", rename = "SenderSMTPAddress")]
        pub sender_smtp_address: Option<mod_typ::SmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "MailboxGuids")]
        pub mailbox_guids: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemIcs")]
        pub published_calendar_item_ics: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemName")]
        pub published_calendar_item_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "AssociatedCalendarItemId")]
        pub associated_calendar_item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "IsDelegated")]
        pub is_delegated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsOutOfDate")]
        pub is_out_of_date: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBeenProcessed")]
        pub has_been_processed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ResponseType")]
        pub response_type: Option<mod_typ::ResponseTypeType>,
        #[yaserde(prefix = "typ", rename = "UID")]
        pub uid: Option<String>,
        #[yaserde(prefix = "typ", rename = "RecurrenceId")]
        pub recurrence_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeStamp")]
        pub date_time_stamp: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsOrganizer")]
        pub is_organizer: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Start")]
        pub start: Option<String>,
        #[yaserde(prefix = "typ", rename = "End")]
        pub end: Option<String>,
        #[yaserde(prefix = "typ", rename = "Location")]
        pub location: Option<String>,
        #[yaserde(prefix = "typ", rename = "Recurrence")]
        pub recurrence: Option<mod_typ::RecurrenceType>,
        #[yaserde(prefix = "typ", rename = "CalendarItemType")]
        pub calendar_item_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProposedStart")]
        pub proposed_start: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProposedEnd")]
        pub proposed_end: Option<String>,
        #[yaserde(prefix = "typ", rename = "EnhancedLocation")]
        pub enhanced_location: Option<mod_typ::EnhancedLocationType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingCancellationMessageType")]
    pub struct MeetingCancellationMessageType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "Sender")]
        pub sender: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ToRecipients")]
        pub to_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "CcRecipients")]
        pub cc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "BccRecipients")]
        pub bcc_recipients: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "IsReadReceiptRequested")]
        pub is_read_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDeliveryReceiptRequested")]
        pub is_delivery_receipt_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConversationIndex")]
        pub conversation_index: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationTopic")]
        pub conversation_topic: Option<String>,
        #[yaserde(prefix = "typ", rename = "From")]
        pub from: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "InternetMessageId")]
        pub internet_message_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResponseRequested")]
        pub is_response_requested: Option<bool>,
        #[yaserde(prefix = "typ", rename = "References")]
        pub references: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReplyTo")]
        pub reply_to: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "ReceivedBy")]
        pub received_by: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ReceivedRepresenting")]
        pub received_representing: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "ApprovalRequestData")]
        pub approval_request_data: Option<mod_typ::ApprovalRequestDataType>,
        #[yaserde(prefix = "typ", rename = "VotingInformation")]
        pub voting_information: Option<mod_typ::VotingInformationType>,
        #[yaserde(prefix = "typ", rename = "ReminderMessageData")]
        pub reminder_message_data: Option<mod_typ::ReminderMessageDataType>,
        #[yaserde(prefix = "typ", rename = "MessageSafety")]
        pub message_safety: Option<mod_typ::MessageSafetyType>,
        #[yaserde(prefix = "typ", rename = "SenderSMTPAddress")]
        pub sender_smtp_address: Option<mod_typ::SmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "MailboxGuids")]
        pub mailbox_guids: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemIcs")]
        pub published_calendar_item_ics: Option<String>,
        #[yaserde(prefix = "typ", rename = "PublishedCalendarItemName")]
        pub published_calendar_item_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "AssociatedCalendarItemId")]
        pub associated_calendar_item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "IsDelegated")]
        pub is_delegated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsOutOfDate")]
        pub is_out_of_date: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBeenProcessed")]
        pub has_been_processed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ResponseType")]
        pub response_type: Option<mod_typ::ResponseTypeType>,
        #[yaserde(prefix = "typ", rename = "UID")]
        pub uid: Option<String>,
        #[yaserde(prefix = "typ", rename = "RecurrenceId")]
        pub recurrence_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeStamp")]
        pub date_time_stamp: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsOrganizer")]
        pub is_organizer: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Start")]
        pub start: Option<String>,
        #[yaserde(prefix = "typ", rename = "End")]
        pub end: Option<String>,
        #[yaserde(prefix = "typ", rename = "Location")]
        pub location: Option<String>,
        #[yaserde(prefix = "typ", rename = "Recurrence")]
        pub recurrence: Option<mod_typ::RecurrenceType>,
        #[yaserde(prefix = "typ", rename = "CalendarItemType")]
        pub calendar_item_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "EnhancedLocation")]
        pub enhanced_location: Option<mod_typ::EnhancedLocationType>,
        #[yaserde(prefix = "typ", rename = "DoNotForwardMeeting")]
        pub do_not_forward_meeting: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RoleMemberTypeType")]
    pub struct RoleMemberTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ImAddressKeyType")]
    pub struct ImAddressKeyType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmailAddressKeyType")]
    pub struct EmailAddressKeyType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AbchEmailAddressTypeType")]
    pub struct AbchEmailAddressTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContactUrlKeyType")]
    pub struct ContactUrlKeyType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PhoneNumberKeyType")]
    pub struct PhoneNumberKeyType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PhysicalAddressIndexType")]
    pub struct PhysicalAddressIndexType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PhysicalAddressKeyType")]
    pub struct PhysicalAddressKeyType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FileAsMappingType")]
    pub struct FileAsMappingType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContactSourceType")]
    pub struct ContactSourceType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CompleteNameType")]
    pub struct CompleteNameType {
        #[yaserde(prefix = "typ", rename = "Title")]
        pub title: Option<String>,
        #[yaserde(prefix = "typ", rename = "FirstName")]
        pub first_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "MiddleName")]
        pub middle_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastName")]
        pub last_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Suffix")]
        pub suffix: Option<String>,
        #[yaserde(prefix = "typ", rename = "Initials")]
        pub initials: Option<String>,
        #[yaserde(prefix = "typ", rename = "FullName")]
        pub full_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Nickname")]
        pub nickname: Option<String>,
        #[yaserde(prefix = "typ", rename = "YomiFirstName")]
        pub yomi_first_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "YomiLastName")]
        pub yomi_last_name: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ImAddressDictionaryEntryType")]
    pub struct ImAddressDictionaryEntryType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContactUrlDictionaryEntryType")]
    pub struct ContactUrlDictionaryEntryType {
        #[yaserde(prefix = "typ", rename = "Type")]
        pub r#type: mod_typ::ContactUrlKeyType,
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Address")]
        pub address: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AbchEmailAddressDictionaryEntryType")]
    pub struct AbchEmailAddressDictionaryEntryType {
        #[yaserde(prefix = "typ", rename = "Type")]
        pub r#type: mod_typ::AbchEmailAddressTypeType,
        #[yaserde(prefix = "typ", rename = "Address")]
        pub address: String,
        #[yaserde(prefix = "typ", rename = "IsMessengerEnabled")]
        pub is_messenger_enabled: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Capabilities")]
        pub capabilities: Option<i64>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmailAddressDictionaryEntryType")]
    pub struct EmailAddressDictionaryEntryType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PhoneNumberDictionaryEntryType")]
    pub struct PhoneNumberDictionaryEntryType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PhysicalAddressDictionaryEntryType")]
    pub struct PhysicalAddressDictionaryEntryType {
        #[yaserde(prefix = "typ", rename = "Street")]
        pub street: Option<String>,
        #[yaserde(prefix = "typ", rename = "City")]
        pub city: Option<String>,
        #[yaserde(prefix = "typ", rename = "State")]
        pub state: Option<String>,
        #[yaserde(prefix = "typ", rename = "CountryOrRegion")]
        pub country_or_region: Option<String>,
        #[yaserde(prefix = "typ", rename = "PostalCode")]
        pub postal_code: Option<String>,
        #[yaserde(prefix = "typ", rename = "Key", attribute = true)]
        pub key: mod_typ::PhysicalAddressKeyType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContactUrlDictionaryType")]
    pub struct ContactUrlDictionaryType {
        #[yaserde(prefix = "typ", rename = "Url")]
        pub url: Vec<mod_typ::ContactUrlDictionaryEntryType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AbchEmailAddressDictionaryType")]
    pub struct AbchEmailAddressDictionaryType {
        #[yaserde(prefix = "typ", rename = "Email")]
        pub email: Vec<mod_typ::AbchEmailAddressDictionaryEntryType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ImAddressDictionaryType")]
    pub struct ImAddressDictionaryType {
        #[yaserde(prefix = "typ", rename = "Entry")]
        pub entry: Vec<mod_typ::ImAddressDictionaryEntryType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmailAddressDictionaryType")]
    pub struct EmailAddressDictionaryType {
        #[yaserde(prefix = "typ", rename = "Entry")]
        pub entry: Vec<mod_typ::EmailAddressDictionaryEntryType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PhoneNumberDictionaryType")]
    pub struct PhoneNumberDictionaryType {
        #[yaserde(prefix = "typ", rename = "Entry")]
        pub entry: Vec<mod_typ::PhoneNumberDictionaryEntryType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PhysicalAddressDictionaryType")]
    pub struct PhysicalAddressDictionaryType {
        #[yaserde(prefix = "typ", rename = "Entry")]
        pub entry: Vec<mod_typ::PhysicalAddressDictionaryEntryType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MemberStatusType")]
    pub struct MemberStatusType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MembersListType")]
    pub struct MembersListType {
        #[yaserde(prefix = "typ", rename = "Member")]
        pub member: Vec<mod_typ::MemberType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MemberType")]
    pub struct MemberType {
        #[yaserde(prefix = "typ", rename = "Mailbox")]
        pub mailbox: Option<mod_typ::EmailAddressType>,
        #[yaserde(prefix = "typ", rename = "Status")]
        pub status: Option<mod_typ::MemberStatusType>,
        #[yaserde(prefix = "typ", rename = "Key", attribute = true)]
        pub key: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RoleMemberItemType")]
    pub struct RoleMemberItemType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Type")]
        pub r#type: Option<mod_typ::RoleMemberTypeType>,
        #[yaserde(prefix = "typ", rename = "MemberId")]
        pub member_id: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NetworkItemType")]
    pub struct NetworkItemType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "DomainId")]
        pub domain_id: Option<i32>,
        #[yaserde(prefix = "typ", rename = "DomainTag")]
        pub domain_tag: Option<String>,
        #[yaserde(prefix = "typ", rename = "UserTileUrl")]
        pub user_tile_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProfileUrl")]
        pub profile_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "Settings")]
        pub settings: Option<i32>,
        #[yaserde(prefix = "typ", rename = "IsDefault")]
        pub is_default: Option<bool>,
        #[yaserde(prefix = "typ", rename = "AutoLinkError")]
        pub auto_link_error: Option<String>,
        #[yaserde(prefix = "typ", rename = "AutoLinkSuccess")]
        pub auto_link_success: Option<String>,
        #[yaserde(prefix = "typ", rename = "UserEmail")]
        pub user_email: Option<String>,
        #[yaserde(prefix = "typ", rename = "ClientPublishSecret")]
        pub client_publish_secret: Option<String>,
        #[yaserde(prefix = "typ", rename = "ClientToken")]
        pub client_token: Option<String>,
        #[yaserde(prefix = "typ", rename = "ClientToken2")]
        pub client_token_2: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContactSyncError")]
        pub contact_sync_error: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContactSyncSuccess")]
        pub contact_sync_success: Option<String>,
        #[yaserde(prefix = "typ", rename = "ErrorOffers")]
        pub error_offers: Option<i32>,
        #[yaserde(prefix = "typ", rename = "FirstAuthErrorDates")]
        pub first_auth_error_dates: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastVersionSaved")]
        pub last_version_saved: Option<i32>,
        #[yaserde(prefix = "typ", rename = "LastWelcomeContact")]
        pub last_welcome_contact: Option<String>,
        #[yaserde(prefix = "typ", rename = "Offers")]
        pub offers: Option<i32>,
        #[yaserde(prefix = "typ", rename = "PsaLastChanged")]
        pub psa_last_changed: Option<String>,
        #[yaserde(prefix = "typ", rename = "RefreshToken2")]
        pub refresh_token_2: Option<String>,
        #[yaserde(prefix = "typ", rename = "RefreshTokenExpiry2")]
        pub refresh_token_expiry_2: Option<String>,
        #[yaserde(prefix = "typ", rename = "SessionHandle")]
        pub session_handle: Option<String>,
        #[yaserde(prefix = "typ", rename = "RejectedOffers")]
        pub rejected_offers: Option<i32>,
        #[yaserde(prefix = "typ", rename = "SyncEnabled")]
        pub sync_enabled: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TokenRefreshLastAttempted")]
        pub token_refresh_last_attempted: Option<String>,
        #[yaserde(prefix = "typ", rename = "TokenRefreshLastCompleted")]
        pub token_refresh_last_completed: Option<String>,
        #[yaserde(prefix = "typ", rename = "PsaState")]
        pub psa_state: Option<String>,
        #[yaserde(prefix = "typ", rename = "SourceEntryID")]
        pub source_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "AccountName")]
        pub account_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastSync")]
        pub last_sync: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AbchPersonItemType")]
    pub struct AbchPersonItemType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "AntiLinkInfo")]
        pub anti_link_info: Option<String>,
        #[yaserde(prefix = "typ", rename = "PersonId")]
        pub person_id: Option<mod_typ::GuidType>,
        #[yaserde(prefix = "typ", rename = "ContactHandles")]
        pub contact_handles: Option<mod_typ::ArrayOfAbchPersonContactHandlesType>,
        #[yaserde(prefix = "typ", rename = "ContactCategories")]
        pub contact_categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "RelevanceOrder1")]
        pub relevance_order_1: Option<String>,
        #[yaserde(prefix = "typ", rename = "RelevanceOrder2")]
        pub relevance_order_2: Option<String>,
        #[yaserde(prefix = "typ", rename = "TrustLevel")]
        pub trust_level: Option<i32>,
        #[yaserde(prefix = "typ", rename = "FavoriteOrder")]
        pub favorite_order: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ExchangePersonIdGuid")]
        pub exchange_person_id_guid: Option<mod_typ::GuidType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfAbchPersonContactHandlesType")]
    pub struct ArrayOfAbchPersonContactHandlesType {
        #[yaserde(prefix = "typ", rename = "ContactHandle")]
        pub contact_handle: Vec<mod_typ::AbchPersonContactHandle>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AbchPersonContactHandle")]
    pub struct AbchPersonContactHandle {
        #[yaserde(prefix = "typ", rename = "SourceId")]
        pub source_id: String,
        #[yaserde(prefix = "typ", rename = "ObjectId")]
        pub object_id: String,
        #[yaserde(prefix = "typ", rename = "AccountName")]
        pub account_name: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfGuidType")]
    pub struct ArrayOfGuidType {
        #[yaserde(prefix = "typ", rename = "Guid")]
        pub guid: Vec<mod_typ::GuidType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContactItemType")]
    pub struct ContactItemType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "FileAs")]
        pub file_as: Option<String>,
        #[yaserde(prefix = "typ", rename = "FileAsMapping")]
        pub file_as_mapping: Option<mod_typ::FileAsMappingType>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "GivenName")]
        pub given_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Initials")]
        pub initials: Option<String>,
        #[yaserde(prefix = "typ", rename = "MiddleName")]
        pub middle_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Nickname")]
        pub nickname: Option<String>,
        #[yaserde(prefix = "typ", rename = "CompleteName")]
        pub complete_name: Option<mod_typ::CompleteNameType>,
        #[yaserde(prefix = "typ", rename = "CompanyName")]
        pub company_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "EmailAddresses")]
        pub email_addresses: Option<mod_typ::EmailAddressDictionaryType>,
        #[yaserde(prefix = "typ", rename = "AbchEmailAddresses")]
        pub abch_email_addresses: Option<mod_typ::AbchEmailAddressDictionaryType>,
        #[yaserde(prefix = "typ", rename = "PhysicalAddresses")]
        pub physical_addresses: Option<mod_typ::PhysicalAddressDictionaryType>,
        #[yaserde(prefix = "typ", rename = "PhoneNumbers")]
        pub phone_numbers: Option<mod_typ::PhoneNumberDictionaryType>,
        #[yaserde(prefix = "typ", rename = "AssistantName")]
        pub assistant_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Birthday")]
        pub birthday: Option<String>,
        #[yaserde(prefix = "typ", rename = "BusinessHomePage")]
        pub business_home_page: Option<String>,
        #[yaserde(prefix = "typ", rename = "Children")]
        pub children: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Companies")]
        pub companies: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "ContactSource")]
        pub contact_source: Option<mod_typ::ContactSourceType>,
        #[yaserde(prefix = "typ", rename = "Department")]
        pub department: Option<String>,
        #[yaserde(prefix = "typ", rename = "Generation")]
        pub generation: Option<String>,
        #[yaserde(prefix = "typ", rename = "ImAddresses")]
        pub im_addresses: Option<mod_typ::ImAddressDictionaryType>,
        #[yaserde(prefix = "typ", rename = "JobTitle")]
        pub job_title: Option<String>,
        #[yaserde(prefix = "typ", rename = "Manager")]
        pub manager: Option<String>,
        #[yaserde(prefix = "typ", rename = "Mileage")]
        pub mileage: Option<String>,
        #[yaserde(prefix = "typ", rename = "OfficeLocation")]
        pub office_location: Option<String>,
        #[yaserde(prefix = "typ", rename = "PostalAddressIndex")]
        pub postal_address_index: Option<mod_typ::PhysicalAddressIndexType>,
        #[yaserde(prefix = "typ", rename = "Profession")]
        pub profession: Option<String>,
        #[yaserde(prefix = "typ", rename = "SpouseName")]
        pub spouse_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Surname")]
        pub surname: Option<String>,
        #[yaserde(prefix = "typ", rename = "WeddingAnniversary")]
        pub wedding_anniversary: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasPicture")]
        pub has_picture: Option<bool>,
        #[yaserde(prefix = "typ", rename = "PhoneticFullName")]
        pub phonetic_full_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "PhoneticFirstName")]
        pub phonetic_first_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "PhoneticLastName")]
        pub phonetic_last_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Alias")]
        pub alias: Option<String>,
        #[yaserde(prefix = "typ", rename = "Notes")]
        pub notes: Option<String>,
        #[yaserde(prefix = "typ", rename = "Photo")]
        pub photo: Option<String>,
        #[yaserde(prefix = "typ", rename = "UserSMIMECertificate")]
        pub user_smime_certificate: Option<mod_typ::ArrayOfBinaryType>,
        #[yaserde(prefix = "typ", rename = "MSExchangeCertificate")]
        pub ms_exchange_certificate: Option<mod_typ::ArrayOfBinaryType>,
        #[yaserde(prefix = "typ", rename = "DirectoryId")]
        pub directory_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "ManagerMailbox")]
        pub manager_mailbox: Option<mod_typ::SingleRecipientType>,
        #[yaserde(prefix = "typ", rename = "DirectReports")]
        pub direct_reports: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "AccountName")]
        pub account_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAutoUpdateDisabled")]
        pub is_auto_update_disabled: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsMessengerEnabled")]
        pub is_messenger_enabled: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Comment")]
        pub comment: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContactShortId")]
        pub contact_short_id: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ContactType")]
        pub contact_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "Gender")]
        pub gender: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsHidden")]
        pub is_hidden: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ObjectId")]
        pub object_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "PassportId")]
        pub passport_id: Option<i64>,
        #[yaserde(prefix = "typ", rename = "IsPrivate")]
        pub is_private: Option<bool>,
        #[yaserde(prefix = "typ", rename = "SourceId")]
        pub source_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "TrustLevel")]
        pub trust_level: Option<i32>,
        #[yaserde(prefix = "typ", rename = "CreatedBy")]
        pub created_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "Urls")]
        pub urls: Option<mod_typ::ContactUrlDictionaryType>,
        #[yaserde(prefix = "typ", rename = "Cid")]
        pub cid: Option<i64>,
        #[yaserde(prefix = "typ", rename = "SkypeAuthCertificate")]
        pub skype_auth_certificate: Option<String>,
        #[yaserde(prefix = "typ", rename = "SkypeContext")]
        pub skype_context: Option<String>,
        #[yaserde(prefix = "typ", rename = "SkypeId")]
        pub skype_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "SkypeRelationship")]
        pub skype_relationship: Option<String>,
        #[yaserde(prefix = "typ", rename = "YomiNickname")]
        pub yomi_nickname: Option<String>,
        #[yaserde(prefix = "typ", rename = "XboxLiveTag")]
        pub xbox_live_tag: Option<String>,
        #[yaserde(prefix = "typ", rename = "InviteFree")]
        pub invite_free: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HidePresenceAndProfile")]
        pub hide_presence_and_profile: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsPendingOutbound")]
        pub is_pending_outbound: Option<bool>,
        #[yaserde(prefix = "typ", rename = "SupportGroupFeeds")]
        pub support_group_feeds: Option<bool>,
        #[yaserde(prefix = "typ", rename = "UserTileHash")]
        pub user_tile_hash: Option<String>,
        #[yaserde(prefix = "typ", rename = "UnifiedInbox")]
        pub unified_inbox: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Mris")]
        pub mris: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Wlid")]
        pub wlid: Option<String>,
        #[yaserde(prefix = "typ", rename = "AbchContactId")]
        pub abch_contact_id: Option<mod_typ::GuidType>,
        #[yaserde(prefix = "typ", rename = "NotInBirthdayCalendar")]
        pub not_in_birthday_calendar: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ShellContactType")]
        pub shell_contact_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "ImMri")]
        pub im_mri: Option<String>,
        #[yaserde(prefix = "typ", rename = "PresenceTrustLevel")]
        pub presence_trust_level: Option<i32>,
        #[yaserde(prefix = "typ", rename = "OtherMri")]
        pub other_mri: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProfileLastChanged")]
        pub profile_last_changed: Option<String>,
        #[yaserde(prefix = "typ", rename = "MobileIMEnabled")]
        pub mobile_im_enabled: Option<bool>,
        #[yaserde(prefix = "typ", rename = "PartnerNetworkProfilePhotoUrl")]
        pub partner_network_profile_photo_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "PartnerNetworkThumbnailPhotoUrl")]
        pub partner_network_thumbnail_photo_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "PersonId")]
        pub person_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationGuid")]
        pub conversation_guid: Option<mod_typ::GuidType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfBinaryType")]
    pub struct ArrayOfBinaryType {
        #[yaserde(prefix = "typ", rename = "Base64Binary")]
        pub base_64_binary: Vec<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DistributionListType")]
    pub struct DistributionListType {
        #[yaserde(prefix = "typ", rename = "MimeContent")]
        pub mime_content: Option<mod_typ::MimeContentType>,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: Option<mod_typ::FolderIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "Body")]
        pub body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Attachments")]
        pub attachments: Option<mod_typ::NonEmptyArrayOfAttachmentsType>,
        #[yaserde(prefix = "typ", rename = "DateTimeReceived")]
        pub date_time_received: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "InReplyTo")]
        pub in_reply_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsSubmitted")]
        pub is_submitted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsDraft")]
        pub is_draft: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFromMe")]
        pub is_from_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsResend")]
        pub is_resend: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsUnmodified")]
        pub is_unmodified: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InternetMessageHeaders")]
        pub internet_message_headers: Option<mod_typ::NonEmptyArrayOfInternetHeadersType>,
        #[yaserde(prefix = "typ", rename = "DateTimeSent")]
        pub date_time_sent: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseObjects")]
        pub response_objects: Option<mod_typ::NonEmptyArrayOfResponseObjectsType>,
        #[yaserde(prefix = "typ", rename = "ReminderDueBy")]
        pub reminder_due_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderIsSet")]
        pub reminder_is_set: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReminderNextTime")]
        pub reminder_next_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReminderMinutesBeforeStart")]
        pub reminder_minutes_before_start: Option<mod_typ::ReminderMinutesBeforeStartType>,
        #[yaserde(prefix = "typ", rename = "DisplayCc")]
        pub display_cc: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayTo")]
        pub display_to: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayBcc")]
        pub display_bcc: Option<String>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperty")]
        pub extended_property: Vec<mod_typ::ExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "Culture")]
        pub culture: Option<String>,
        #[yaserde(prefix = "typ", rename = "EffectiveRights")]
        pub effective_rights: Option<mod_typ::EffectiveRightsType>,
        #[yaserde(prefix = "typ", rename = "LastModifiedName")]
        pub last_modified_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "LastModifiedTime")]
        pub last_modified_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAssociated")]
        pub is_associated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "WebClientReadFormQueryString")]
        pub web_client_read_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "WebClientEditFormQueryString")]
        pub web_client_edit_form_query_string: Option<String>,
        #[yaserde(prefix = "typ", rename = "ConversationId")]
        pub conversation_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "UniqueBody")]
        pub unique_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "Flag")]
        pub flag: Option<mod_typ::FlagType>,
        #[yaserde(prefix = "typ", rename = "StoreEntryId")]
        pub store_entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "NormalizedBody")]
        pub normalized_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "EntityExtractionResult")]
        pub entity_extraction_result: Option<mod_typ::EntityExtractionResultType>,
        #[yaserde(prefix = "typ", rename = "PolicyTag")]
        pub policy_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "ArchiveTag")]
        pub archive_tag: Option<mod_typ::RetentionTagType>,
        #[yaserde(prefix = "typ", rename = "RetentionDate")]
        pub retention_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "RightsManagementLicenseData")]
        pub rights_management_license_data: Option<mod_typ::RightsManagementLicenseDataType>,
        #[yaserde(prefix = "typ", rename = "PredictedActionReasons")]
        pub predicted_action_reasons: Option<mod_typ::NonEmptyArrayOfPredictedActionReasonType>,
        #[yaserde(prefix = "typ", rename = "IsClutter")]
        pub is_clutter: Option<bool>,
        #[yaserde(prefix = "typ", rename = "BlockStatus")]
        pub block_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasBlockedImages")]
        pub has_blocked_images: Option<bool>,
        #[yaserde(prefix = "typ", rename = "TextBody")]
        pub text_body: Option<mod_typ::BodyType>,
        #[yaserde(prefix = "typ", rename = "IconIndex")]
        pub icon_index: Option<mod_typ::IconIndexType>,
        #[yaserde(prefix = "typ", rename = "SearchKey")]
        pub search_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortKey")]
        pub sort_key: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Mentions")]
        pub mentions: Option<mod_typ::ArrayOfRecipientsType>,
        #[yaserde(prefix = "typ", rename = "MentionedMe")]
        pub mentioned_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MentionsPreview")]
        pub mentions_preview: Option<mod_typ::MentionsPreviewType>,
        #[yaserde(prefix = "typ", rename = "MentionsEx")]
        pub mentions_ex: Option<mod_typ::NonEmptyArrayOfMentionActionsType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtags")]
        pub applied_hashtags: Option<mod_typ::NonEmptyArrayOfAppliedHashtagType>,
        #[yaserde(prefix = "typ", rename = "AppliedHashtagsPreview")]
        pub applied_hashtags_preview: Option<mod_typ::AppliedHashtagsPreviewType>,
        #[yaserde(prefix = "typ", rename = "Likes")]
        pub likes: Option<mod_typ::NonEmptyArrayOfLikeType>,
        #[yaserde(prefix = "typ", rename = "LikesPreview")]
        pub likes_preview: Option<mod_typ::LikesPreviewType>,
        #[yaserde(prefix = "typ", rename = "PendingSocialActivityTagIds")]
        pub pending_social_activity_tag_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "AtAllMention")]
        pub at_all_mention: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanDelete")]
        pub can_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InferenceClassification")]
        pub inference_classification: Option<mod_typ::InferenceClassificationType>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "FileAs")]
        pub file_as: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContactSource")]
        pub contact_source: Option<mod_typ::ContactSourceType>,
        #[yaserde(prefix = "typ", rename = "Members")]
        pub members: Option<mod_typ::MembersListType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchParametersType")]
    pub struct SearchParametersType {
        #[yaserde(prefix = "typ", rename = "Restriction")]
        pub restriction: mod_typ::RestrictionType,
        #[yaserde(prefix = "typ", rename = "BaseFolderIds")]
        pub base_folder_ids: mod_typ::NonEmptyArrayOfBaseFolderIdsType,
        #[yaserde(prefix = "typ", rename = "Traversal", attribute = true)]
        pub traversal: Option<mod_typ::SearchFolderTraversalType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConstantValueType")]
    pub struct ConstantValueType {
        #[yaserde(prefix = "typ", rename = "Value", attribute = true)]
        pub value: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchExpressionType")]
    pub struct SearchExpressionType {}
    pub type SearchExpression = mod_typ::SearchExpressionType;
    /// This max/min evaluation is applied to the field specified within the group by
    ///         instance for EACH item within that group.  This determines which item from each group
    ///         is to be selected as the representative for that group.
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AggregateType")]
    pub struct AggregateType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    /// Represents the field of each item to aggregate on and the qualifier to apply to that
    ///         field in determining which item will represent the group.
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AggregateOnType")]
    pub struct AggregateOnType {
        #[yaserde(prefix = "typ", rename = "Aggregate", attribute = true)]
        pub aggregate: mod_typ::AggregateType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BaseGroupByType")]
    pub struct BaseGroupByType {
        #[yaserde(prefix = "typ", rename = "Order", attribute = true)]
        pub order: mod_typ::SortDirectionType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "GroupByType")]
    pub struct GroupByType {
        #[yaserde(prefix = "typ", rename = "Order", attribute = true)]
        pub order: mod_typ::SortDirectionType,
        #[yaserde(prefix = "typ", rename = "FieldURI")]
        pub field_uri: mod_typ::PathToUnindexedFieldType,
        #[yaserde(prefix = "typ", rename = "IndexedFieldURI")]
        pub indexed_field_uri: mod_typ::PathToIndexedFieldType,
        #[yaserde(prefix = "typ", rename = "ExtendedFieldURI")]
        pub extended_field_uri: mod_typ::PathToExtendedFieldType,
        #[yaserde(prefix = "typ", rename = "AggregateOn")]
        pub aggregate_on: mod_typ::AggregateOnType,
        #[yaserde(prefix = "typ", rename = "UseCollapsibleGroups")]
        pub use_collapsible_groups: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ItemsPerGroup")]
        pub items_per_group: Option<i32>,
        #[yaserde(prefix = "typ", rename = "MaxItemsPerGroup")]
        pub max_items_per_group: Option<i32>,
        #[yaserde(prefix = "typ", rename = "GroupsToExpand")]
        pub groups_to_expand: Option<mod_typ::ArrayOfGroupIdType>,
    }
    /// Represents standard groupings for GroupBy queries.
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "StandardGroupByType")]
    pub struct StandardGroupByType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DistinguishedGroupByType")]
    pub struct DistinguishedGroupByType {
        #[yaserde(prefix = "typ", rename = "Order", attribute = true)]
        pub order: mod_typ::SortDirectionType,
        #[yaserde(prefix = "typ", rename = "StandardGroupBy")]
        pub standard_group_by: mod_typ::StandardGroupByType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfGroupIdType")]
    pub struct ArrayOfGroupIdType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "GroupedItemsType")]
    pub struct GroupedItemsType {
        #[yaserde(prefix = "typ", rename = "GroupIndex")]
        pub group_index: String,
        #[yaserde(prefix = "typ", rename = "Items")]
        pub items: mod_typ::ArrayOfRealItemsType,
        #[yaserde(prefix = "typ", rename = "GroupSummary")]
        pub group_summary: Option<mod_typ::GroupSummaryType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfGroupedItemsType")]
    pub struct ArrayOfGroupedItemsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "GroupSummaryType")]
    pub struct GroupSummaryType {
        #[yaserde(prefix = "typ", rename = "GroupCount")]
        pub group_count: i32,
        #[yaserde(prefix = "typ", rename = "UnreadCount")]
        pub unread_count: i32,
        #[yaserde(prefix = "typ", rename = "InstanceKey")]
        pub instance_key: String,
        #[yaserde(prefix = "typ", rename = "GroupByValue")]
        pub group_by_value: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExistsType")]
    pub struct ExistsType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
    }
    pub type Exists = mod_typ::ExistsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FieldURIOrConstantType")]
    pub struct FieldURIOrConstantType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TwoOperandExpressionType")]
    pub struct TwoOperandExpressionType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
        #[yaserde(prefix = "typ", rename = "FieldURIOrConstant")]
        pub field_uri_or_constant: mod_typ::FieldURIOrConstantType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExcludesAttributeType")]
    pub struct ExcludesAttributeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExcludesValueType")]
    pub struct ExcludesValueType {
        #[yaserde(prefix = "typ", rename = "Value", attribute = true)]
        pub value: mod_typ::ExcludesAttributeType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExcludesType")]
    pub struct ExcludesType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
        #[yaserde(prefix = "typ", rename = "Bitmask")]
        pub bitmask: mod_typ::ExcludesValueType,
    }
    pub type Excludes = mod_typ::ExcludesType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "IsEqualToType")]
    pub struct IsEqualToType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
        #[yaserde(prefix = "typ", rename = "FieldURIOrConstant")]
        pub field_uri_or_constant: mod_typ::FieldURIOrConstantType,
    }
    pub type IsEqualTo = mod_typ::IsEqualToType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "IsNotEqualToType")]
    pub struct IsNotEqualToType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
        #[yaserde(prefix = "typ", rename = "FieldURIOrConstant")]
        pub field_uri_or_constant: mod_typ::FieldURIOrConstantType,
    }
    pub type IsNotEqualTo = mod_typ::IsNotEqualToType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "IsGreaterThanType")]
    pub struct IsGreaterThanType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
        #[yaserde(prefix = "typ", rename = "FieldURIOrConstant")]
        pub field_uri_or_constant: mod_typ::FieldURIOrConstantType,
    }
    pub type IsGreaterThan = mod_typ::IsGreaterThanType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "IsGreaterThanOrEqualToType")]
    pub struct IsGreaterThanOrEqualToType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
        #[yaserde(prefix = "typ", rename = "FieldURIOrConstant")]
        pub field_uri_or_constant: mod_typ::FieldURIOrConstantType,
    }
    pub type IsGreaterThanOrEqualTo = mod_typ::IsGreaterThanOrEqualToType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "IsLessThanType")]
    pub struct IsLessThanType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
        #[yaserde(prefix = "typ", rename = "FieldURIOrConstant")]
        pub field_uri_or_constant: mod_typ::FieldURIOrConstantType,
    }
    pub type IsLessThan = mod_typ::IsLessThanType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "IsLessThanOrEqualToType")]
    pub struct IsLessThanOrEqualToType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
        #[yaserde(prefix = "typ", rename = "FieldURIOrConstant")]
        pub field_uri_or_constant: mod_typ::FieldURIOrConstantType,
    }
    pub type IsLessThanOrEqualTo = mod_typ::IsLessThanOrEqualToType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContainmentModeType")]
    pub struct ContainmentModeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContainmentComparisonType")]
    pub struct ContainmentComparisonType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContainsExpressionType")]
    pub struct ContainsExpressionType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
        #[yaserde(prefix = "typ", rename = "Constant")]
        pub constant: mod_typ::ConstantValueType,
    }
    pub type Contains = mod_typ::ContainsExpressionType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NotType")]
    pub struct NotType {
        #[yaserde(rename = "SearchExpression")]
        pub search_expression: mod_typ::SearchExpression,
    }
    pub type Not = mod_typ::NotType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MultipleOperandBooleanExpressionType")]
    pub struct MultipleOperandBooleanExpressionType {
        #[yaserde(rename = "SearchExpression")]
        pub search_expression: Vec<mod_typ::SearchExpression>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AndType")]
    pub struct AndType {
        #[yaserde(rename = "SearchExpression")]
        pub search_expression: Vec<mod_typ::SearchExpression>,
    }
    pub type And = mod_typ::AndType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OrType")]
    pub struct OrType {
        #[yaserde(rename = "SearchExpression")]
        pub search_expression: Vec<mod_typ::SearchExpression>,
    }
    pub type Or = mod_typ::OrType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NearType")]
    pub struct NearType {
        #[yaserde(rename = "SearchExpression")]
        pub search_expression: Vec<mod_typ::SearchExpression>,
        #[yaserde(prefix = "typ", rename = "Distance")]
        pub distance: u32,
        #[yaserde(prefix = "typ", rename = "Ordered")]
        pub ordered: bool,
    }
    pub type Near = mod_typ::NearType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RestrictionType")]
    pub struct RestrictionType {
        #[yaserde(rename = "SearchExpression")]
        pub search_expression: mod_typ::SearchExpression,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SortDirectionType")]
    pub struct SortDirectionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FieldOrderType")]
    pub struct FieldOrderType {
        #[yaserde(rename = "Path")]
        pub path: mod_typ::Path,
        #[yaserde(prefix = "typ", rename = "Order", attribute = true)]
        pub order: mod_typ::SortDirectionType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfFieldOrdersType")]
    pub struct NonEmptyArrayOfFieldOrdersType {
        #[yaserde(prefix = "typ", rename = "FieldOrder")]
        pub field_order: Vec<mod_typ::FieldOrderType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfFolderNamesType")]
    pub struct NonEmptyArrayOfFolderNamesType {
        #[yaserde(prefix = "typ", rename = "FolderName")]
        pub folder_name: Vec<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "WatermarkType")]
    pub struct WatermarkType {
        #[yaserde(flatten = true)]
        pub inner: mod_typ::NonEmptyStringType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SubscriptionIdType")]
    pub struct SubscriptionIdType {
        #[yaserde(flatten = true)]
        pub inner: mod_typ::NonEmptyStringType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BaseNotificationEventType")]
    pub struct BaseNotificationEventType {
        #[yaserde(prefix = "typ", rename = "Watermark")]
        pub watermark: Option<mod_typ::WatermarkType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BaseObjectChangedEventType")]
    pub struct BaseObjectChangedEventType {
        #[yaserde(prefix = "typ", rename = "Watermark")]
        pub watermark: Option<mod_typ::WatermarkType>,
        #[yaserde(prefix = "typ", rename = "TimeStamp")]
        pub time_stamp: String,
        #[yaserde(prefix = "typ", rename = "FolderId")]
        pub folder_id: mod_typ::FolderIdType,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: mod_typ::FolderIdType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ModifiedEventType")]
    pub struct ModifiedEventType {
        #[yaserde(prefix = "typ", rename = "Watermark")]
        pub watermark: Option<mod_typ::WatermarkType>,
        #[yaserde(prefix = "typ", rename = "TimeStamp")]
        pub time_stamp: String,
        #[yaserde(prefix = "typ", rename = "FolderId")]
        pub folder_id: mod_typ::FolderIdType,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: mod_typ::FolderIdType,
        #[yaserde(prefix = "typ", rename = "UnreadCount")]
        pub unread_count: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MovedCopiedEventType")]
    pub struct MovedCopiedEventType {
        #[yaserde(prefix = "typ", rename = "Watermark")]
        pub watermark: Option<mod_typ::WatermarkType>,
        #[yaserde(prefix = "typ", rename = "TimeStamp")]
        pub time_stamp: String,
        #[yaserde(prefix = "typ", rename = "FolderId")]
        pub folder_id: mod_typ::FolderIdType,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "ParentFolderId")]
        pub parent_folder_id: mod_typ::FolderIdType,
        #[yaserde(prefix = "typ", rename = "OldFolderId")]
        pub old_folder_id: mod_typ::FolderIdType,
        #[yaserde(prefix = "typ", rename = "OldItemId")]
        pub old_item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "OldParentFolderId")]
        pub old_parent_folder_id: mod_typ::FolderIdType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NotificationType")]
    pub struct NotificationType {
        #[yaserde(prefix = "typ", rename = "SubscriptionId")]
        pub subscription_id: mod_typ::SubscriptionIdType,
        #[yaserde(prefix = "typ", rename = "PreviousWatermark")]
        pub previous_watermark: Option<mod_typ::WatermarkType>,
        #[yaserde(prefix = "typ", rename = "MoreEvents")]
        pub more_events: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CopiedEvent")]
        pub copied_event: Vec<mod_typ::MovedCopiedEventType>,
        #[yaserde(prefix = "typ", rename = "CreatedEvent")]
        pub created_event: Vec<mod_typ::BaseObjectChangedEventType>,
        #[yaserde(prefix = "typ", rename = "DeletedEvent")]
        pub deleted_event: Vec<mod_typ::BaseObjectChangedEventType>,
        #[yaserde(prefix = "typ", rename = "ModifiedEvent")]
        pub modified_event: Vec<mod_typ::ModifiedEventType>,
        #[yaserde(prefix = "typ", rename = "MovedEvent")]
        pub moved_event: Vec<mod_typ::MovedCopiedEventType>,
        #[yaserde(prefix = "typ", rename = "NewMailEvent")]
        pub new_mail_event: Vec<mod_typ::BaseObjectChangedEventType>,
        #[yaserde(prefix = "typ", rename = "StatusEvent")]
        pub status_event: Vec<mod_typ::BaseNotificationEventType>,
        #[yaserde(prefix = "typ", rename = "FreeBusyChangedEvent")]
        pub free_busy_changed_event: Vec<mod_typ::BaseObjectChangedEventType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NotificationEventTypeType")]
    pub struct NotificationEventTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfNotificationEventTypesType")]
    pub struct NonEmptyArrayOfNotificationEventTypesType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SubscriptionTimeoutType")]
    pub struct SubscriptionTimeoutType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SubscriptionStatusFrequencyType")]
    pub struct SubscriptionStatusFrequencyType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BaseSubscriptionRequestType")]
    pub struct BaseSubscriptionRequestType {
        #[yaserde(prefix = "typ", rename = "FolderIds")]
        pub folder_ids: Option<mod_typ::NonEmptyArrayOfBaseFolderIdsType>,
        #[yaserde(prefix = "typ", rename = "EventTypes")]
        pub event_types: mod_typ::NonEmptyArrayOfNotificationEventTypesType,
        #[yaserde(prefix = "typ", rename = "Watermark")]
        pub watermark: Option<mod_typ::WatermarkType>,
        #[yaserde(prefix = "typ", rename = "SubscribeToAllFolders", attribute = true)]
        pub subscribe_to_all_folders: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PushSubscriptionRequestType")]
    pub struct PushSubscriptionRequestType {
        #[yaserde(prefix = "typ", rename = "FolderIds")]
        pub folder_ids: Option<mod_typ::NonEmptyArrayOfBaseFolderIdsType>,
        #[yaserde(prefix = "typ", rename = "EventTypes")]
        pub event_types: mod_typ::NonEmptyArrayOfNotificationEventTypesType,
        #[yaserde(prefix = "typ", rename = "Watermark")]
        pub watermark: Option<mod_typ::WatermarkType>,
        #[yaserde(prefix = "typ", rename = "SubscribeToAllFolders", attribute = true)]
        pub subscribe_to_all_folders: Option<bool>,
        #[yaserde(prefix = "typ", rename = "StatusFrequency")]
        pub status_frequency: mod_typ::SubscriptionStatusFrequencyType,
        #[yaserde(prefix = "typ", rename = "URL")]
        pub url: String,
        #[yaserde(prefix = "typ", rename = "CallerData")]
        pub caller_data: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PullSubscriptionRequestType")]
    pub struct PullSubscriptionRequestType {
        #[yaserde(prefix = "typ", rename = "FolderIds")]
        pub folder_ids: Option<mod_typ::NonEmptyArrayOfBaseFolderIdsType>,
        #[yaserde(prefix = "typ", rename = "EventTypes")]
        pub event_types: mod_typ::NonEmptyArrayOfNotificationEventTypesType,
        #[yaserde(prefix = "typ", rename = "Watermark")]
        pub watermark: Option<mod_typ::WatermarkType>,
        #[yaserde(prefix = "typ", rename = "SubscribeToAllFolders", attribute = true)]
        pub subscribe_to_all_folders: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Timeout")]
        pub timeout: mod_typ::SubscriptionTimeoutType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "StreamingSubscriptionRequestType")]
    pub struct StreamingSubscriptionRequestType {
        #[yaserde(prefix = "typ", rename = "FolderIds")]
        pub folder_ids: Option<mod_typ::NonEmptyArrayOfBaseFolderIdsType>,
        #[yaserde(prefix = "typ", rename = "EventTypes")]
        pub event_types: mod_typ::NonEmptyArrayOfNotificationEventTypesType,
        #[yaserde(prefix = "typ", rename = "SubscribeToAllFolders", attribute = true)]
        pub subscribe_to_all_folders: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SubscriptionStatusType")]
    pub struct SubscriptionStatusType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfSubscriptionIdsType")]
    pub struct NonEmptyArrayOfSubscriptionIdsType {
        #[yaserde(prefix = "typ", rename = "SubscriptionId")]
        pub subscription_id: Vec<mod_typ::SubscriptionIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfNotificationsType")]
    pub struct NonEmptyArrayOfNotificationsType {
        #[yaserde(prefix = "typ", rename = "Notification")]
        pub notification: Vec<mod_typ::NotificationType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "StreamingSubscriptionConnectionTimeoutType")]
    pub struct StreamingSubscriptionConnectionTimeoutType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConnectionStatusType")]
    pub struct ConnectionStatusType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UnifiedGroupAccessType")]
    pub struct UnifiedGroupAccessType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SyncFolderItemsDeleteType")]
    pub struct SyncFolderItemsDeleteType {
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SyncFolderItemsReadFlagType")]
    pub struct SyncFolderItemsReadFlagType {
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "IsRead")]
        pub is_read: bool,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SyncFolderItemsChangesType")]
    pub struct SyncFolderItemsChangesType {
        #[yaserde(prefix = "typ", rename = "Create")]
        pub create: Vec<mod_typ::SyncFolderItemsCreateOrUpdateType>,
        #[yaserde(prefix = "typ", rename = "Update")]
        pub update: Vec<mod_typ::SyncFolderItemsCreateOrUpdateType>,
        #[yaserde(prefix = "typ", rename = "Delete")]
        pub delete: Vec<mod_typ::SyncFolderItemsDeleteType>,
        #[yaserde(prefix = "typ", rename = "ReadFlagChange")]
        pub read_flag_change: Vec<mod_typ::SyncFolderItemsReadFlagType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SyncFolderHierarchyCreateOrUpdateType")]
    pub struct SyncFolderHierarchyCreateOrUpdateType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SyncFolderHierarchyDeleteType")]
    pub struct SyncFolderHierarchyDeleteType {
        #[yaserde(prefix = "typ", rename = "FolderId")]
        pub folder_id: mod_typ::FolderIdType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SyncFolderHierarchyChangesType")]
    pub struct SyncFolderHierarchyChangesType {
        #[yaserde(prefix = "typ", rename = "Create")]
        pub create: Vec<mod_typ::SyncFolderHierarchyCreateOrUpdateType>,
        #[yaserde(prefix = "typ", rename = "Update")]
        pub update: Vec<mod_typ::SyncFolderHierarchyCreateOrUpdateType>,
        #[yaserde(prefix = "typ", rename = "Delete")]
        pub delete: Vec<mod_typ::SyncFolderHierarchyDeleteType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MaxSyncChangesReturnedType")]
    pub struct MaxSyncChangesReturnedType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SyncFolderItemsScopeType")]
    pub struct SyncFolderItemsScopeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AvailabilityProxyRequestType")]
    pub struct AvailabilityProxyRequestType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RequestTypeHeader")]
    pub struct RequestTypeHeader {
        #[yaserde(prefix = "typ", rename = "RequestType")]
        pub request_type: mod_typ::AvailabilityProxyRequestType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingAttendeeType")]
    pub struct MeetingAttendeeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CalendarEventDetails")]
    pub struct CalendarEventDetails {
        #[yaserde(prefix = "typ", rename = "ID")]
        pub id: Option<String>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Location")]
        pub location: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsMeeting")]
        pub is_meeting: bool,
        #[yaserde(prefix = "typ", rename = "IsRecurring")]
        pub is_recurring: bool,
        #[yaserde(prefix = "typ", rename = "IsException")]
        pub is_exception: bool,
        #[yaserde(prefix = "typ", rename = "IsReminderSet")]
        pub is_reminder_set: bool,
        #[yaserde(prefix = "typ", rename = "IsPrivate")]
        pub is_private: bool,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CalendarEvent")]
    pub struct CalendarEvent {
        #[yaserde(prefix = "typ", rename = "StartTime")]
        pub start_time: String,
        #[yaserde(prefix = "typ", rename = "EndTime")]
        pub end_time: String,
        #[yaserde(prefix = "typ", rename = "BusyType")]
        pub busy_type: mod_typ::LegacyFreeBusyType,
        #[yaserde(prefix = "typ", rename = "CalendarEventDetails")]
        pub calendar_event_details: Option<mod_typ::CalendarEventDetails>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfCalendarEvent")]
    pub struct ArrayOfCalendarEvent {
        #[yaserde(prefix = "typ", rename = "CalendarEvent")]
        pub calendar_event: Vec<mod_typ::CalendarEvent>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "Duration")]
    pub struct Duration {
        #[yaserde(prefix = "typ", rename = "StartTime")]
        pub start_time: String,
        #[yaserde(prefix = "typ", rename = "EndTime")]
        pub end_time: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmailAddress")]
    pub struct EmailAddress {
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Address")]
        pub address: String,
        #[yaserde(prefix = "typ", rename = "RoutingType")]
        pub routing_type: Option<String>,
    }
    pub type Mailbox = mod_typ::EmailAddress;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FreeBusyViewType")]
    pub struct FreeBusyViewType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FreeBusyViewOptionsType")]
    pub struct FreeBusyViewOptionsType {
        #[yaserde(prefix = "typ", rename = "TimeWindow")]
        pub time_window: mod_typ::Duration,
        #[yaserde(prefix = "typ", rename = "MergedFreeBusyIntervalInMinutes")]
        pub merged_free_busy_interval_in_minutes: Option<i32>,
        #[yaserde(prefix = "typ", rename = "RequestedView")]
        pub requested_view: Option<mod_typ::FreeBusyViewType>,
    }
    pub type FreeBusyViewOptions = mod_typ::FreeBusyViewOptionsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "WorkingPeriod")]
    pub struct WorkingPeriod {
        #[yaserde(prefix = "typ", rename = "DayOfWeek")]
        pub day_of_week: mod_typ::DaysOfWeekType,
        #[yaserde(prefix = "typ", rename = "StartTimeInMinutes")]
        pub start_time_in_minutes: i32,
        #[yaserde(prefix = "typ", rename = "EndTimeInMinutes")]
        pub end_time_in_minutes: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfWorkingPeriod")]
    pub struct ArrayOfWorkingPeriod {
        #[yaserde(prefix = "typ", rename = "WorkingPeriod")]
        pub working_period: Vec<mod_typ::WorkingPeriod>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SerializableTimeZoneTime")]
    pub struct SerializableTimeZoneTime {
        #[yaserde(prefix = "typ", rename = "Bias")]
        pub bias: i32,
        #[yaserde(prefix = "typ", rename = "Time")]
        pub time: String,
        #[yaserde(prefix = "typ", rename = "DayOrder")]
        pub day_order: i16,
        #[yaserde(prefix = "typ", rename = "Month")]
        pub month: i16,
        #[yaserde(prefix = "typ", rename = "DayOfWeek")]
        pub day_of_week: mod_typ::DayOfWeekType,
        #[yaserde(prefix = "typ", rename = "Year")]
        pub year: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SerializableTimeZone")]
    pub struct SerializableTimeZone {
        #[yaserde(prefix = "typ", rename = "Bias")]
        pub bias: i32,
        #[yaserde(prefix = "typ", rename = "StandardTime")]
        pub standard_time: mod_typ::SerializableTimeZoneTime,
        #[yaserde(prefix = "typ", rename = "DaylightTime")]
        pub daylight_time: mod_typ::SerializableTimeZoneTime,
    }
    pub type TimeZone = mod_typ::SerializableTimeZone;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "WorkingHours")]
    pub struct WorkingHours {
        #[yaserde(prefix = "typ", rename = "TimeZone")]
        pub time_zone: mod_typ::SerializableTimeZone,
        #[yaserde(prefix = "typ", rename = "WorkingPeriodArray")]
        pub working_period_array: mod_typ::ArrayOfWorkingPeriod,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FreeBusyView")]
    pub struct FreeBusyView {
        #[yaserde(prefix = "typ", rename = "FreeBusyViewType")]
        pub free_busy_view_type: mod_typ::FreeBusyViewType,
        #[yaserde(prefix = "typ", rename = "MergedFreeBusy")]
        pub merged_free_busy: Option<String>,
        #[yaserde(prefix = "typ", rename = "CalendarEventArray")]
        pub calendar_event_array: Option<mod_typ::ArrayOfCalendarEvent>,
        #[yaserde(prefix = "typ", rename = "WorkingHours")]
        pub working_hours: Option<mod_typ::WorkingHours>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailboxData")]
    pub struct MailboxData {
        #[yaserde(prefix = "typ", rename = "Email")]
        pub email: mod_typ::EmailAddress,
        #[yaserde(prefix = "typ", rename = "AttendeeType")]
        pub attendee_type: mod_typ::MeetingAttendeeType,
        #[yaserde(prefix = "typ", rename = "ExcludeConflicts")]
        pub exclude_conflicts: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfMailboxData")]
    pub struct ArrayOfMailboxData {
        #[yaserde(prefix = "typ", rename = "MailboxData")]
        pub mailbox_data: Vec<mod_typ::MailboxData>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SuggestionQuality")]
    pub struct SuggestionQuality {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SuggestionsViewOptionsType")]
    pub struct SuggestionsViewOptionsType {
        #[yaserde(prefix = "typ", rename = "GoodThreshold")]
        pub good_threshold: Option<i32>,
        #[yaserde(prefix = "typ", rename = "MaximumResultsByDay")]
        pub maximum_results_by_day: Option<i32>,
        #[yaserde(prefix = "typ", rename = "MaximumNonWorkHourResultsByDay")]
        pub maximum_non_work_hour_results_by_day: Option<i32>,
        #[yaserde(prefix = "typ", rename = "MeetingDurationInMinutes")]
        pub meeting_duration_in_minutes: Option<i32>,
        #[yaserde(prefix = "typ", rename = "MinimumSuggestionQuality")]
        pub minimum_suggestion_quality: Option<mod_typ::SuggestionQuality>,
        #[yaserde(prefix = "typ", rename = "DetailedSuggestionsWindow")]
        pub detailed_suggestions_window: mod_typ::Duration,
        #[yaserde(prefix = "typ", rename = "CurrentMeetingTime")]
        pub current_meeting_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "GlobalObjectId")]
        pub global_object_id: Option<String>,
    }
    pub type SuggestionsViewOptions = mod_typ::SuggestionsViewOptionsType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfAttendeeConflictData")]
    pub struct ArrayOfAttendeeConflictData {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AttendeeConflictData")]
    pub struct AttendeeConflictData {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UnknownAttendeeConflictData")]
    pub struct UnknownAttendeeConflictData {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TooBigGroupAttendeeConflictData")]
    pub struct TooBigGroupAttendeeConflictData {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "IndividualAttendeeConflictData")]
    pub struct IndividualAttendeeConflictData {
        #[yaserde(prefix = "typ", rename = "BusyType")]
        pub busy_type: mod_typ::LegacyFreeBusyType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "GroupAttendeeConflictData")]
    pub struct GroupAttendeeConflictData {
        #[yaserde(prefix = "typ", rename = "NumberOfMembers")]
        pub number_of_members: i32,
        #[yaserde(prefix = "typ", rename = "NumberOfMembersAvailable")]
        pub number_of_members_available: i32,
        #[yaserde(prefix = "typ", rename = "NumberOfMembersWithConflict")]
        pub number_of_members_with_conflict: i32,
        #[yaserde(prefix = "typ", rename = "NumberOfMembersWithNoData")]
        pub number_of_members_with_no_data: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "Suggestion")]
    pub struct Suggestion {
        #[yaserde(prefix = "typ", rename = "MeetingTime")]
        pub meeting_time: String,
        #[yaserde(prefix = "typ", rename = "IsWorkTime")]
        pub is_work_time: bool,
        #[yaserde(prefix = "typ", rename = "SuggestionQuality")]
        pub suggestion_quality: mod_typ::SuggestionQuality,
        #[yaserde(prefix = "typ", rename = "AttendeeConflictDataArray")]
        pub attendee_conflict_data_array: Option<mod_typ::ArrayOfAttendeeConflictData>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfSuggestion")]
    pub struct ArrayOfSuggestion {
        #[yaserde(prefix = "typ", rename = "Suggestion")]
        pub suggestion: Vec<mod_typ::Suggestion>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SuggestionDayResult")]
    pub struct SuggestionDayResult {
        #[yaserde(prefix = "typ", rename = "Date")]
        pub date: String,
        #[yaserde(prefix = "typ", rename = "DayQuality")]
        pub day_quality: mod_typ::SuggestionQuality,
        #[yaserde(prefix = "typ", rename = "SuggestionArray")]
        pub suggestion_array: Option<mod_typ::ArrayOfSuggestion>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfSuggestionDayResult")]
    pub struct ArrayOfSuggestionDayResult {
        #[yaserde(prefix = "typ", rename = "SuggestionDayResult")]
        pub suggestion_day_result: Vec<mod_typ::SuggestionDayResult>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OofState")]
    pub struct OofState {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExternalAudience")]
    pub struct ExternalAudience {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ReplyBody")]
    pub struct ReplyBody {
        #[yaserde(prefix = "typ", rename = "Message")]
        pub message: Option<String>,
        #[yaserde(rename = "lang", attribute = true)]
        pub lang: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfEventIDType")]
    pub struct ArrayOfEventIDType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserOofSettings")]
    pub struct UserOofSettings {
        #[yaserde(prefix = "typ", rename = "OofState")]
        pub oof_state: mod_typ::OofState,
        #[yaserde(prefix = "typ", rename = "ExternalAudience")]
        pub external_audience: mod_typ::ExternalAudience,
        #[yaserde(prefix = "typ", rename = "Duration")]
        pub duration: Option<mod_typ::Duration>,
        #[yaserde(prefix = "typ", rename = "InternalReply")]
        pub internal_reply: Option<mod_typ::ReplyBody>,
        #[yaserde(prefix = "typ", rename = "ExternalReply")]
        pub external_reply: Option<mod_typ::ReplyBody>,
        #[yaserde(prefix = "typ", rename = "DeclineMeetingReply")]
        pub decline_meeting_reply: Option<mod_typ::ReplyBody>,
        #[yaserde(prefix = "typ", rename = "DeclineEventsForScheduledOOF")]
        pub decline_events_for_scheduled_oof: Option<bool>,
        #[yaserde(prefix = "typ", rename = "DeclineAllEventsForScheduledOOF")]
        pub decline_all_events_for_scheduled_oof: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CreateOOFEvent")]
        pub create_oof_event: Option<bool>,
        #[yaserde(prefix = "typ", rename = "OOFEventSubject")]
        pub oof_event_subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "AutoDeclineFutureRequestsWhenOOF")]
        pub auto_decline_future_requests_when_oof: Option<bool>,
        #[yaserde(prefix = "typ", rename = "OOFEventID")]
        pub oof_event_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "EventsToDeleteIDs")]
        pub events_to_delete_i_ds: Option<mod_typ::ArrayOfEventIDType>,
    }
    pub type OofSettings = mod_typ::UserOofSettings;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "Value")]
    pub struct Value {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ApprovalRequestDataType")]
    pub struct ApprovalRequestDataType {
        #[yaserde(prefix = "typ", rename = "IsUndecidedApprovalRequest")]
        pub is_undecided_approval_request: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ApprovalDecision")]
        pub approval_decision: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ApprovalDecisionMaker")]
        pub approval_decision_maker: Option<String>,
        #[yaserde(prefix = "typ", rename = "ApprovalDecisionTime")]
        pub approval_decision_time: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ReminderMessageDataType")]
    pub struct ReminderMessageDataType {
        #[yaserde(prefix = "typ", rename = "ReminderText")]
        pub reminder_text: Option<String>,
        #[yaserde(prefix = "typ", rename = "Location")]
        pub location: Option<String>,
        #[yaserde(prefix = "typ", rename = "StartTime")]
        pub start_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "EndTime")]
        pub end_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "AssociatedCalendarItemId")]
        pub associated_calendar_item_id: Option<mod_typ::ItemIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MessageSafetyType")]
    pub struct MessageSafetyType {
        #[yaserde(prefix = "typ", rename = "MessageSafetyLevel")]
        pub message_safety_level: Option<i32>,
        #[yaserde(prefix = "typ", rename = "MessageSafetyReason")]
        pub message_safety_reason: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Info")]
        pub info: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SendPromptType")]
    pub struct SendPromptType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "VotingOptionDataType")]
    pub struct VotingOptionDataType {
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "SendPrompt")]
        pub send_prompt: Option<mod_typ::SendPromptType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfVotingOptionDataType")]
    pub struct ArrayOfVotingOptionDataType {
        #[yaserde(prefix = "typ", rename = "VotingOptionData")]
        pub voting_option_data: Vec<mod_typ::VotingOptionDataType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "VotingInformationType")]
    pub struct VotingInformationType {
        #[yaserde(prefix = "typ", rename = "UserOptions")]
        pub user_options: Option<mod_typ::ArrayOfVotingOptionDataType>,
        #[yaserde(prefix = "typ", rename = "VotingResponse")]
        pub voting_response: Option<String>,
    }
    /// Surfaces the various id types that are supported for conversion
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "IdFormatType")]
    pub struct IdFormatType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    /// Surfaces alternate representations of an item or folder id. No change key is included.
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AlternateIdBaseType")]
    pub struct AlternateIdBaseType {
        #[yaserde(prefix = "typ", rename = "Format", attribute = true)]
        pub format: mod_typ::IdFormatType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AlternateIdType")]
    pub struct AlternateIdType {
        #[yaserde(prefix = "typ", rename = "Format", attribute = true)]
        pub format: mod_typ::IdFormatType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AlternatePublicFolderIdType")]
    pub struct AlternatePublicFolderIdType {
        #[yaserde(prefix = "typ", rename = "Format", attribute = true)]
        pub format: mod_typ::IdFormatType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AlternatePublicFolderItemIdType")]
    pub struct AlternatePublicFolderItemIdType {
        #[yaserde(prefix = "typ", rename = "Format", attribute = true)]
        pub format: mod_typ::IdFormatType,
    }
    /// A non-empty array of alternate Ids.
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfAlternateIdsType")]
    pub struct NonEmptyArrayOfAlternateIdsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserIdType")]
    pub struct UserIdType {
        #[yaserde(prefix = "typ", rename = "SID")]
        pub sid: Option<String>,
        #[yaserde(prefix = "typ", rename = "PrimarySmtpAddress")]
        pub primary_smtp_address: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "DistinguishedUser")]
        pub distinguished_user: Option<mod_typ::DistinguishedUserType>,
        #[yaserde(prefix = "typ", rename = "ExternalUserIdentity")]
        pub external_user_identity: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DistinguishedUserType")]
    pub struct DistinguishedUserType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfPermissionsType")]
    pub struct ArrayOfPermissionsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfCalendarPermissionsType")]
    pub struct ArrayOfCalendarPermissionsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfUnknownEntriesType")]
    pub struct ArrayOfUnknownEntriesType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PermissionReadAccessType")]
    pub struct PermissionReadAccessType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CalendarPermissionReadAccessType")]
    pub struct CalendarPermissionReadAccessType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BasePermissionType")]
    pub struct BasePermissionType {
        #[yaserde(prefix = "typ", rename = "UserId")]
        pub user_id: mod_typ::UserIdType,
        #[yaserde(prefix = "typ", rename = "CanCreateItems")]
        pub can_create_items: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanCreateSubFolders")]
        pub can_create_sub_folders: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFolderOwner")]
        pub is_folder_owner: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFolderVisible")]
        pub is_folder_visible: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFolderContact")]
        pub is_folder_contact: Option<bool>,
        #[yaserde(prefix = "typ", rename = "EditItems")]
        pub edit_items: Option<mod_typ::PermissionActionType>,
        #[yaserde(prefix = "typ", rename = "DeleteItems")]
        pub delete_items: Option<mod_typ::PermissionActionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PermissionType")]
    pub struct PermissionType {
        #[yaserde(prefix = "typ", rename = "UserId")]
        pub user_id: mod_typ::UserIdType,
        #[yaserde(prefix = "typ", rename = "CanCreateItems")]
        pub can_create_items: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanCreateSubFolders")]
        pub can_create_sub_folders: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFolderOwner")]
        pub is_folder_owner: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFolderVisible")]
        pub is_folder_visible: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFolderContact")]
        pub is_folder_contact: Option<bool>,
        #[yaserde(prefix = "typ", rename = "EditItems")]
        pub edit_items: Option<mod_typ::PermissionActionType>,
        #[yaserde(prefix = "typ", rename = "DeleteItems")]
        pub delete_items: Option<mod_typ::PermissionActionType>,
        #[yaserde(prefix = "typ", rename = "ReadItems")]
        pub read_items: Option<mod_typ::PermissionReadAccessType>,
        #[yaserde(prefix = "typ", rename = "PermissionLevel")]
        pub permission_level: mod_typ::PermissionLevelType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CalendarPermissionType")]
    pub struct CalendarPermissionType {
        #[yaserde(prefix = "typ", rename = "UserId")]
        pub user_id: mod_typ::UserIdType,
        #[yaserde(prefix = "typ", rename = "CanCreateItems")]
        pub can_create_items: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CanCreateSubFolders")]
        pub can_create_sub_folders: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFolderOwner")]
        pub is_folder_owner: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFolderVisible")]
        pub is_folder_visible: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsFolderContact")]
        pub is_folder_contact: Option<bool>,
        #[yaserde(prefix = "typ", rename = "EditItems")]
        pub edit_items: Option<mod_typ::PermissionActionType>,
        #[yaserde(prefix = "typ", rename = "DeleteItems")]
        pub delete_items: Option<mod_typ::PermissionActionType>,
        #[yaserde(prefix = "typ", rename = "ReadItems")]
        pub read_items: Option<mod_typ::CalendarPermissionReadAccessType>,
        #[yaserde(prefix = "typ", rename = "CalendarPermissionLevel")]
        pub calendar_permission_level: mod_typ::CalendarPermissionLevelType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PermissionActionType")]
    pub struct PermissionActionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PermissionLevelType")]
    pub struct PermissionLevelType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CalendarPermissionLevelType")]
    pub struct CalendarPermissionLevelType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PermissionSetType")]
    pub struct PermissionSetType {
        #[yaserde(prefix = "typ", rename = "Permissions")]
        pub permissions: mod_typ::ArrayOfPermissionsType,
        #[yaserde(prefix = "typ", rename = "UnknownEntries")]
        pub unknown_entries: Option<mod_typ::ArrayOfUnknownEntriesType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CalendarPermissionSetType")]
    pub struct CalendarPermissionSetType {
        #[yaserde(prefix = "typ", rename = "CalendarPermissions")]
        pub calendar_permissions: mod_typ::ArrayOfCalendarPermissionsType,
        #[yaserde(prefix = "typ", rename = "UnknownEntries")]
        pub unknown_entries: Option<mod_typ::ArrayOfUnknownEntriesType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EffectiveRightsType")]
    pub struct EffectiveRightsType {
        #[yaserde(prefix = "typ", rename = "CreateAssociated")]
        pub create_associated: bool,
        #[yaserde(prefix = "typ", rename = "CreateContents")]
        pub create_contents: bool,
        #[yaserde(prefix = "typ", rename = "CreateHierarchy")]
        pub create_hierarchy: bool,
        #[yaserde(prefix = "typ", rename = "Delete")]
        pub delete: bool,
        #[yaserde(prefix = "typ", rename = "Modify")]
        pub modify: bool,
        #[yaserde(prefix = "typ", rename = "Read")]
        pub read: bool,
        #[yaserde(prefix = "typ", rename = "ViewPrivateItems")]
        pub view_private_items: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfDelegateUserType")]
    pub struct ArrayOfDelegateUserType {
        #[yaserde(prefix = "typ", rename = "DelegateUser")]
        pub delegate_user: Vec<mod_typ::DelegateUserType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfUserIdType")]
    pub struct ArrayOfUserIdType {
        #[yaserde(prefix = "typ", rename = "UserId")]
        pub user_id: Vec<mod_typ::UserIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DeliverMeetingRequestsType")]
    pub struct DeliverMeetingRequestsType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DelegateUserType")]
    pub struct DelegateUserType {
        #[yaserde(prefix = "typ", rename = "UserId")]
        pub user_id: mod_typ::UserIdType,
        #[yaserde(prefix = "typ", rename = "DelegatePermissions")]
        pub delegate_permissions: Option<mod_typ::DelegatePermissionsType>,
        #[yaserde(prefix = "typ", rename = "ReceiveCopiesOfMeetingMessages")]
        pub receive_copies_of_meeting_messages: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ViewPrivateItems")]
        pub view_private_items: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DelegatePermissionsType")]
    pub struct DelegatePermissionsType {
        #[yaserde(prefix = "typ", rename = "CalendarFolderPermissionLevel")]
        pub calendar_folder_permission_level: Option<mod_typ::DelegateFolderPermissionLevelType>,
        #[yaserde(prefix = "typ", rename = "TasksFolderPermissionLevel")]
        pub tasks_folder_permission_level: Option<mod_typ::DelegateFolderPermissionLevelType>,
        #[yaserde(prefix = "typ", rename = "InboxFolderPermissionLevel")]
        pub inbox_folder_permission_level: Option<mod_typ::DelegateFolderPermissionLevelType>,
        #[yaserde(prefix = "typ", rename = "ContactsFolderPermissionLevel")]
        pub contacts_folder_permission_level: Option<mod_typ::DelegateFolderPermissionLevelType>,
        #[yaserde(prefix = "typ", rename = "NotesFolderPermissionLevel")]
        pub notes_folder_permission_level: Option<mod_typ::DelegateFolderPermissionLevelType>,
        #[yaserde(prefix = "typ", rename = "JournalFolderPermissionLevel")]
        pub journal_folder_permission_level: Option<mod_typ::DelegateFolderPermissionLevelType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DelegateFolderPermissionLevelType")]
    pub struct DelegateFolderPermissionLevelType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConflictResultsType")]
    pub struct ConflictResultsType {
        #[yaserde(prefix = "typ", rename = "Count")]
        pub count: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailTipTypes")]
    pub struct MailTipTypes {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OutOfOfficeMailTip")]
    pub struct OutOfOfficeMailTip {
        #[yaserde(prefix = "typ", rename = "ReplyBody")]
        pub reply_body: mod_typ::ReplyBody,
        #[yaserde(prefix = "typ", rename = "Duration")]
        pub duration: Option<mod_typ::Duration>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SmtpDomainList")]
    pub struct SmtpDomainList {
        #[yaserde(prefix = "typ", rename = "Domain")]
        pub domain: Vec<mod_typ::SmtpDomain>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SmtpDomain")]
    pub struct SmtpDomain {
        #[yaserde(prefix = "typ", rename = "Name", attribute = true)]
        pub name: String,
        #[yaserde(prefix = "typ", rename = "IncludeSubdomains", attribute = true)]
        pub include_subdomains: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailTips")]
    pub struct MailTips {
        #[yaserde(prefix = "typ", rename = "RecipientAddress")]
        pub recipient_address: mod_typ::EmailAddressType,
        #[yaserde(prefix = "typ", rename = "PendingMailTips")]
        pub pending_mail_tips: mod_typ::MailTipTypes,
        #[yaserde(prefix = "typ", rename = "OutOfOffice")]
        pub out_of_office: Option<mod_typ::OutOfOfficeMailTip>,
        #[yaserde(prefix = "typ", rename = "MailboxFull")]
        pub mailbox_full: Option<bool>,
        #[yaserde(prefix = "typ", rename = "CustomMailTip")]
        pub custom_mail_tip: Option<String>,
        #[yaserde(prefix = "typ", rename = "TotalMemberCount")]
        pub total_member_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ExternalMemberCount")]
        pub external_member_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "MaxMessageSize")]
        pub max_message_size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "DeliveryRestricted")]
        pub delivery_restricted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsModerated")]
        pub is_moderated: Option<bool>,
        #[yaserde(prefix = "typ", rename = "InvalidRecipient")]
        pub invalid_recipient: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Scope")]
        pub scope: Option<i32>,
        #[yaserde(prefix = "typ", rename = "RecipientSuggestions")]
        pub recipient_suggestions: Option<mod_typ::ArrayOfRecipientSuggestionsType>,
        #[yaserde(prefix = "typ", rename = "PreferAccessibleContent")]
        pub prefer_accessible_content: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfRecipientSuggestionsType")]
    pub struct ArrayOfRecipientSuggestionsType {
        #[yaserde(prefix = "typ", rename = "RecipientSuggestion")]
        pub recipient_suggestion: Option<mod_typ::RecipientSuggestionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RecipientSuggestionType")]
    pub struct RecipientSuggestionType {
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: String,
        #[yaserde(prefix = "typ", rename = "EmailAddress")]
        pub email_address: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ServiceConfigurationType")]
    pub struct ServiceConfigurationType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ServiceConfiguration")]
    pub struct ServiceConfiguration {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailTipsServiceConfiguration")]
    pub struct MailTipsServiceConfiguration {
        #[yaserde(prefix = "typ", rename = "MailTipsEnabled")]
        pub mail_tips_enabled: bool,
        #[yaserde(prefix = "typ", rename = "MaxRecipientsPerGetMailTipsRequest")]
        pub max_recipients_per_get_mail_tips_request: i32,
        #[yaserde(prefix = "typ", rename = "MaxMessageSize")]
        pub max_message_size: i32,
        #[yaserde(prefix = "typ", rename = "LargeAudienceThreshold")]
        pub large_audience_threshold: i32,
        #[yaserde(prefix = "typ", rename = "ShowExternalRecipientCount")]
        pub show_external_recipient_count: bool,
        #[yaserde(prefix = "typ", rename = "InternalDomains")]
        pub internal_domains: mod_typ::SmtpDomainList,
        #[yaserde(prefix = "typ", rename = "PolicyTipsEnabled")]
        pub policy_tips_enabled: bool,
        #[yaserde(prefix = "typ", rename = "LargeAudienceCap")]
        pub large_audience_cap: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UnifiedMessageServiceConfiguration")]
    pub struct UnifiedMessageServiceConfiguration {
        #[yaserde(prefix = "typ", rename = "UmEnabled")]
        pub um_enabled: bool,
        #[yaserde(prefix = "typ", rename = "PlayOnPhoneDialString")]
        pub play_on_phone_dial_string: String,
        #[yaserde(prefix = "typ", rename = "PlayOnPhoneEnabled")]
        pub play_on_phone_enabled: bool,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SharePointURLsServiceConfiguration")]
    pub struct SharePointURLsServiceConfiguration {
        #[yaserde(prefix = "typ", rename = "InternalSPMySiteHostURL")]
        pub internal_sp_my_site_host_url: String,
        #[yaserde(prefix = "typ", rename = "ExternalSPMySiteHostURL")]
        pub external_sp_my_site_host_url: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OfficeIntegrationConfiguration")]
    pub struct OfficeIntegrationConfiguration {
        #[yaserde(prefix = "typ", rename = "OfficeSidebarURL")]
        pub office_sidebar_url: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConfigurationRequestDetailsType")]
    pub struct ConfigurationRequestDetailsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfSmtpAddressType")]
    pub struct ArrayOfSmtpAddressType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfEncryptedSharedFolderDataType")]
    pub struct ArrayOfEncryptedSharedFolderDataType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EncryptedSharedFolderDataType")]
    pub struct EncryptedSharedFolderDataType {
        #[yaserde(prefix = "typ", rename = "Token")]
        pub token: mod_typ::EncryptedDataContainerType,
        #[yaserde(prefix = "typ", rename = "Data")]
        pub data: mod_typ::EncryptedDataContainerType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EncryptedDataContainerType")]
    pub struct EncryptedDataContainerType {
        #[yaserde(rename = "body")]
        pub body: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfInvalidRecipientsType")]
    pub struct ArrayOfInvalidRecipientsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InvalidRecipientType")]
    pub struct InvalidRecipientType {
        #[yaserde(prefix = "typ", rename = "SmtpAddress")]
        pub smtp_address: mod_typ::NonEmptyStringType,
        #[yaserde(prefix = "typ", rename = "ResponseCode")]
        pub response_code: mod_typ::InvalidRecipientResponseCodeType,
        #[yaserde(prefix = "typ", rename = "MessageText")]
        pub message_text: Option<String>,
    }
    /// Represents the message keys that can be returned for invalid recipients
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InvalidRecipientResponseCodeType")]
    pub struct InvalidRecipientResponseCodeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AcceptSharingInvitationType")]
    pub struct AcceptSharingInvitationType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SharingDataType")]
    pub struct SharingDataType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PhoneCallIdType")]
    pub struct PhoneCallIdType {
        #[yaserde(prefix = "typ", rename = "Id", attribute = true)]
        pub id: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PhoneCallInformationType")]
    pub struct PhoneCallInformationType {
        #[yaserde(prefix = "typ", rename = "PhoneCallState")]
        pub phone_call_state: mod_typ::PhoneCallStateType,
        #[yaserde(prefix = "typ", rename = "ConnectionFailureCause")]
        pub connection_failure_cause: mod_typ::ConnectionFailureCauseType,
        #[yaserde(prefix = "typ", rename = "SIPResponseText")]
        pub sip_response_text: Option<String>,
        #[yaserde(prefix = "typ", rename = "SIPResponseCode")]
        pub sip_response_code: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PhoneCallStateType")]
    pub struct PhoneCallStateType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConnectionFailureCauseType")]
    pub struct ConnectionFailureCauseType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserConfigurationNameType")]
    pub struct UserConfigurationNameType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserConfigurationDictionaryObjectTypesType")]
    pub struct UserConfigurationDictionaryObjectTypesType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserConfigurationDictionaryObjectType")]
    pub struct UserConfigurationDictionaryObjectType {
        #[yaserde(prefix = "typ", rename = "Type")]
        pub r#type: mod_typ::UserConfigurationDictionaryObjectTypesType,
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: Vec<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserConfigurationDictionaryEntryType")]
    pub struct UserConfigurationDictionaryEntryType {
        #[yaserde(prefix = "typ", rename = "DictionaryKey")]
        pub dictionary_key: mod_typ::UserConfigurationDictionaryObjectType,
        #[yaserde(prefix = "typ", rename = "DictionaryValue")]
        pub dictionary_value: mod_typ::UserConfigurationDictionaryObjectType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserConfigurationDictionaryType")]
    pub struct UserConfigurationDictionaryType {
        #[yaserde(prefix = "typ", rename = "DictionaryEntry")]
        pub dictionary_entry: Vec<mod_typ::UserConfigurationDictionaryEntryType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserConfigurationType")]
    pub struct UserConfigurationType {
        #[yaserde(prefix = "typ", rename = "UserConfigurationName")]
        pub user_configuration_name: mod_typ::UserConfigurationNameType,
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "Dictionary")]
        pub dictionary: Option<mod_typ::UserConfigurationDictionaryType>,
        #[yaserde(prefix = "typ", rename = "XmlData")]
        pub xml_data: Option<String>,
        #[yaserde(prefix = "typ", rename = "BinaryData")]
        pub binary_data: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserConfigurationPropertyType")]
    pub struct UserConfigurationPropertyType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProtectionRulesServiceConfiguration")]
    pub struct ProtectionRulesServiceConfiguration {
        #[yaserde(prefix = "typ", rename = "Rules")]
        pub rules: mod_typ::ArrayOfProtectionRulesType,
        #[yaserde(prefix = "typ", rename = "InternalDomains")]
        pub internal_domains: mod_typ::SmtpDomainList,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfProtectionRulesType")]
    pub struct ArrayOfProtectionRulesType {
        #[yaserde(prefix = "typ", rename = "Rule")]
        pub rule: Vec<mod_typ::ProtectionRuleType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProtectionRuleType")]
    pub struct ProtectionRuleType {
        #[yaserde(prefix = "typ", rename = "Condition")]
        pub condition: mod_typ::ProtectionRuleConditionType,
        #[yaserde(prefix = "typ", rename = "Action")]
        pub action: mod_typ::ProtectionRuleActionType,
        #[yaserde(prefix = "typ", rename = "Name", attribute = true)]
        pub name: String,
        #[yaserde(prefix = "typ", rename = "UserOverridable", attribute = true)]
        pub user_overridable: bool,
        #[yaserde(prefix = "typ", rename = "Priority", attribute = true)]
        pub priority: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProtectionRuleConditionType")]
    pub struct ProtectionRuleConditionType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProtectionRuleAndType")]
    pub struct ProtectionRuleAndType {
        #[yaserde(prefix = "typ", rename = "AllInternal")]
        pub all_internal: Vec<mod_typ::ProtectionRuleAllInternalType>,
        #[yaserde(prefix = "typ", rename = "And")]
        pub and: Vec<mod_typ::ProtectionRuleAndType>,
        #[yaserde(prefix = "typ", rename = "RecipientIs")]
        pub recipient_is: Vec<mod_typ::ProtectionRuleRecipientIsType>,
        #[yaserde(prefix = "typ", rename = "SenderDepartments")]
        pub sender_departments: Vec<mod_typ::ProtectionRuleSenderDepartmentsType>,
        #[yaserde(prefix = "typ", rename = "True")]
        pub r#true: Vec<mod_typ::ProtectionRuleTrueType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProtectionRuleRecipientIsType")]
    pub struct ProtectionRuleRecipientIsType {
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: Vec<mod_typ::ProtectionRuleValueType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProtectionRuleSenderDepartmentsType")]
    pub struct ProtectionRuleSenderDepartmentsType {
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: Vec<mod_typ::ProtectionRuleValueType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProtectionRuleTrueType")]
    pub struct ProtectionRuleTrueType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProtectionRuleAllInternalType")]
    pub struct ProtectionRuleAllInternalType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProtectionRuleValueType")]
    pub struct ProtectionRuleValueType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProtectionRuleActionKindType")]
    pub struct ProtectionRuleActionKindType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProtectionRuleActionType")]
    pub struct ProtectionRuleActionType {
        #[yaserde(prefix = "typ", rename = "Argument")]
        pub argument: Vec<mod_typ::ProtectionRuleArgumentType>,
        #[yaserde(prefix = "typ", rename = "Name", attribute = true)]
        pub name: mod_typ::ProtectionRuleActionKindType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ProtectionRuleArgumentType")]
    pub struct ProtectionRuleArgumentType {
        #[yaserde(prefix = "typ", rename = "Value", attribute = true)]
        pub value: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PolicyNudgeRulesServiceConfiguration")]
    pub struct PolicyNudgeRulesServiceConfiguration {
        #[yaserde(rename = "body")]
        pub body: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfFolderIdType")]
    pub struct ArrayOfFolderIdType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TeamMailboxLifecycleStateType")]
    pub struct TeamMailboxLifecycleStateType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    /// Surfaces the various report message action types
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ReportMessageActionType")]
    pub struct ReportMessageActionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FindMessageTrackingSearchResultType")]
    pub struct FindMessageTrackingSearchResultType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfFindMessageTrackingSearchResultType")]
    pub struct ArrayOfFindMessageTrackingSearchResultType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MessageTrackingReportTemplateType")]
    pub struct MessageTrackingReportTemplateType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RecipientTrackingEventType")]
    pub struct RecipientTrackingEventType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MessageTrackingReportType")]
    pub struct MessageTrackingReportType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "TrackingPropertyType")]
    pub struct TrackingPropertyType {
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: String,
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfTrackingPropertiesType")]
    pub struct ArrayOfTrackingPropertiesType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfArraysOfTrackingPropertiesType")]
    pub struct ArrayOfArraysOfTrackingPropertiesType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfRecipientTrackingEventType")]
    pub struct ArrayOfRecipientTrackingEventType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RulePredicateSizeRangeType")]
    pub struct RulePredicateSizeRangeType {
        #[yaserde(prefix = "typ", rename = "MinimumSize")]
        pub minimum_size: Option<i32>,
        #[yaserde(prefix = "typ", rename = "MaximumSize")]
        pub maximum_size: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RulePredicateDateRangeType")]
    pub struct RulePredicateDateRangeType {
        #[yaserde(prefix = "typ", rename = "StartDateTime")]
        pub start_date_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "EndDateTime")]
        pub end_date_time: Option<String>,
    }
    /// Flagged for action enumeration, currently used in FlaggedForAction rule predicate
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FlaggedForActionType")]
    pub struct FlaggedForActionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RulePredicatesType")]
    pub struct RulePredicatesType {
        #[yaserde(prefix = "typ", rename = "Categories")]
        pub categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "ContainsBodyStrings")]
        pub contains_body_strings: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "ContainsHeaderStrings")]
        pub contains_header_strings: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "ContainsRecipientStrings")]
        pub contains_recipient_strings: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "ContainsSenderStrings")]
        pub contains_sender_strings: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "ContainsSubjectOrBodyStrings")]
        pub contains_subject_or_body_strings: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "ContainsSubjectStrings")]
        pub contains_subject_strings: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "FlaggedForAction")]
        pub flagged_for_action: Option<mod_typ::FlaggedForActionType>,
        #[yaserde(prefix = "typ", rename = "FromAddresses")]
        pub from_addresses: Option<mod_typ::ArrayOfEmailAddressesType>,
        #[yaserde(prefix = "typ", rename = "FromConnectedAccounts")]
        pub from_connected_accounts: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "HasAttachments")]
        pub has_attachments: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "IsApprovalRequest")]
        pub is_approval_request: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsAutomaticForward")]
        pub is_automatic_forward: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsAutomaticReply")]
        pub is_automatic_reply: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsEncrypted")]
        pub is_encrypted: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsMeetingRequest")]
        pub is_meeting_request: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsMeetingResponse")]
        pub is_meeting_response: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsNDR")]
        pub is_ndr: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsPermissionControlled")]
        pub is_permission_controlled: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsReadReceipt")]
        pub is_read_receipt: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsSigned")]
        pub is_signed: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsVoicemail")]
        pub is_voicemail: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ItemClasses")]
        pub item_classes: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "MessageClassifications")]
        pub message_classifications: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "NotSentToMe")]
        pub not_sent_to_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "SentCcMe")]
        pub sent_cc_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "SentOnlyToMe")]
        pub sent_only_to_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "SentToAddresses")]
        pub sent_to_addresses: Option<mod_typ::ArrayOfEmailAddressesType>,
        #[yaserde(prefix = "typ", rename = "SentToMe")]
        pub sent_to_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "SentToOrCcMe")]
        pub sent_to_or_cc_me: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Sensitivity")]
        pub sensitivity: Option<mod_typ::SensitivityChoicesType>,
        #[yaserde(prefix = "typ", rename = "WithinDateRange")]
        pub within_date_range: Option<mod_typ::RulePredicateDateRangeType>,
        #[yaserde(prefix = "typ", rename = "WithinSizeRange")]
        pub within_size_range: Option<mod_typ::RulePredicateSizeRangeType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RuleActionsType")]
    pub struct RuleActionsType {
        #[yaserde(prefix = "typ", rename = "AssignCategories")]
        pub assign_categories: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "CopyToFolder")]
        pub copy_to_folder: Option<mod_typ::TargetFolderIdType>,
        #[yaserde(prefix = "typ", rename = "Delete")]
        pub delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ForwardAsAttachmentToRecipients")]
        pub forward_as_attachment_to_recipients: Option<mod_typ::ArrayOfEmailAddressesType>,
        #[yaserde(prefix = "typ", rename = "ForwardToRecipients")]
        pub forward_to_recipients: Option<mod_typ::ArrayOfEmailAddressesType>,
        #[yaserde(prefix = "typ", rename = "MarkImportance")]
        pub mark_importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "MarkAsRead")]
        pub mark_as_read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "MoveToFolder")]
        pub move_to_folder: Option<mod_typ::TargetFolderIdType>,
        #[yaserde(prefix = "typ", rename = "PermanentDelete")]
        pub permanent_delete: Option<bool>,
        #[yaserde(prefix = "typ", rename = "RedirectToRecipients")]
        pub redirect_to_recipients: Option<mod_typ::ArrayOfEmailAddressesType>,
        #[yaserde(prefix = "typ", rename = "SendSMSAlertToRecipients")]
        pub send_sms_alert_to_recipients: Option<mod_typ::ArrayOfEmailAddressesType>,
        #[yaserde(prefix = "typ", rename = "ServerReplyWithMessage")]
        pub server_reply_with_message: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "StopProcessingRules")]
        pub stop_processing_rules: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RuleType")]
    pub struct RuleType {
        #[yaserde(prefix = "typ", rename = "RuleId")]
        pub rule_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: String,
        #[yaserde(prefix = "typ", rename = "Priority")]
        pub priority: i32,
        #[yaserde(prefix = "typ", rename = "IsEnabled")]
        pub is_enabled: bool,
        #[yaserde(prefix = "typ", rename = "IsNotSupported")]
        pub is_not_supported: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsInError")]
        pub is_in_error: Option<bool>,
        #[yaserde(prefix = "typ", rename = "Conditions")]
        pub conditions: Option<mod_typ::RulePredicatesType>,
        #[yaserde(prefix = "typ", rename = "Exceptions")]
        pub exceptions: Option<mod_typ::RulePredicatesType>,
        #[yaserde(prefix = "typ", rename = "Actions")]
        pub actions: Option<mod_typ::RuleActionsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfRulesType")]
    pub struct ArrayOfRulesType {
        #[yaserde(prefix = "typ", rename = "Rule")]
        pub rule: Vec<mod_typ::RuleType>,
    }
    /// Rule field URI enumerates all possible rule fields that could trigger validation error
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RuleFieldURIType")]
    pub struct RuleFieldURIType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    /// Rule validation error code describing what failed validation for each rule predicate or action.
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RuleValidationErrorCodeType")]
    pub struct RuleValidationErrorCodeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RuleValidationErrorType")]
    pub struct RuleValidationErrorType {
        #[yaserde(prefix = "typ", rename = "FieldURI")]
        pub field_uri: mod_typ::RuleFieldURIType,
        #[yaserde(prefix = "typ", rename = "ErrorCode")]
        pub error_code: mod_typ::RuleValidationErrorCodeType,
        #[yaserde(prefix = "typ", rename = "ErrorMessage")]
        pub error_message: String,
        #[yaserde(prefix = "typ", rename = "FieldValue")]
        pub field_value: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfRuleValidationErrorsType")]
    pub struct ArrayOfRuleValidationErrorsType {
        #[yaserde(prefix = "typ", rename = "Error")]
        pub error: Vec<mod_typ::RuleValidationErrorType>,
    }
    /// Represents a rule operation to be performed
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RuleOperationType")]
    pub struct RuleOperationType {}
    /// Represents an array of rule operations to be performed
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfRuleOperationsType")]
    pub struct ArrayOfRuleOperationsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CreateRuleOperationType")]
    pub struct CreateRuleOperationType {
        #[yaserde(prefix = "typ", rename = "Rule")]
        pub rule: mod_typ::RuleType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SetRuleOperationType")]
    pub struct SetRuleOperationType {
        #[yaserde(prefix = "typ", rename = "Rule")]
        pub rule: mod_typ::RuleType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DeleteRuleOperationType")]
    pub struct DeleteRuleOperationType {
        #[yaserde(prefix = "typ", rename = "RuleId")]
        pub rule_id: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RuleOperationErrorType")]
    pub struct RuleOperationErrorType {
        #[yaserde(prefix = "typ", rename = "OperationIndex")]
        pub operation_index: i32,
        #[yaserde(prefix = "typ", rename = "ValidationErrors")]
        pub validation_errors: mod_typ::ArrayOfRuleValidationErrorsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfRuleOperationErrorsType")]
    pub struct ArrayOfRuleOperationErrorsType {
        #[yaserde(prefix = "typ", rename = "RuleOperationError")]
        pub rule_operation_error: Vec<mod_typ::RuleOperationErrorType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchItemKindType")]
    pub struct SearchItemKindType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfSearchItemKindsType")]
    pub struct ArrayOfSearchItemKindsType {
        #[yaserde(prefix = "typ", rename = "SearchItemKind")]
        pub search_item_kind: Vec<mod_typ::SearchItemKindType>,
    }
    /// User Mailbox.
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserMailboxType")]
    pub struct UserMailboxType {
        #[yaserde(prefix = "typ", rename = "Id", attribute = true)]
        pub id: String,
        #[yaserde(prefix = "typ", rename = "IsArchive", attribute = true)]
        pub is_archive: bool,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfUserMailboxesType")]
    pub struct ArrayOfUserMailboxesType {
        #[yaserde(prefix = "typ", rename = "UserMailbox")]
        pub user_mailbox: Vec<mod_typ::UserMailboxType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchableMailboxType")]
    pub struct SearchableMailboxType {
        #[yaserde(prefix = "typ", rename = "Guid")]
        pub guid: mod_typ::GuidType,
        #[yaserde(prefix = "typ", rename = "PrimarySmtpAddress")]
        pub primary_smtp_address: String,
        #[yaserde(prefix = "typ", rename = "IsExternalMailbox")]
        pub is_external_mailbox: bool,
        #[yaserde(prefix = "typ", rename = "ExternalEmailAddress")]
        pub external_email_address: String,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: String,
        #[yaserde(prefix = "typ", rename = "IsMembershipGroup")]
        pub is_membership_group: bool,
        #[yaserde(prefix = "typ", rename = "ReferenceId")]
        pub reference_id: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfSearchableMailboxesType")]
    pub struct ArrayOfSearchableMailboxesType {
        #[yaserde(prefix = "typ", rename = "SearchableMailbox")]
        pub searchable_mailbox: Vec<mod_typ::SearchableMailboxType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "KeywordStatisticsSearchResultType")]
    pub struct KeywordStatisticsSearchResultType {
        #[yaserde(prefix = "typ", rename = "Keyword")]
        pub keyword: String,
        #[yaserde(prefix = "typ", rename = "ItemHits")]
        pub item_hits: i32,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: i64,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfKeywordStatisticsSearchResultsType")]
    pub struct ArrayOfKeywordStatisticsSearchResultsType {
        #[yaserde(prefix = "typ", rename = "KeywordStat")]
        pub keyword_stat: Vec<mod_typ::KeywordStatisticsSearchResultType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailboxStatisticsSearchResultType")]
    pub struct MailboxStatisticsSearchResultType {
        #[yaserde(prefix = "typ", rename = "UserMailbox")]
        pub user_mailbox: mod_typ::UserMailboxType,
        #[yaserde(prefix = "typ", rename = "KeywordStatisticsSearchResult")]
        pub keyword_statistics_search_result: Option<mod_typ::KeywordStatisticsSearchResultType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExtendedAttributeType")]
    pub struct ExtendedAttributeType {
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: String,
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfExtendedAttributesType")]
    pub struct ArrayOfExtendedAttributesType {
        #[yaserde(prefix = "typ", rename = "ExtendedAttribute")]
        pub extended_attribute: Vec<mod_typ::ExtendedAttributeType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailboxSearchLocationType")]
    pub struct MailboxSearchLocationType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailboxSearchScopeType")]
    pub struct MailboxSearchScopeType {
        #[yaserde(prefix = "typ", rename = "Mailbox")]
        pub mailbox: String,
        #[yaserde(prefix = "typ", rename = "SearchScope")]
        pub search_scope: mod_typ::MailboxSearchLocationType,
        #[yaserde(prefix = "typ", rename = "ExtendedAttributes")]
        pub extended_attributes: Option<mod_typ::ArrayOfExtendedAttributesType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfMailboxSearchScopesType")]
    pub struct NonEmptyArrayOfMailboxSearchScopesType {
        #[yaserde(prefix = "typ", rename = "MailboxSearchScope")]
        pub mailbox_search_scope: Vec<mod_typ::MailboxSearchScopeType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailboxQueryType")]
    pub struct MailboxQueryType {
        #[yaserde(prefix = "typ", rename = "Query")]
        pub query: String,
        #[yaserde(prefix = "typ", rename = "MailboxSearchScopes")]
        pub mailbox_search_scopes: mod_typ::NonEmptyArrayOfMailboxSearchScopesType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PreviewItemMailboxType")]
    pub struct PreviewItemMailboxType {
        #[yaserde(prefix = "typ", rename = "MailboxId")]
        pub mailbox_id: String,
        #[yaserde(prefix = "typ", rename = "PrimarySmtpAddress")]
        pub primary_smtp_address: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfMailboxQueriesType")]
    pub struct NonEmptyArrayOfMailboxQueriesType {
        #[yaserde(prefix = "typ", rename = "MailboxQuery")]
        pub mailbox_query: Vec<mod_typ::MailboxQueryType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchResultType")]
    pub struct SearchResultType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchPageDirectionType")]
    pub struct SearchPageDirectionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PreviewItemBaseShapeType")]
    pub struct PreviewItemBaseShapeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfExtendedFieldURIsType")]
    pub struct NonEmptyArrayOfExtendedFieldURIsType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PreviewItemResponseShapeType")]
    pub struct PreviewItemResponseShapeType {
        #[yaserde(prefix = "typ", rename = "BaseShape")]
        pub base_shape: mod_typ::PreviewItemBaseShapeType,
        #[yaserde(prefix = "typ", rename = "AdditionalProperties")]
        pub additional_properties: Option<mod_typ::NonEmptyArrayOfExtendedFieldURIsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchPreviewItemType")]
    pub struct SearchPreviewItemType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "Mailbox")]
        pub mailbox: Option<mod_typ::PreviewItemMailboxType>,
        #[yaserde(prefix = "typ", rename = "ParentId")]
        pub parent_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "ItemClass")]
        pub item_class: Option<mod_typ::ItemClassType>,
        #[yaserde(prefix = "typ", rename = "UniqueHash")]
        pub unique_hash: Option<String>,
        #[yaserde(prefix = "typ", rename = "SortValue")]
        pub sort_value: Option<String>,
        #[yaserde(prefix = "typ", rename = "OwaLink")]
        pub owa_link: Option<String>,
        #[yaserde(prefix = "typ", rename = "Sender")]
        pub sender: Option<String>,
        #[yaserde(prefix = "typ", rename = "ToRecipients")]
        pub to_recipients: Option<mod_typ::ArrayOfSmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "CcRecipients")]
        pub cc_recipients: Option<mod_typ::ArrayOfSmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "BccRecipients")]
        pub bcc_recipients: Option<mod_typ::ArrayOfSmtpAddressType>,
        #[yaserde(prefix = "typ", rename = "CreatedTime")]
        pub created_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ReceivedTime")]
        pub received_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "SentTime")]
        pub sent_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "Subject")]
        pub subject: Option<String>,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: Option<i64>,
        #[yaserde(prefix = "typ", rename = "Preview")]
        pub preview: Option<String>,
        #[yaserde(prefix = "typ", rename = "Importance")]
        pub importance: Option<mod_typ::ImportanceChoicesType>,
        #[yaserde(prefix = "typ", rename = "Read")]
        pub read: Option<bool>,
        #[yaserde(prefix = "typ", rename = "HasAttachment")]
        pub has_attachment: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperties")]
        pub extended_properties: Option<mod_typ::NonEmptyArrayOfExtendedPropertyType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfSearchPreviewItemsType")]
    pub struct ArrayOfSearchPreviewItemsType {
        #[yaserde(prefix = "typ", rename = "SearchPreviewItem")]
        pub search_preview_item: Vec<mod_typ::SearchPreviewItemType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FailedSearchMailboxType")]
    pub struct FailedSearchMailboxType {
        #[yaserde(prefix = "typ", rename = "Mailbox")]
        pub mailbox: String,
        #[yaserde(prefix = "typ", rename = "ErrorCode")]
        pub error_code: i32,
        #[yaserde(prefix = "typ", rename = "ErrorMessage")]
        pub error_message: String,
        #[yaserde(prefix = "typ", rename = "IsArchive")]
        pub is_archive: bool,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfFailedSearchMailboxesType")]
    pub struct ArrayOfFailedSearchMailboxesType {
        #[yaserde(prefix = "typ", rename = "FailedMailbox")]
        pub failed_mailbox: Vec<mod_typ::FailedSearchMailboxType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchMailboxesResultType")]
    pub struct SearchMailboxesResultType {
        #[yaserde(prefix = "typ", rename = "SearchQueries")]
        pub search_queries: mod_typ::NonEmptyArrayOfMailboxQueriesType,
        #[yaserde(prefix = "typ", rename = "ResultType")]
        pub result_type: mod_typ::SearchResultType,
        #[yaserde(prefix = "typ", rename = "ItemCount")]
        pub item_count: i64,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: i64,
        #[yaserde(prefix = "typ", rename = "PageItemCount")]
        pub page_item_count: i32,
        #[yaserde(prefix = "typ", rename = "PageItemSize")]
        pub page_item_size: i64,
        #[yaserde(prefix = "typ", rename = "KeywordStats")]
        pub keyword_stats: Option<mod_typ::ArrayOfKeywordStatisticsSearchResultsType>,
        #[yaserde(prefix = "typ", rename = "Items")]
        pub items: Option<mod_typ::ArrayOfSearchPreviewItemsType>,
        #[yaserde(prefix = "typ", rename = "FailedMailboxes")]
        pub failed_mailboxes: Option<mod_typ::ArrayOfFailedSearchMailboxesType>,
        #[yaserde(prefix = "typ", rename = "Refiners")]
        pub refiners: Option<mod_typ::ArrayOfSearchRefinerItemsType>,
        #[yaserde(prefix = "typ", rename = "MailboxStats")]
        pub mailbox_stats: Option<mod_typ::ArrayOfMailboxStatisticsItemsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchRefinerItemType")]
    pub struct SearchRefinerItemType {
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: String,
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: String,
        #[yaserde(prefix = "typ", rename = "Count")]
        pub count: i64,
        #[yaserde(prefix = "typ", rename = "Token")]
        pub token: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfSearchRefinerItemsType")]
    pub struct ArrayOfSearchRefinerItemsType {
        #[yaserde(prefix = "typ", rename = "Refiner")]
        pub refiner: Vec<mod_typ::SearchRefinerItemType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailboxStatisticsItemType")]
    pub struct MailboxStatisticsItemType {
        #[yaserde(prefix = "typ", rename = "MailboxId")]
        pub mailbox_id: String,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: String,
        #[yaserde(prefix = "typ", rename = "ItemCount")]
        pub item_count: i64,
        #[yaserde(prefix = "typ", rename = "Size")]
        pub size: i64,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfMailboxStatisticsItemsType")]
    pub struct ArrayOfMailboxStatisticsItemsType {
        #[yaserde(prefix = "typ", rename = "MailboxStat")]
        pub mailbox_stat: Vec<mod_typ::MailboxStatisticsItemType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "HoldActionType")]
    pub struct HoldActionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "HoldStatusType")]
    pub struct HoldStatusType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailboxHoldStatusType")]
    pub struct MailboxHoldStatusType {
        #[yaserde(prefix = "typ", rename = "Mailbox")]
        pub mailbox: String,
        #[yaserde(prefix = "typ", rename = "Status")]
        pub status: mod_typ::HoldStatusType,
        #[yaserde(prefix = "typ", rename = "AdditionalInfo")]
        pub additional_info: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfMailboxHoldStatusType")]
    pub struct ArrayOfMailboxHoldStatusType {
        #[yaserde(prefix = "typ", rename = "MailboxHoldStatus")]
        pub mailbox_hold_status: Vec<mod_typ::MailboxHoldStatusType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailboxHoldResultType")]
    pub struct MailboxHoldResultType {
        #[yaserde(prefix = "typ", rename = "HoldId")]
        pub hold_id: String,
        #[yaserde(prefix = "typ", rename = "Query")]
        pub query: Option<String>,
        #[yaserde(prefix = "typ", rename = "MailboxHoldStatuses")]
        pub mailbox_hold_statuses: mod_typ::ArrayOfMailboxHoldStatusType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfLegacyDNsType")]
    pub struct NonEmptyArrayOfLegacyDNsType {
        #[yaserde(prefix = "typ", rename = "LegacyDN")]
        pub legacy_dn: Vec<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonIndexableItemStatisticType")]
    pub struct NonIndexableItemStatisticType {
        #[yaserde(prefix = "typ", rename = "Mailbox")]
        pub mailbox: String,
        #[yaserde(prefix = "typ", rename = "ItemCount")]
        pub item_count: i64,
        #[yaserde(prefix = "typ", rename = "ErrorMessage")]
        pub error_message: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfNonIndexableItemStatisticsType")]
    pub struct ArrayOfNonIndexableItemStatisticsType {
        #[yaserde(prefix = "typ", rename = "NonIndexableItemStatistic")]
        pub non_indexable_item_statistic: Vec<mod_typ::NonIndexableItemStatisticType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ItemIndexErrorType")]
    pub struct ItemIndexErrorType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonIndexableItemDetailType")]
    pub struct NonIndexableItemDetailType {
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "ErrorCode")]
        pub error_code: mod_typ::ItemIndexErrorType,
        #[yaserde(prefix = "typ", rename = "ErrorDescription")]
        pub error_description: String,
        #[yaserde(prefix = "typ", rename = "IsPartiallyIndexed")]
        pub is_partially_indexed: bool,
        #[yaserde(prefix = "typ", rename = "IsPermanentFailure")]
        pub is_permanent_failure: bool,
        #[yaserde(prefix = "typ", rename = "SortValue")]
        pub sort_value: String,
        #[yaserde(prefix = "typ", rename = "AttemptCount")]
        pub attempt_count: i32,
        #[yaserde(prefix = "typ", rename = "LastAttemptTime")]
        pub last_attempt_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "AdditionalInfo")]
        pub additional_info: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfNonIndexableItemDetailsType")]
    pub struct ArrayOfNonIndexableItemDetailsType {
        #[yaserde(prefix = "typ", rename = "NonIndexableItemDetail")]
        pub non_indexable_item_detail: Vec<mod_typ::NonIndexableItemDetailType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonIndexableItemDetailResultType")]
    pub struct NonIndexableItemDetailResultType {
        #[yaserde(prefix = "typ", rename = "Items")]
        pub items: Option<mod_typ::ArrayOfNonIndexableItemDetailsType>,
        #[yaserde(prefix = "typ", rename = "FailedMailboxes")]
        pub failed_mailboxes: Option<mod_typ::ArrayOfFailedSearchMailboxesType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DiscoverySearchConfigurationType")]
    pub struct DiscoverySearchConfigurationType {
        #[yaserde(prefix = "typ", rename = "SearchId")]
        pub search_id: String,
        #[yaserde(prefix = "typ", rename = "SearchQuery")]
        pub search_query: String,
        #[yaserde(prefix = "typ", rename = "SearchableMailboxes")]
        pub searchable_mailboxes: Option<mod_typ::ArrayOfSearchableMailboxesType>,
        #[yaserde(prefix = "typ", rename = "InPlaceHoldIdentity")]
        pub in_place_hold_identity: Option<String>,
        #[yaserde(prefix = "typ", rename = "ManagedByOrganization")]
        pub managed_by_organization: Option<String>,
        #[yaserde(prefix = "typ", rename = "Language")]
        pub language: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfDiscoverySearchConfigurationType")]
    pub struct ArrayOfDiscoverySearchConfigurationType {
        #[yaserde(prefix = "typ", rename = "DiscoverySearchConfiguration")]
        pub discovery_search_configuration: Vec<mod_typ::DiscoverySearchConfigurationType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RetentionTagType")]
    pub struct RetentionTagType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserPhotoSizeType")]
    pub struct UserPhotoSizeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "UserPhotoTypeType")]
    pub struct UserPhotoTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ElcFolderType")]
    pub struct ElcFolderType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RetentionActionType")]
    pub struct RetentionActionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RetentionPolicyTagType")]
    pub struct RetentionPolicyTagType {
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: String,
        #[yaserde(prefix = "typ", rename = "RetentionId")]
        pub retention_id: mod_typ::GuidType,
        #[yaserde(prefix = "typ", rename = "RetentionPeriod")]
        pub retention_period: i32,
        #[yaserde(prefix = "typ", rename = "Type")]
        pub r#type: mod_typ::ElcFolderType,
        #[yaserde(prefix = "typ", rename = "RetentionAction")]
        pub retention_action: mod_typ::RetentionActionType,
        #[yaserde(prefix = "typ", rename = "Description")]
        pub description: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsVisible")]
        pub is_visible: bool,
        #[yaserde(prefix = "typ", rename = "OptedInto")]
        pub opted_into: bool,
        #[yaserde(prefix = "typ", rename = "IsArchive")]
        pub is_archive: bool,
        #[yaserde(prefix = "typ", rename = "ParentLabelIdentity")]
        pub parent_label_identity: Option<String>,
        #[yaserde(prefix = "typ", rename = "Priority")]
        pub priority: Option<i32>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfRetentionPolicyTagsType")]
    pub struct ArrayOfRetentionPolicyTagsType {
        #[yaserde(prefix = "typ", rename = "RetentionPolicyTag")]
        pub retention_policy_tag: Vec<mod_typ::RetentionPolicyTagType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RetentionType")]
    pub struct RetentionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ClientExtensionProvidedToType")]
    pub struct ClientExtensionProvidedToType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ClientExtensionTypeType")]
    pub struct ClientExtensionTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ClientExtensionScopeType")]
    pub struct ClientExtensionScopeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ClientExtensionType")]
    pub struct ClientExtensionType {
        #[yaserde(prefix = "typ", rename = "SpecificUsers")]
        pub specific_users: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "Manifest")]
        pub manifest: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsAvailable", attribute = true)]
        pub is_available: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsMandatory", attribute = true)]
        pub is_mandatory: Option<bool>,
        #[yaserde(prefix = "typ", rename = "IsEnabledByDefault", attribute = true)]
        pub is_enabled_by_default: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ProvidedTo", attribute = true)]
        pub provided_to: Option<mod_typ::ClientExtensionProvidedToType>,
        #[yaserde(prefix = "typ", rename = "Type", attribute = true)]
        pub r#type: Option<mod_typ::ClientExtensionTypeType>,
        #[yaserde(prefix = "typ", rename = "Scope", attribute = true)]
        pub scope: Option<mod_typ::ClientExtensionScopeType>,
        #[yaserde(prefix = "typ", rename = "MarketplaceAssetId", attribute = true)]
        pub marketplace_asset_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "MarketplaceContentMarket", attribute = true)]
        pub marketplace_content_market: Option<String>,
        #[yaserde(prefix = "typ", rename = "AppStatus", attribute = true)]
        pub app_status: Option<String>,
        #[yaserde(prefix = "typ", rename = "Etoken", attribute = true)]
        pub etoken: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstalledDateTime", attribute = true)]
        pub installed_date_time: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ConsentStateType")]
    pub struct ConsentStateType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ImGroupType")]
    pub struct ImGroupType {
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: mod_typ::NonEmptyStringType,
        #[yaserde(prefix = "typ", rename = "GroupType")]
        pub group_type: mod_typ::NonEmptyStringType,
        #[yaserde(prefix = "typ", rename = "ExchangeStoreId")]
        pub exchange_store_id: Option<mod_typ::ItemIdType>,
        #[yaserde(prefix = "typ", rename = "MemberCorrelationKey")]
        pub member_correlation_key: Option<mod_typ::NonEmptyArrayOfItemIdsType>,
        #[yaserde(prefix = "typ", rename = "ExtendedProperties")]
        pub extended_properties: Option<mod_typ::NonEmptyArrayOfExtendedPropertyType>,
        #[yaserde(prefix = "typ", rename = "SmtpAddress")]
        pub smtp_address: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfImGroupType")]
    pub struct ArrayOfImGroupType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ImItemListType")]
    pub struct ImItemListType {
        #[yaserde(prefix = "typ", rename = "Groups")]
        pub groups: Option<mod_typ::ArrayOfImGroupType>,
        #[yaserde(prefix = "typ", rename = "Personas")]
        pub personas: Option<mod_typ::ArrayOfPeopleType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfExtendedFieldURIs")]
    pub struct NonEmptyArrayOfExtendedFieldURIs {}
    /// List of possible reasons for disabling the client extension
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DisableReasonType")]
    pub struct DisableReasonType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyStateDefinitionType")]
    pub struct NonEmptyStateDefinitionType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BaseCalendarItemStateDefinitionType")]
    pub struct BaseCalendarItemStateDefinitionType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DeletedOccurrenceStateDefinitionType")]
    pub struct DeletedOccurrenceStateDefinitionType {
        #[yaserde(prefix = "typ", rename = "OccurrenceDate")]
        pub occurrence_date: String,
        #[yaserde(prefix = "typ", rename = "IsOccurrencePresent")]
        pub is_occurrence_present: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DeleteFromFolderStateDefinitionType")]
    pub struct DeleteFromFolderStateDefinitionType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "LocationBasedStateDefinitionType")]
    pub struct LocationBasedStateDefinitionType {
        #[yaserde(prefix = "typ", rename = "OrganizerLocation")]
        pub organizer_location: String,
        #[yaserde(prefix = "typ", rename = "AttendeeLocation")]
        pub attendee_location: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "IconIndexType")]
    pub struct IconIndexType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingSpaceTypeEnum")]
    pub struct MeetingSpaceTypeEnum {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingSpaceType")]
    pub struct MeetingSpaceType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: Option<String>,
        #[yaserde(prefix = "typ", rename = "ChangeKey")]
        pub change_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "Type")]
        pub r#type: Option<mod_typ::MeetingSpaceTypeEnum>,
        #[yaserde(prefix = "typ", rename = "Version")]
        pub version: Option<String>,
        #[yaserde(prefix = "typ", rename = "JoinUrl")]
        pub join_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeModified")]
        pub date_time_modified: Option<String>,
        #[yaserde(prefix = "typ", rename = "ExpiryTime")]
        pub expiry_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "Meadata")]
        pub meadata: Option<String>,
        #[yaserde(prefix = "typ", rename = "Tag")]
        pub tag: Option<String>,
    }
    pub type MeetingSpace = mod_typ::MeetingSpaceType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ParticipantActivityRole")]
    pub struct ParticipantActivityRole {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ParticipantActivityMediaType")]
    pub struct ParticipantActivityMediaType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ParticipantActivity")]
    pub struct ParticipantActivity {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: mod_typ::GuidType,
        #[yaserde(prefix = "typ", rename = "CreatedBy")]
        pub created_by: String,
        #[yaserde(prefix = "typ", rename = "StartTime")]
        pub start_time: String,
        #[yaserde(prefix = "typ", rename = "EndTime")]
        pub end_time: String,
        #[yaserde(prefix = "typ", rename = "ClientVersion")]
        pub client_version: String,
        #[yaserde(prefix = "typ", rename = "Role")]
        pub role: mod_typ::ParticipantActivityRole,
        #[yaserde(prefix = "typ", rename = "MediaType")]
        pub media_type: mod_typ::ParticipantActivityMediaType,
        #[yaserde(prefix = "typ", rename = "MediaDetails")]
        pub media_details: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfParticipantActivities")]
    pub struct NonEmptyArrayOfParticipantActivities {
        #[yaserde(prefix = "typ", rename = "ParticipantActivity")]
        pub participant_activity: Vec<mod_typ::ParticipantActivity>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContentActivity")]
    pub struct ContentActivity {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: mod_typ::GuidType,
        #[yaserde(prefix = "typ", rename = "SharedBy")]
        pub shared_by: String,
        #[yaserde(prefix = "typ", rename = "ContentLocation")]
        pub content_location: String,
        #[yaserde(prefix = "typ", rename = "StartTime")]
        pub start_time: String,
        #[yaserde(prefix = "typ", rename = "EndTime")]
        pub end_time: String,
        #[yaserde(prefix = "typ", rename = "Type")]
        pub r#type: mod_typ::ContentActivityType,
        #[yaserde(prefix = "typ", rename = "MediaType")]
        pub media_type: mod_typ::ContentActivityMediaType,
        #[yaserde(prefix = "typ", rename = "Acl")]
        pub acl: mod_typ::ContentActivityAcl,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContentActivityType")]
    pub struct ContentActivityType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContentActivityMediaType")]
    pub struct ContentActivityMediaType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContentActivityAcl")]
    pub struct ContentActivityAcl {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfContentActivities")]
    pub struct NonEmptyArrayOfContentActivities {
        #[yaserde(prefix = "typ", rename = "ContentActivity")]
        pub content_activity: Vec<mod_typ::ContentActivity>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingInstanceType")]
    pub struct MeetingInstanceType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: Option<String>,
        #[yaserde(prefix = "typ", rename = "ChangeKey")]
        pub change_key: Option<String>,
        #[yaserde(prefix = "typ", rename = "Version")]
        pub version: Option<String>,
        #[yaserde(prefix = "typ", rename = "JoinUrl")]
        pub join_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeCreated")]
        pub date_time_created: Option<String>,
        #[yaserde(prefix = "typ", rename = "DateTimeModified")]
        pub date_time_modified: Option<String>,
        #[yaserde(prefix = "typ", rename = "Meadata")]
        pub meadata: Option<String>,
        #[yaserde(prefix = "typ", rename = "Tag")]
        pub tag: Option<String>,
        #[yaserde(prefix = "typ", rename = "ParentGoid")]
        pub parent_goid: Option<String>,
        #[yaserde(prefix = "typ", rename = "ParticipantActivities")]
        pub participant_activities: Option<mod_typ::NonEmptyArrayOfParticipantActivities>,
        #[yaserde(prefix = "typ", rename = "ContentActivities")]
        pub content_activities: Option<mod_typ::NonEmptyArrayOfContentActivities>,
    }
    pub type MeetingInstance = mod_typ::MeetingInstanceType;
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "WarmupOptionsType")]
    pub struct WarmupOptionsType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchApplicationIdType")]
    pub struct SearchApplicationIdType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ItemTypesFilterType")]
    pub struct ItemTypesFilterType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SuggestionKindType")]
    pub struct SuggestionKindType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "RefinerTypeType")]
    pub struct RefinerTypeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchResultsPropertySetNameType")]
    pub struct SearchResultsPropertySetNameType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchScopeGroupsType")]
    pub struct SearchScopeGroupsType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchScopeArchivesType")]
    pub struct SearchScopeArchivesType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExecuteSearchSortOrderType")]
    pub struct ExecuteSearchSortOrderType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MatchOptionsType")]
    pub struct MatchOptionsType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchFolderScopeType")]
    pub struct SearchFolderScopeType {}
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PrimaryMailboxSearchScopeType")]
    pub struct PrimaryMailboxSearchScopeType {
        #[yaserde(prefix = "typ", rename = "FolderScope")]
        pub folder_scope: Option<mod_typ::SearchFolderScopeType>,
        #[yaserde(prefix = "typ", rename = "IsDeepTraversal")]
        pub is_deep_traversal: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "LargeArchiveSearchScopeType")]
    pub struct LargeArchiveSearchScopeType {
        #[yaserde(prefix = "typ", rename = "ArchiveTypes")]
        pub archive_types: mod_typ::SearchScopeArchivesType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "GroupSearchScopeType")]
    pub struct GroupSearchScopeType {
        #[yaserde(prefix = "typ", rename = "GroupTypes")]
        pub group_types: mod_typ::SearchScopeGroupsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SingleLargeArchiveSearchScopeType")]
    pub struct SingleLargeArchiveSearchScopeType {
        #[yaserde(prefix = "typ", rename = "MailboxGuid")]
        pub mailbox_guid: Option<mod_typ::GuidType>,
        #[yaserde(prefix = "typ", rename = "FolderScope")]
        pub folder_scope: mod_typ::SearchFolderScopeType,
        #[yaserde(prefix = "typ", rename = "IsDeepTraversal")]
        pub is_deep_traversal: bool,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OneDriveSearchScopeType")]
    pub struct OneDriveSearchScopeType {
        #[yaserde(prefix = "typ", rename = "OneDriveView")]
        pub one_drive_view: mod_typ::OneDriveViewType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DelveSearchScopeType")]
    pub struct DelveSearchScopeType {
        #[yaserde(prefix = "typ", rename = "DelveView")]
        pub delve_view: mod_typ::DelveViewType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CustomSearchScopeType")]
    pub struct CustomSearchScopeType {
        #[yaserde(prefix = "typ", rename = "MailboxGuid")]
        pub mailbox_guid: mod_typ::GuidType,
        #[yaserde(prefix = "typ", rename = "FolderScope")]
        pub folder_scope: mod_typ::SearchFolderScopeType,
        #[yaserde(prefix = "typ", rename = "IsDeepTraversal")]
        pub is_deep_traversal: bool,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfSearchScopeType")]
    pub struct ArrayOfSearchScopeType {
        #[yaserde(prefix = "typ", rename = "PrimaryMailboxSearchScope")]
        pub primary_mailbox_search_scope: Option<mod_typ::PrimaryMailboxSearchScopeType>,
        #[yaserde(prefix = "typ", rename = "LargeArchiveSearchScope")]
        pub large_archive_search_scope: Option<mod_typ::LargeArchiveSearchScopeType>,
        #[yaserde(prefix = "typ", rename = "GroupSearchScope")]
        pub group_search_scope: Option<mod_typ::GroupSearchScopeType>,
        #[yaserde(prefix = "typ", rename = "CustomSearchScope")]
        pub custom_search_scope: Option<mod_typ::CustomSearchScopeType>,
        #[yaserde(prefix = "typ", rename = "OneDriveSearchScope")]
        pub one_drive_search_scope: Option<mod_typ::OneDriveSearchScopeType>,
        #[yaserde(prefix = "typ", rename = "SingleLargeArchiveSearchScope")]
        pub single_large_archive_search_scope: Option<mod_typ::SingleLargeArchiveSearchScopeType>,
        #[yaserde(prefix = "typ", rename = "DelveSearchScope")]
        pub delve_search_scope: Option<mod_typ::DelveSearchScopeType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DynamicRefinerQueryType")]
    pub struct DynamicRefinerQueryType {
        #[yaserde(prefix = "typ", rename = "RefinerQuery")]
        pub refiner_query: String,
        #[yaserde(prefix = "typ", rename = "TDRefinerId")]
        pub td_refiner_id: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExtendedKeywordDefinitionType")]
    pub struct ExtendedKeywordDefinitionType {
        #[yaserde(prefix = "typ", rename = "Keyword")]
        pub keyword: String,
        #[yaserde(prefix = "typ", rename = "Properties")]
        pub properties: mod_typ::NonEmptyArrayOfExtendedFieldURIsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SuggestionType")]
    pub struct SuggestionType {
        #[yaserde(prefix = "typ", rename = "SuggestedQuery")]
        pub suggested_query: String,
        #[yaserde(prefix = "typ", rename = "DisplayText")]
        pub display_text: String,
        #[yaserde(prefix = "typ", rename = "SuggestionType")]
        pub suggestion_type: mod_typ::SuggestionKindType,
        #[yaserde(prefix = "typ", rename = "Trigger")]
        pub trigger: Option<String>,
        #[yaserde(prefix = "typ", rename = "TDSuggestionId")]
        pub td_suggestion_id: i32,
        #[yaserde(prefix = "typ", rename = "IsDeletable")]
        pub is_deletable: bool,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PeopleSuggestionType")]
    pub struct PeopleSuggestionType {
        #[yaserde(prefix = "typ", rename = "SuggestedQuery")]
        pub suggested_query: String,
        #[yaserde(prefix = "typ", rename = "DisplayText")]
        pub display_text: String,
        #[yaserde(prefix = "typ", rename = "SuggestionType")]
        pub suggestion_type: mod_typ::SuggestionKindType,
        #[yaserde(prefix = "typ", rename = "Trigger")]
        pub trigger: Option<String>,
        #[yaserde(prefix = "typ", rename = "TDSuggestionId")]
        pub td_suggestion_id: i32,
        #[yaserde(prefix = "typ", rename = "IsDeletable")]
        pub is_deletable: bool,
        #[yaserde(prefix = "typ", rename = "PrimarySmtpAddress")]
        pub primary_smtp_address: String,
        #[yaserde(prefix = "typ", rename = "PersonType")]
        pub person_type: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PeopleSuggestionPersonType")]
    pub struct PeopleSuggestionPersonType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FileSuggestionType")]
    pub struct FileSuggestionType {
        #[yaserde(prefix = "typ", rename = "SuggestedQuery")]
        pub suggested_query: String,
        #[yaserde(prefix = "typ", rename = "DisplayText")]
        pub display_text: String,
        #[yaserde(prefix = "typ", rename = "SuggestionType")]
        pub suggestion_type: mod_typ::SuggestionKindType,
        #[yaserde(prefix = "typ", rename = "Trigger")]
        pub trigger: Option<String>,
        #[yaserde(prefix = "typ", rename = "TDSuggestionId")]
        pub td_suggestion_id: i32,
        #[yaserde(prefix = "typ", rename = "IsDeletable")]
        pub is_deletable: bool,
        #[yaserde(prefix = "typ", rename = "FileName")]
        pub file_name: String,
        #[yaserde(prefix = "typ", rename = "FileExtension")]
        pub file_extension: String,
        #[yaserde(prefix = "typ", rename = "FileReferenceId")]
        pub file_reference_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "FileTitle")]
        pub file_title: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContainerTitle")]
        pub container_title: Option<String>,
        #[yaserde(prefix = "typ", rename = "ContainerUrl")]
        pub container_url: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchSuggestionsType")]
    pub struct SearchSuggestionsType {
        #[yaserde(prefix = "typ", rename = "TDSuggestionsBatchId")]
        pub td_suggestions_batch_id: i64,
        #[yaserde(prefix = "typ", rename = "TDSuggestionsInstanceId")]
        pub td_suggestions_instance_id: mod_typ::GuidType,
        #[yaserde(prefix = "typ", rename = "Suggestions")]
        pub suggestions: Option<String>,
        #[yaserde(prefix = "typ", rename = "DiagnosticsData")]
        pub diagnostics_data: Option<mod_typ::SearchDiagnosticsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "DeleteSearchSuggestionResponseType")]
    pub struct DeleteSearchSuggestionResponseType {
        #[yaserde(prefix = "typ", rename = "Success")]
        pub success: bool,
        #[yaserde(prefix = "typ", rename = "StatusMessage")]
        pub status_message: Option<String>,
        #[yaserde(prefix = "typ", rename = "DiagnosticsData")]
        pub diagnostics_data: Option<mod_typ::SearchDiagnosticsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchDiagnosticsStepType")]
    pub struct SearchDiagnosticsStepType {
        #[yaserde(prefix = "typ", rename = "StartTime")]
        pub start_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "StepTime")]
        pub step_time: Option<i64>,
        #[yaserde(prefix = "typ", rename = "StepType")]
        pub step_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "AdditionalEntries")]
        pub additional_entries: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchRefinerType")]
    pub struct SearchRefinerType {
        #[yaserde(prefix = "typ", rename = "RefinerType")]
        pub refiner_type: mod_typ::RefinerTypeType,
        #[yaserde(prefix = "typ", rename = "Refiner")]
        pub refiner: mod_typ::DynamicRefinerQueryType,
        #[yaserde(prefix = "typ", rename = "ResultCount")]
        pub result_count: Option<i64>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FolderRefinerType")]
    pub struct FolderRefinerType {
        #[yaserde(prefix = "typ", rename = "RefinerType")]
        pub refiner_type: mod_typ::RefinerTypeType,
        #[yaserde(prefix = "typ", rename = "Refiner")]
        pub refiner: mod_typ::DynamicRefinerQueryType,
        #[yaserde(prefix = "typ", rename = "ResultCount")]
        pub result_count: Option<i64>,
        #[yaserde(prefix = "typ", rename = "FolderId")]
        pub folder_id: Option<mod_typ::FolderIdType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "PeopleRefinerType")]
    pub struct PeopleRefinerType {
        #[yaserde(prefix = "typ", rename = "RefinerType")]
        pub refiner_type: mod_typ::RefinerTypeType,
        #[yaserde(prefix = "typ", rename = "Refiner")]
        pub refiner: mod_typ::DynamicRefinerQueryType,
        #[yaserde(prefix = "typ", rename = "ResultCount")]
        pub result_count: Option<i64>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "SmtpAddress")]
        pub smtp_address: Option<mod_typ::SmtpAddressType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailboxRefinerType")]
    pub struct MailboxRefinerType {
        #[yaserde(prefix = "typ", rename = "RefinerType")]
        pub refiner_type: mod_typ::RefinerTypeType,
        #[yaserde(prefix = "typ", rename = "Refiner")]
        pub refiner: mod_typ::DynamicRefinerQueryType,
        #[yaserde(prefix = "typ", rename = "ResultCount")]
        pub result_count: Option<i64>,
        #[yaserde(prefix = "typ", rename = "MailboxDisplayName")]
        pub mailbox_display_name: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AttachmentRefinerType")]
    pub struct AttachmentRefinerType {
        #[yaserde(prefix = "typ", rename = "RefinerType")]
        pub refiner_type: mod_typ::RefinerTypeType,
        #[yaserde(prefix = "typ", rename = "Refiner")]
        pub refiner: mod_typ::DynamicRefinerQueryType,
        #[yaserde(prefix = "typ", rename = "ResultCount")]
        pub result_count: Option<i64>,
        #[yaserde(prefix = "typ", rename = "HasAttachment")]
        pub has_attachment: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "HashtagRefinerType")]
    pub struct HashtagRefinerType {
        #[yaserde(prefix = "typ", rename = "RefinerType")]
        pub refiner_type: mod_typ::RefinerTypeType,
        #[yaserde(prefix = "typ", rename = "Refiner")]
        pub refiner: mod_typ::DynamicRefinerQueryType,
        #[yaserde(prefix = "typ", rename = "ResultCount")]
        pub result_count: Option<i64>,
        #[yaserde(prefix = "typ", rename = "DisplayName")]
        pub display_name: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchDiagnosticsType")]
    pub struct SearchDiagnosticsType {
        #[yaserde(rename = "body")]
        pub body: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MailboxInformationType")]
    pub struct MailboxInformationType {
        #[yaserde(prefix = "typ", rename = "MailboxGuid")]
        pub mailbox_guid: mod_typ::GuidType,
        #[yaserde(prefix = "typ", rename = "MailboxAddress")]
        pub mailbox_address: mod_typ::SmtpAddressType,
        #[yaserde(prefix = "typ", rename = "MailboxDisplayName")]
        pub mailbox_display_name: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ExecuteSearchQueryIdType")]
    pub struct ExecuteSearchQueryIdType {
        #[yaserde(prefix = "typ", rename = "Id", attribute = true)]
        pub id: mod_typ::GuidType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchResultsType")]
    pub struct SearchResultsType {
        #[yaserde(prefix = "typ", rename = "Items")]
        pub items: Option<String>,
        #[yaserde(prefix = "typ", rename = "Conversations")]
        pub conversations: Option<String>,
        #[yaserde(prefix = "typ", rename = "People")]
        pub people: Option<String>,
        #[yaserde(prefix = "typ", rename = "MoreResultsAvailable")]
        pub more_results_available: bool,
        #[yaserde(prefix = "typ", rename = "RefinerTelemetryBatchId")]
        pub refiner_telemetry_batch_id: i32,
        #[yaserde(prefix = "typ", rename = "SearchRefiners")]
        pub search_refiners: Option<String>,
        #[yaserde(prefix = "typ", rename = "DiagnosticsData")]
        pub diagnostics_data: Option<mod_typ::SearchDiagnosticsType>,
        #[yaserde(prefix = "typ", rename = "SearchResultsCount")]
        pub search_results_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "TotalResultsCount")]
        pub total_results_count: Option<i32>,
        #[yaserde(prefix = "typ", rename = "SearchTerms")]
        pub search_terms: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "QueryId")]
        pub query_id: Option<mod_typ::ExecuteSearchQueryIdType>,
        #[yaserde(prefix = "typ", rename = "MailboxesInformation")]
        pub mailboxes_information: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchResultItemIdType")]
    pub struct SearchResultItemIdType {
        #[yaserde(prefix = "typ", rename = "EntryId")]
        pub entry_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "OutlookItemId")]
        pub outlook_item_id: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SearchResultConversationIdType")]
    pub struct SearchResultConversationIdType {
        #[yaserde(prefix = "typ", rename = "OutlookConversationId")]
        pub outlook_conversation_id: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ClientIdType")]
    pub struct ClientIdType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EntityFeedbackEntityAddSourceType")]
    pub struct EntityFeedbackEntityAddSourceType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfWorkHours")]
    pub struct ArrayOfWorkHours {
        #[yaserde(prefix = "typ", rename = "WorkHours")]
        pub work_hours: Option<mod_typ::WorkHoursType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "WorkHoursType")]
    pub struct WorkHoursType {
        #[yaserde(prefix = "typ", rename = "WorkDay")]
        pub work_day: Option<mod_typ::SystemDayOfWeek>,
        #[yaserde(prefix = "typ", rename = "TimeSlots")]
        pub time_slots: Option<mod_typ::ArrayOfWorkTimeSlot>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "SystemDayOfWeek")]
    pub struct SystemDayOfWeek {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfWorkTimeSlot")]
    pub struct ArrayOfWorkTimeSlot {
        #[yaserde(prefix = "typ", rename = "TimeSlot")]
        pub time_slot: Vec<mod_typ::WorkTimeSlot>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "WorkTimeSlot")]
    pub struct WorkTimeSlot {
        #[yaserde(prefix = "typ", rename = "StartTimeInMinutes")]
        pub start_time_in_minutes: i32,
        #[yaserde(prefix = "typ", rename = "EndTimeInMinutes")]
        pub end_time_in_minutes: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AnalyzedQuery")]
    pub struct AnalyzedQuery {
        #[yaserde(prefix = "typ", rename = "QueryLanguage")]
        pub query_language: String,
        #[yaserde(prefix = "typ", rename = "SearchRestrictions")]
        pub search_restrictions: mod_typ::RestrictionType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ContextPropertyType")]
    pub struct ContextPropertyType {
        #[yaserde(prefix = "typ", rename = "Key")]
        pub key: String,
        #[yaserde(prefix = "typ", rename = "Value")]
        pub value: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfContextProperty")]
    pub struct ArrayOfContextProperty {
        #[yaserde(prefix = "typ", rename = "ContextProperty")]
        pub context_property: Vec<mod_typ::ContextPropertyType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfEntityFeedbackEntry")]
    pub struct ArrayOfEntityFeedbackEntry {
        #[yaserde(prefix = "typ", rename = "EntityFeedbackEntry")]
        pub entity_feedback_entry: Vec<mod_typ::EntityFeedbackEntryType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EntityFeedbackEntryType")]
    pub struct EntityFeedbackEntryType {
        #[yaserde(prefix = "typ", rename = "ClientEventTimeUtc")]
        pub client_event_time_utc: String,
        #[yaserde(prefix = "typ", rename = "ClientEventTimeLocal")]
        pub client_event_time_local: String,
        #[yaserde(prefix = "typ", rename = "ClientSessionId")]
        pub client_session_id: mod_typ::GuidType,
        #[yaserde(prefix = "typ", rename = "ClientVersion")]
        pub client_version: String,
        #[yaserde(prefix = "typ", rename = "ClientId")]
        pub client_id: mod_typ::ClientIdType,
        #[yaserde(prefix = "typ", rename = "EntrySequenceNumber")]
        pub entry_sequence_number: i32,
        #[yaserde(prefix = "typ", rename = "TransactionId")]
        pub transaction_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "EventType")]
        pub event_type: String,
        #[yaserde(prefix = "typ", rename = "TargetEntityList")]
        pub target_entity_list: Option<String>,
        #[yaserde(prefix = "typ", rename = "EntityAddSource")]
        pub entity_add_source: Option<mod_typ::EntityFeedbackEntityAddSourceType>,
        #[yaserde(prefix = "typ", rename = "JsonPropertyBag")]
        pub json_property_bag: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfInboxReminderType")]
    pub struct ArrayOfInboxReminderType {
        #[yaserde(prefix = "typ", rename = "InboxReminder")]
        pub inbox_reminder: Vec<mod_typ::InboxReminderType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InboxReminderType")]
    pub struct InboxReminderType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: Option<mod_typ::GuidType>,
        #[yaserde(prefix = "typ", rename = "ReminderOffset")]
        pub reminder_offset: Option<i32>,
        #[yaserde(prefix = "typ", rename = "Message")]
        pub message: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsOrganizerReminder")]
        pub is_organizer_reminder: Option<bool>,
        #[yaserde(prefix = "typ", rename = "OccurrenceChange")]
        pub occurrence_change: Option<mod_typ::EmailReminderChangeType>,
        #[yaserde(prefix = "typ", rename = "SendOption")]
        pub send_option: Option<mod_typ::EmailReminderSendOption>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmailReminderChangeType")]
    pub struct EmailReminderChangeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmailReminderSendOption")]
    pub struct EmailReminderSendOption {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InsightStatusType")]
    pub struct InsightStatusType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InsightContextItem")]
    pub struct InsightContextItem {
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: Option<String>,
        #[yaserde(prefix = "typ", rename = "Val")]
        pub val: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfInsightContextItem")]
    pub struct ArrayOfInsightContextItem {
        #[yaserde(prefix = "typ", rename = "Context")]
        pub context: Vec<mod_typ::InsightContextItem>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "InsightItemType")]
    pub struct InsightItemType {
        #[yaserde(prefix = "typ", rename = "ItemId")]
        pub item_id: mod_typ::ItemIdType,
        #[yaserde(prefix = "typ", rename = "InsightId")]
        pub insight_id: mod_typ::GuidType,
        #[yaserde(prefix = "typ", rename = "Type")]
        pub r#type: Option<String>,
        #[yaserde(prefix = "typ", rename = "StartTimeUtc")]
        pub start_time_utc: Option<String>,
        #[yaserde(prefix = "typ", rename = "EndTimeUtc")]
        pub end_time_utc: Option<String>,
        #[yaserde(prefix = "typ", rename = "Status")]
        pub status: Option<mod_typ::InsightStatusType>,
        #[yaserde(prefix = "typ", rename = "Version")]
        pub version: Option<String>,
        #[yaserde(prefix = "typ", rename = "Context")]
        pub context: Option<mod_typ::ArrayOfInsightContextItem>,
        #[yaserde(prefix = "typ", rename = "Text")]
        pub text: Option<String>,
        #[yaserde(prefix = "typ", rename = "ApplicationsIds")]
        pub applications_ids: Option<mod_typ::ArrayOfStringsType>,
        #[yaserde(prefix = "typ", rename = "SuggestedActions")]
        pub suggested_actions: Option<String>,
        #[yaserde(prefix = "typ", rename = "AppContexts")]
        pub app_contexts: Option<mod_typ::ArrayOfStringsType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfInsightItemType")]
    pub struct ArrayOfInsightItemType {
        #[yaserde(prefix = "typ", rename = "Insight")]
        pub insight: Vec<mod_typ::InsightItemType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ResponseMessageInfoType")]
    pub struct ResponseMessageInfoType {
        #[yaserde(prefix = "typ", rename = "MessageText")]
        pub message_text: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseCode")]
        pub response_code: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResponseClass", attribute = true)]
        pub response_class: mod_typ::ResponseClassType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "BaseAvailabilityCalendarViewType")]
    pub struct BaseAvailabilityCalendarViewType {
        #[yaserde(prefix = "typ", rename = "FreeBusyViewType")]
        pub free_busy_view_type: mod_typ::FreeBusyViewType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfPeopleQuerySource")]
    pub struct ArrayOfPeopleQuerySource {
        #[yaserde(prefix = "typ", rename = "Source")]
        pub source: Vec<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "CalendarActivityDataType")]
    pub struct CalendarActivityDataType {
        #[yaserde(prefix = "typ", rename = "ActivityAction")]
        pub activity_action: String,
        #[yaserde(prefix = "typ", rename = "ClientId")]
        pub client_id: String,
        #[yaserde(prefix = "typ", rename = "CasRequestId")]
        pub cas_request_id: mod_typ::GuidType,
        #[yaserde(prefix = "typ", rename = "IndexSelected")]
        pub index_selected: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MentionActionType")]
    pub struct MentionActionType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: String,
        #[yaserde(prefix = "typ", rename = "CreatedBy")]
        pub created_by: mod_typ::EmailAddressExtendedType,
        #[yaserde(prefix = "typ", rename = "CreatedDateTime")]
        pub created_date_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ServerCreatedDateTime")]
        pub server_created_date_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "DeepLink")]
        pub deep_link: Option<String>,
        #[yaserde(prefix = "typ", rename = "Application")]
        pub application: Option<String>,
        #[yaserde(prefix = "typ", rename = "Mentioned")]
        pub mentioned: mod_typ::EmailAddressExtendedType,
        #[yaserde(prefix = "typ", rename = "MentionText")]
        pub mention_text: Option<String>,
        #[yaserde(prefix = "typ", rename = "ClientReference")]
        pub client_reference: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfMentionActionsType")]
    pub struct NonEmptyArrayOfMentionActionsType {
        #[yaserde(prefix = "typ", rename = "MentionAction")]
        pub mention_action: Vec<mod_typ::MentionActionType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AppliedHashtagType")]
    pub struct AppliedHashtagType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: String,
        #[yaserde(prefix = "typ", rename = "CreatedBy")]
        pub created_by: mod_typ::EmailAddressExtendedType,
        #[yaserde(prefix = "typ", rename = "CreatedDateTime")]
        pub created_date_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ServerCreatedDateTime")]
        pub server_created_date_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "DeepLink")]
        pub deep_link: Option<String>,
        #[yaserde(prefix = "typ", rename = "Application")]
        pub application: Option<String>,
        #[yaserde(prefix = "typ", rename = "Tag")]
        pub tag: String,
        #[yaserde(prefix = "typ", rename = "IsAutoTagged")]
        pub is_auto_tagged: bool,
        #[yaserde(prefix = "typ", rename = "IsInlined")]
        pub is_inlined: bool,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AppliedHashtagsPreviewType")]
    pub struct AppliedHashtagsPreviewType {
        #[yaserde(prefix = "typ", rename = "Hashtags")]
        pub hashtags: mod_typ::ArrayOfStringsType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfAppliedHashtagType")]
    pub struct NonEmptyArrayOfAppliedHashtagType {
        #[yaserde(prefix = "typ", rename = "AppliedHashtag")]
        pub applied_hashtag: Vec<mod_typ::AppliedHashtagType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "LikeType")]
    pub struct LikeType {
        #[yaserde(prefix = "typ", rename = "Id")]
        pub id: String,
        #[yaserde(prefix = "typ", rename = "CreatedBy")]
        pub created_by: mod_typ::EmailAddressExtendedType,
        #[yaserde(prefix = "typ", rename = "CreatedDateTime")]
        pub created_date_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "ServerCreatedDateTime")]
        pub server_created_date_time: Option<String>,
        #[yaserde(prefix = "typ", rename = "DeepLink")]
        pub deep_link: Option<String>,
        #[yaserde(prefix = "typ", rename = "Application")]
        pub application: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "LikesPreviewType")]
    pub struct LikesPreviewType {
        #[yaserde(prefix = "typ", rename = "LikeCount")]
        pub like_count: i32,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MentionsPreviewType")]
    pub struct MentionsPreviewType {
        #[yaserde(prefix = "typ", rename = "IsMentioned")]
        pub is_mentioned: bool,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "NonEmptyArrayOfLikeType")]
    pub struct NonEmptyArrayOfLikeType {
        #[yaserde(prefix = "typ", rename = "Like")]
        pub like: Vec<mod_typ::LikeType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AttendeeAvailability")]
    pub struct AttendeeAvailability {
        #[yaserde(prefix = "typ", rename = "EmailAddress")]
        pub email_address: String,
        #[yaserde(prefix = "typ", rename = "Availability")]
        pub availability: mod_typ::AvailabilityStatusType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfMeetingLocation")]
    pub struct ArrayOfMeetingLocation {
        #[yaserde(prefix = "typ", rename = "MeetingLocation")]
        pub meeting_location: Vec<mod_typ::MeetingLocation>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfAttendeeAvailability")]
    pub struct ArrayOfAttendeeAvailability {
        #[yaserde(prefix = "typ", rename = "AttendeeAvailability")]
        pub attendee_availability: Vec<mod_typ::AttendeeAvailability>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingTimeCandidate")]
    pub struct MeetingTimeCandidate {
        #[yaserde(prefix = "typ", rename = "MeetingTimeslot")]
        pub meeting_timeslot: mod_typ::TimeSlot,
        #[yaserde(prefix = "typ", rename = "Confidence")]
        pub confidence: f64,
        #[yaserde(prefix = "typ", rename = "Score")]
        pub score: i32,
        #[yaserde(prefix = "typ", rename = "OrganizerAvailability")]
        pub organizer_availability: mod_typ::AvailabilityStatusType,
        #[yaserde(prefix = "typ", rename = "AttendeeAvailabilities")]
        pub attendee_availabilities: mod_typ::ArrayOfAttendeeAvailability,
        #[yaserde(prefix = "typ", rename = "Locations")]
        pub locations: mod_typ::ArrayOfMeetingLocation,
        #[yaserde(prefix = "typ", rename = "SuggestionHint")]
        pub suggestion_hint: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfMeetingTimeCandidate")]
    pub struct ArrayOfMeetingTimeCandidate {
        #[yaserde(prefix = "typ", rename = "MeetingTimeCandidate")]
        pub meeting_time_candidate: Vec<mod_typ::MeetingTimeCandidate>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "MeetingTimeCandidatesConstraintItem")]
    pub struct MeetingTimeCandidatesConstraintItem {
        #[yaserde(prefix = "typ", rename = "Email")]
        pub email: Option<String>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AttendeeConstraintItem")]
    pub struct AttendeeConstraintItem {
        #[yaserde(prefix = "typ", rename = "Email")]
        pub email: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsRequired")]
        pub is_required: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "LocationConstraintItem")]
    pub struct LocationConstraintItem {
        #[yaserde(prefix = "typ", rename = "Email")]
        pub email: Option<String>,
        #[yaserde(prefix = "typ", rename = "Name")]
        pub name: Option<String>,
        #[yaserde(prefix = "typ", rename = "ResolveAvailability")]
        pub resolve_availability: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfLocationConstraintItems")]
    pub struct ArrayOfLocationConstraintItems {
        #[yaserde(prefix = "typ", rename = "LocationItem")]
        pub location_item: Vec<mod_typ::LocationConstraintItem>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfAttendeeConstraintItems")]
    pub struct ArrayOfAttendeeConstraintItems {
        #[yaserde(prefix = "typ", rename = "AttendeeItem")]
        pub attendee_item: Vec<mod_typ::AttendeeConstraintItem>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfTimeSlot")]
    pub struct ArrayOfTimeSlot {
        #[yaserde(prefix = "typ", rename = "TimeSlot")]
        pub time_slot: Vec<mod_typ::TimeSlot>,
    }
    /// Reasons no suggestions are returned by FindMeetingTimeCandidates
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "EmptySuggestionReason")]
    pub struct EmptySuggestionReason {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FindMeetingTimesAttendeeConstraints")]
    pub struct FindMeetingTimesAttendeeConstraints {
        #[yaserde(prefix = "typ", rename = "AttendeeEntries")]
        pub attendee_entries: Option<mod_typ::ArrayOfAttendeeConstraintItems>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FindMeetingTimesLocationConstraints")]
    pub struct FindMeetingTimesLocationConstraints {
        #[yaserde(prefix = "typ", rename = "LocationEntries")]
        pub location_entries: Option<mod_typ::ArrayOfLocationConstraintItems>,
        #[yaserde(prefix = "typ", rename = "IsRequired")]
        pub is_required: Option<bool>,
        #[yaserde(prefix = "typ", rename = "SuggestLocation")]
        pub suggest_location: Option<bool>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FindMeetingTimesSearchConstraints")]
    pub struct FindMeetingTimesSearchConstraints {
        #[yaserde(prefix = "typ", rename = "SearchWindows")]
        pub search_windows: Option<mod_typ::ArrayOfTimeSlot>,
        #[yaserde(prefix = "typ", rename = "MeetingDurationInMinutes")]
        pub meeting_duration_in_minutes: Option<i32>,
        #[yaserde(prefix = "typ", rename = "ActivityDomain")]
        pub activity_domain: Option<mod_typ::ActivityDomainType>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "FindMeetingTimesConstraints")]
    pub struct FindMeetingTimesConstraints {
        #[yaserde(prefix = "typ", rename = "MaxCandidates")]
        pub max_candidates: Option<i32>,
        #[yaserde(prefix = "typ", rename = "IsOrganizerOptional")]
        pub is_organizer_optional: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ReturnSuggestionHints")]
        pub return_suggestion_hints: Option<bool>,
        #[yaserde(prefix = "typ", rename = "AppName")]
        pub app_name: Option<String>,
        #[yaserde(prefix = "typ", rename = "AppScenario")]
        pub app_scenario: Option<String>,
        #[yaserde(prefix = "typ", rename = "MinimumAttendeePercentage")]
        pub minimum_attendee_percentage: Option<f64>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AddInStateType")]
    pub struct AddInStateType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OfficeClientType")]
    pub struct OfficeClientType {
        #[yaserde(prefix = "typ", rename = "Code", attribute = true)]
        pub code: mod_typ::OfficeClientCodeType,
        #[yaserde(prefix = "typ", rename = "Version", attribute = true)]
        pub version: mod_typ::VersionType,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "OfficeClientCodeType")]
    pub struct OfficeClientCodeType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "VersionType")]
    pub struct VersionType {
        #[yaserde(text = true)]
        pub inner: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "ArrayOfAppsType")]
    pub struct ArrayOfAppsType {
        #[yaserde(prefix = "typ", rename = "App")]
        pub app: Vec<mod_typ::AppType>,
        #[yaserde(prefix = "typ", rename = "Metadata")]
        pub metadata: Option<mod_typ::Metadata>,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AppType")]
    pub struct AppType {
        #[yaserde(prefix = "typ", rename = "Metadata")]
        pub metadata: Option<mod_typ::AppMetadata>,
        #[yaserde(prefix = "typ", rename = "Manifest")]
        pub manifest: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "Metadata")]
    pub struct Metadata {
        #[yaserde(prefix = "typ", rename = "CustomApps")]
        pub custom_apps: String,
    }
    #[derive(Debug, Default, YaSerialize, YaDeserialize)]
    #[yaserde(prefix = "typ", namespaces = {"typ" = "http://schemas.microsoft.com/exchange/services/2006/types"}, rename = "AppMetadata")]
    pub struct AppMetadata {
        #[yaserde(prefix = "typ", rename = "EndNodeUrl")]
        pub end_node_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "AppStatus")]
        pub app_status: Option<String>,
        #[yaserde(prefix = "typ", rename = "ActionUrl")]
        pub action_url: Option<String>,
        #[yaserde(prefix = "typ", rename = "ProductId")]
        pub product_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "EnabledStatus")]
        pub enabled_status: Option<bool>,
        #[yaserde(prefix = "typ", rename = "ConsentState")]
        pub consent_state: Option<String>,
        #[yaserde(prefix = "typ", rename = "ExtensionType")]
        pub extension_type: Option<String>,
        #[yaserde(prefix = "typ", rename = "MarketplaceAssetId")]
        pub marketplace_asset_id: Option<String>,
        #[yaserde(prefix = "typ", rename = "LicenseStatus")]
        pub license_status: Option<String>,
        #[yaserde(prefix = "typ", rename = "TrialExpirationDate")]
        pub trial_expiration_date: Option<String>,
        #[yaserde(prefix = "typ", rename = "InstalledBy")]
        pub installed_by: Option<String>,
        #[yaserde(prefix = "typ", rename = "IsMandatory")]
        pub is_mandatory: Option<bool>,
    }
}

/* Subscribe */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SubscribeInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SubscribeInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "Subscribe")]
    pub subscribe: mod_mes::Subscribe,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SubscribeInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SubscribeInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SubscribeInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SubscribeOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SubscribeOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SubscribeResponse")]
    pub subscribe_response: mod_mes::SubscribeResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SubscribeOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SubscribeOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SubscribeOutputEnvelopeBody,
}
pub async fn subscribe(
    req: SubscribeInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<SubscribeOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/Subscribe";
    helpers::send_soap_request(url, credentials, req).await
}

/* AddImContactToGroup */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddImContactToGroupInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddImContactToGroupInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddImContactToGroup")]
    pub add_im_contact_to_group: mod_mes::AddImContactToGroup,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddImContactToGroupInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddImContactToGroupInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddImContactToGroupInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddImContactToGroupOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddImContactToGroupOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddImContactToGroupResponse")]
    pub add_im_contact_to_group_response: mod_mes::AddImContactToGroupResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddImContactToGroupOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddImContactToGroupOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddImContactToGroupOutputEnvelopeBody,
}
pub async fn add_im_contact_to_group(
    req: AddImContactToGroupInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<AddImContactToGroupOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/AddImContactToGroup";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetMailTips */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMailTipsInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMailTipsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetMailTips")]
    pub get_mail_tips: mod_mes::GetMailTips,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMailTipsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetMailTipsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetMailTipsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMailTipsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMailTipsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetMailTipsResponse")]
    pub get_mail_tips_response: mod_mes::GetMailTipsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMailTipsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetMailTipsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetMailTipsOutputEnvelopeBody,
}
pub async fn get_mail_tips(
    req: GetMailTipsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetMailTipsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetMailTips";
    helpers::send_soap_request(url, credentials, req).await
}

/* MarkAsJunk */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MarkAsJunkInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MarkAsJunkInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "MarkAsJunk")]
    pub mark_as_junk: mod_mes::MarkAsJunk,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MarkAsJunkInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: MarkAsJunkInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: MarkAsJunkInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MarkAsJunkOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MarkAsJunkOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "MarkAsJunkResponse")]
    pub mark_as_junk_response: mod_mes::MarkAsJunkResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MarkAsJunkOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: MarkAsJunkOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: MarkAsJunkOutputEnvelopeBody,
}
pub async fn mark_as_junk(
    req: MarkAsJunkInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<MarkAsJunkOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/MarkAsJunk";
    helpers::send_soap_request(url, credentials, req).await
}

/* EmptyFolder */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct EmptyFolderInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct EmptyFolderInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "EmptyFolder")]
    pub empty_folder: mod_mes::EmptyFolder,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct EmptyFolderInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: EmptyFolderInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: EmptyFolderInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct EmptyFolderOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct EmptyFolderOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "EmptyFolderResponse")]
    pub empty_folder_response: mod_mes::EmptyFolderResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct EmptyFolderOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: EmptyFolderOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: EmptyFolderOutputEnvelopeBody,
}
pub async fn empty_folder(
    req: EmptyFolderInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<EmptyFolderOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/EmptyFolder";
    helpers::send_soap_request(url, credentials, req).await
}

/* RemoveImGroup */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveImGroupInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveImGroupInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "RemoveImGroup")]
    pub remove_im_group: mod_mes::RemoveImGroup,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveImGroupInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: RemoveImGroupInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: RemoveImGroupInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveImGroupOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveImGroupOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "RemoveImGroupResponse")]
    pub remove_im_group_response: mod_mes::RemoveImGroupResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveImGroupOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: RemoveImGroupOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: RemoveImGroupOutputEnvelopeBody,
}
pub async fn remove_im_group(
    req: RemoveImGroupInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<RemoveImGroupOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveImGroup";
    helpers::send_soap_request(url, credentials, req).await
}

/* StartSearchSession */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct StartSearchSessionInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct StartSearchSessionInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "StartSearchSession")]
    pub start_search_session: mod_mes::StartSearchSession,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct StartSearchSessionInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: StartSearchSessionInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: StartSearchSessionInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct StartSearchSessionOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct StartSearchSessionOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "StartSearchSessionResponse")]
    pub start_search_session_response: mod_mes::StartSearchSessionResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct StartSearchSessionOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: StartSearchSessionOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: StartSearchSessionOutputEnvelopeBody,
}
pub async fn start_search_session(
    req: StartSearchSessionInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<StartSearchSessionOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/StartSearchSession";
    helpers::send_soap_request(url, credentials, req).await
}

/* AddDistributionGroupToImList */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddDistributionGroupToImListInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddDistributionGroupToImListInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddDistributionGroupToImList")]
    pub add_distribution_group_to_im_list: mod_mes::AddDistributionGroupToImList,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddDistributionGroupToImListInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddDistributionGroupToImListInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddDistributionGroupToImListInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddDistributionGroupToImListOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddDistributionGroupToImListOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddDistributionGroupToImListResponse")]
    pub add_distribution_group_to_im_list_response: mod_mes::AddDistributionGroupToImListResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddDistributionGroupToImListOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddDistributionGroupToImListOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddDistributionGroupToImListOutputEnvelopeBody,
}
pub async fn add_distribution_group_to_im_list(
    req: AddDistributionGroupToImListInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<AddDistributionGroupToImListOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/AddDistributionGroupToImList";
    helpers::send_soap_request(url, credentials, req).await
}

/* AddNewImContactToGroup */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddNewImContactToGroupInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddNewImContactToGroupInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddNewImContactToGroup")]
    pub add_new_im_contact_to_group: mod_mes::AddNewImContactToGroup,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddNewImContactToGroupInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddNewImContactToGroupInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddNewImContactToGroupInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddNewImContactToGroupOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddNewImContactToGroupOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddNewImContactToGroupResponse")]
    pub add_new_im_contact_to_group_response: mod_mes::AddNewImContactToGroupResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddNewImContactToGroupOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddNewImContactToGroupOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddNewImContactToGroupOutputEnvelopeBody,
}
pub async fn add_new_im_contact_to_group(
    req: AddNewImContactToGroupInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<AddNewImContactToGroupOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/AddNewImContactToGroup";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetSearchSuggestions */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSearchSuggestionsInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSearchSuggestionsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetSearchSuggestions")]
    pub get_search_suggestions: mod_mes::GetSearchSuggestions,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSearchSuggestionsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetSearchSuggestionsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetSearchSuggestionsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSearchSuggestionsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSearchSuggestionsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetSearchSuggestionsResponse")]
    pub get_search_suggestions_response: mod_mes::GetSearchSuggestionsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSearchSuggestionsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetSearchSuggestionsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetSearchSuggestionsOutputEnvelopeBody,
}
pub async fn get_search_suggestions(
    req: GetSearchSuggestionsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetSearchSuggestionsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetSearchSuggestions";
    helpers::send_soap_request(url, credentials, req).await
}

/* AddTag */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddTagInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddTagInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddTag")]
    pub add_tag: mod_mes::AddTag,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddTagInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddTagInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddTagInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddTagOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddTagOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddTagResponse")]
    pub add_tag_response: mod_mes::AddTagResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddTagOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddTagOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddTagOutputEnvelopeBody,
}
pub async fn add_tag(
    req: AddTagInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<AddTagOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/AddTag";
    helpers::send_soap_request(url, credentials, req).await
}

/* UpdateMeetingSpace */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateMeetingSpaceInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateMeetingSpaceInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateMeetingSpace")]
    pub update_meeting_space: mod_mes::UpdateMeetingSpace,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateMeetingSpaceInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateMeetingSpaceInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateMeetingSpaceInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateMeetingSpaceOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateMeetingSpaceOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateMeetingSpaceResponseMessage")]
    pub update_meeting_space_response_message: mod_mes::UpdateMeetingSpaceResponseMessage,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateMeetingSpaceOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateMeetingSpaceOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateMeetingSpaceOutputEnvelopeBody,
}
pub async fn update_meeting_space(
    req: UpdateMeetingSpaceInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<UpdateMeetingSpaceOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateMeetingSpace";
    helpers::send_soap_request(url, credentials, req).await
}

/* SetTeamMailbox */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetTeamMailboxInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetTeamMailboxInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SetTeamMailbox")]
    pub set_team_mailbox: mod_mes::SetTeamMailbox,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetTeamMailboxInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SetTeamMailboxInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SetTeamMailboxInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetTeamMailboxOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetTeamMailboxOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SetTeamMailboxResponse")]
    pub set_team_mailbox_response: mod_mes::SetTeamMailboxResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetTeamMailboxOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SetTeamMailboxOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SetTeamMailboxOutputEnvelopeBody,
}
pub async fn set_team_mailbox(
    req: SetTeamMailboxInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<SetTeamMailboxOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/SetTeamMailbox";
    helpers::send_soap_request(url, credentials, req).await
}

/* ApplyConversationAction */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ApplyConversationActionInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ApplyConversationActionInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ApplyConversationAction")]
    pub apply_conversation_action: mod_mes::ApplyConversationAction,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ApplyConversationActionInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ApplyConversationActionInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ApplyConversationActionInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ApplyConversationActionOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ApplyConversationActionOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ApplyConversationActionResponse")]
    pub apply_conversation_action_response: mod_mes::ApplyConversationActionResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ApplyConversationActionOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ApplyConversationActionOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ApplyConversationActionOutputEnvelopeBody,
}
pub async fn apply_conversation_action(
    req: ApplyConversationActionInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<ApplyConversationActionOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/ApplyConversationAction";
    helpers::send_soap_request(url, credentials, req).await
}

/* DisconnectPhoneCall */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DisconnectPhoneCallInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DisconnectPhoneCallInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DisconnectPhoneCall")]
    pub disconnect_phone_call: mod_mes::DisconnectPhoneCall,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DisconnectPhoneCallInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DisconnectPhoneCallInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DisconnectPhoneCallInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DisconnectPhoneCallOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DisconnectPhoneCallOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DisconnectPhoneCallResponse")]
    pub disconnect_phone_call_response: mod_mes::DisconnectPhoneCallResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DisconnectPhoneCallOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DisconnectPhoneCallOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DisconnectPhoneCallOutputEnvelopeBody,
}
pub async fn disconnect_phone_call(
    req: DisconnectPhoneCallInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<DisconnectPhoneCallOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/DisconnectPhoneCall";
    helpers::send_soap_request(url, credentials, req).await
}

/* UpdateInboxRules */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateInboxRulesInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateInboxRulesInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateInboxRules")]
    pub update_inbox_rules: mod_mes::UpdateInboxRules,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateInboxRulesInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateInboxRulesInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateInboxRulesInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateInboxRulesOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateInboxRulesOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateInboxRulesResponse")]
    pub update_inbox_rules_response: mod_mes::UpdateInboxRulesResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateInboxRulesOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateInboxRulesOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateInboxRulesOutputEnvelopeBody,
}
pub async fn update_inbox_rules(
    req: UpdateInboxRulesInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<UpdateInboxRulesOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateInboxRules";
    helpers::send_soap_request(url, credentials, req).await
}

/* SetHoldOnMailboxes */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetHoldOnMailboxesInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetHoldOnMailboxesInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SetHoldOnMailboxes")]
    pub set_hold_on_mailboxes: mod_mes::SetHoldOnMailboxes,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetHoldOnMailboxesInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SetHoldOnMailboxesInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SetHoldOnMailboxesInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetHoldOnMailboxesOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetHoldOnMailboxesOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SetHoldOnMailboxesResponse")]
    pub set_hold_on_mailboxes_response: mod_mes::SetHoldOnMailboxesResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetHoldOnMailboxesOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SetHoldOnMailboxesOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SetHoldOnMailboxesOutputEnvelopeBody,
}
pub async fn set_hold_on_mailboxes(
    req: SetHoldOnMailboxesInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<SetHoldOnMailboxesOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/SetHoldOnMailboxes";
    helpers::send_soap_request(url, credentials, req).await
}

/* RefreshSharingFolder */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RefreshSharingFolderInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RefreshSharingFolderInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "RefreshSharingFolder")]
    pub refresh_sharing_folder: mod_mes::RefreshSharingFolder,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RefreshSharingFolderInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: RefreshSharingFolderInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: RefreshSharingFolderInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RefreshSharingFolderOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RefreshSharingFolderOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "RefreshSharingFolderResponse")]
    pub refresh_sharing_folder_response: mod_mes::RefreshSharingFolderResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RefreshSharingFolderOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: RefreshSharingFolderOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: RefreshSharingFolderOutputEnvelopeBody,
}
pub async fn refresh_sharing_folder(
    req: RefreshSharingFolderInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<RefreshSharingFolderOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/RefreshSharingFolder";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetEvents */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetEventsInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetEventsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetEvents")]
    pub get_events: mod_mes::GetEvents,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetEventsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetEventsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetEventsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetEventsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetEventsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetEventsResponse")]
    pub get_events_response: mod_mes::GetEventsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetEventsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetEventsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetEventsOutputEnvelopeBody,
}
pub async fn get_events(
    req: GetEventsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetEventsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetEvents";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetHoldOnMailboxes */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetHoldOnMailboxesInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetHoldOnMailboxesInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetHoldOnMailboxes")]
    pub get_hold_on_mailboxes: mod_mes::GetHoldOnMailboxes,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetHoldOnMailboxesInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetHoldOnMailboxesInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetHoldOnMailboxesInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetHoldOnMailboxesOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetHoldOnMailboxesOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetHoldOnMailboxesResponse")]
    pub get_hold_on_mailboxes_response: mod_mes::GetHoldOnMailboxesResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetHoldOnMailboxesOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetHoldOnMailboxesOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetHoldOnMailboxesOutputEnvelopeBody,
}
pub async fn get_hold_on_mailboxes(
    req: GetHoldOnMailboxesInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetHoldOnMailboxesOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetHoldOnMailboxes";
    helpers::send_soap_request(url, credentials, req).await
}

/* MoveFolder */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MoveFolderInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MoveFolderInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "MoveFolder")]
    pub move_folder: mod_mes::MoveFolder,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MoveFolderInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: MoveFolderInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: MoveFolderInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MoveFolderOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MoveFolderOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "MoveFolderResponse")]
    pub move_folder_response: mod_mes::MoveFolderResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MoveFolderOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: MoveFolderOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: MoveFolderOutputEnvelopeBody,
}
pub async fn move_folder(
    req: MoveFolderInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<MoveFolderOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/MoveFolder";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetPasswordExpirationDate */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPasswordExpirationDateInputEnvelopeHeader {
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPasswordExpirationDateInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetPasswordExpirationDate")]
    pub get_password_expiration_date: mod_mes::GetPasswordExpirationDate,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPasswordExpirationDateInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetPasswordExpirationDateInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetPasswordExpirationDateInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPasswordExpirationDateOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPasswordExpirationDateOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetPasswordExpirationDateResponse")]
    pub get_password_expiration_date_response: mod_mes::GetPasswordExpirationDateResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPasswordExpirationDateOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetPasswordExpirationDateOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetPasswordExpirationDateOutputEnvelopeBody,
}
pub async fn get_password_expiration_date(
    req: GetPasswordExpirationDateInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetPasswordExpirationDateOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetPasswordExpirationDate";
    helpers::send_soap_request(url, credentials, req).await
}

/* MarkAllItemsAsRead */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MarkAllItemsAsReadInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MarkAllItemsAsReadInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "MarkAllItemsAsRead")]
    pub mark_all_items_as_read: mod_mes::MarkAllItemsAsRead,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MarkAllItemsAsReadInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: MarkAllItemsAsReadInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: MarkAllItemsAsReadInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MarkAllItemsAsReadOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MarkAllItemsAsReadOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "MarkAllItemsAsReadResponse")]
    pub mark_all_items_as_read_response: mod_mes::MarkAllItemsAsReadResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MarkAllItemsAsReadOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: MarkAllItemsAsReadOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: MarkAllItemsAsReadOutputEnvelopeBody,
}
pub async fn mark_all_items_as_read(
    req: MarkAllItemsAsReadInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<MarkAllItemsAsReadOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/MarkAllItemsAsRead";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetNonIndexableItemStatistics */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetNonIndexableItemStatisticsInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetNonIndexableItemStatisticsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetNonIndexableItemStatistics")]
    pub get_non_indexable_item_statistics: mod_mes::GetNonIndexableItemStatistics,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetNonIndexableItemStatisticsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetNonIndexableItemStatisticsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetNonIndexableItemStatisticsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetNonIndexableItemStatisticsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetNonIndexableItemStatisticsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetNonIndexableItemStatisticsResponse")]
    pub get_non_indexable_item_statistics_response: mod_mes::GetNonIndexableItemStatisticsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetNonIndexableItemStatisticsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetNonIndexableItemStatisticsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetNonIndexableItemStatisticsOutputEnvelopeBody,
}
pub async fn get_non_indexable_item_statistics(
    req: GetNonIndexableItemStatisticsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetNonIndexableItemStatisticsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetNonIndexableItemStatistics";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetImItems */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetImItemsInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetImItemsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetImItems")]
    pub get_im_items: mod_mes::GetImItems,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetImItemsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetImItemsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetImItemsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetImItemsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetImItemsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetImItemsResponse")]
    pub get_im_items_response: mod_mes::GetImItemsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetImItemsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetImItemsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetImItemsOutputEnvelopeBody,
}
pub async fn get_im_items(
    req: GetImItemsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetImItemsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetImItems";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetStreamingEvents */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetStreamingEventsInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetStreamingEventsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetStreamingEvents")]
    pub get_streaming_events: mod_mes::GetStreamingEvents,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetStreamingEventsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetStreamingEventsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetStreamingEventsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetStreamingEventsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetStreamingEventsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetStreamingEventsResponse")]
    pub get_streaming_events_response: mod_mes::GetStreamingEventsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetStreamingEventsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetStreamingEventsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetStreamingEventsOutputEnvelopeBody,
}
pub async fn get_streaming_events(
    req: GetStreamingEventsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetStreamingEventsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetEvents";
    helpers::send_soap_request(url, credentials, req).await
}

/* MoveItem */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MoveItemInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MoveItemInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "MoveItem")]
    pub move_item: mod_mes::MoveItem,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MoveItemInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: MoveItemInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: MoveItemInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MoveItemOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MoveItemOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "MoveItemResponse")]
    pub move_item_response: mod_mes::MoveItemResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct MoveItemOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: MoveItemOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: MoveItemOutputEnvelopeBody,
}
pub async fn move_item(
    req: MoveItemInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<MoveItemOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/MoveItem";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetSharingMetadata */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSharingMetadataInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSharingMetadataInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetSharingMetadata")]
    pub get_sharing_metadata: mod_mes::GetSharingMetadata,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSharingMetadataInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetSharingMetadataInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetSharingMetadataInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSharingMetadataOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSharingMetadataOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetSharingMetadataResponse")]
    pub get_sharing_metadata_response: mod_mes::GetSharingMetadataResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSharingMetadataOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetSharingMetadataOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetSharingMetadataOutputEnvelopeBody,
}
pub async fn get_sharing_metadata(
    req: GetSharingMetadataInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetSharingMetadataOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetSharingMetadata";
    helpers::send_soap_request(url, credentials, req).await
}

/* UpdateItemInRecoverableItems */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateItemInRecoverableItemsInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateItemInRecoverableItemsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateItemInRecoverableItems")]
    pub update_item_in_recoverable_items: mod_mes::UpdateItemInRecoverableItems,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateItemInRecoverableItemsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateItemInRecoverableItemsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateItemInRecoverableItemsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateItemInRecoverableItemsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateItemInRecoverableItemsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateItemInRecoverableItemsResponse")]
    pub update_item_in_recoverable_items_response: mod_mes::UpdateItemInRecoverableItemsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateItemInRecoverableItemsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateItemInRecoverableItemsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateItemInRecoverableItemsOutputEnvelopeBody,
}
pub async fn update_item_in_recoverable_items(
    req: UpdateItemInRecoverableItemsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<UpdateItemInRecoverableItemsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateItemInRecoverableItems";
    helpers::send_soap_request(url, credentials, req).await
}

/* FindAvailableMeetingTimes */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindAvailableMeetingTimesInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindAvailableMeetingTimesInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindAvailableMeetingTimes")]
    pub find_available_meeting_times: mod_mes::FindAvailableMeetingTimes,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindAvailableMeetingTimesInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindAvailableMeetingTimesInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindAvailableMeetingTimesInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindAvailableMeetingTimesOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindAvailableMeetingTimesOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindAvailableMeetingTimesResponse")]
    pub find_available_meeting_times_response: mod_mes::FindAvailableMeetingTimesResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindAvailableMeetingTimesOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindAvailableMeetingTimesOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindAvailableMeetingTimesOutputEnvelopeBody,
}
pub async fn find_available_meeting_times(
    req: FindAvailableMeetingTimesInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<FindAvailableMeetingTimesOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/FindAvailableMeetingTimes";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetServiceConfiguration */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetServiceConfigurationInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetServiceConfigurationInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetServiceConfiguration")]
    pub get_service_configuration: mod_mes::GetServiceConfiguration,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetServiceConfigurationInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetServiceConfigurationInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetServiceConfigurationInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetServiceConfigurationOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetServiceConfigurationOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetServiceConfigurationResponse")]
    pub get_service_configuration_response: mod_mes::GetServiceConfigurationResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetServiceConfigurationOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetServiceConfigurationOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetServiceConfigurationOutputEnvelopeBody,
}
pub async fn get_service_configuration(
    req: GetServiceConfigurationInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetServiceConfigurationOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetServiceConfiguration";
    helpers::send_soap_request(url, credentials, req).await
}

/* ArchiveItem */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ArchiveItemInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ArchiveItemInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ArchiveItem")]
    pub archive_item: mod_mes::ArchiveItem,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ArchiveItemInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ArchiveItemInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ArchiveItemInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ArchiveItemOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ArchiveItemOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ArchiveItemResponse")]
    pub archive_item_response: mod_mes::ArchiveItemResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ArchiveItemOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ArchiveItemOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ArchiveItemOutputEnvelopeBody,
}
pub async fn archive_item(
    req: ArchiveItemInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<ArchiveItemOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/ArchiveItem";
    helpers::send_soap_request(url, credentials, req).await
}

/* ExpandDL */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExpandDLInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExpandDLInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ExpandDL")]
    pub expand_dl: mod_mes::ExpandDL,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExpandDLInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ExpandDLInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ExpandDLInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExpandDLOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExpandDLOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ExpandDLResponse")]
    pub expand_dl_response: mod_mes::ExpandDLResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExpandDLOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ExpandDLOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ExpandDLOutputEnvelopeBody,
}
pub async fn expand_dl(
    req: ExpandDLInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<ExpandDLOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/ExpandDL";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetDelegate */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetDelegateInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetDelegateInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetDelegate")]
    pub get_delegate: mod_mes::GetDelegate,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetDelegateInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetDelegateInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetDelegateInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetDelegateOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetDelegateOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetDelegateResponse")]
    pub get_delegate_response: mod_mes::GetDelegateResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetDelegateOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetDelegateOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetDelegateOutputEnvelopeBody,
}
pub async fn get_delegate(
    req: GetDelegateInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetDelegateOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetDelegate";
    helpers::send_soap_request(url, credentials, req).await
}

/* CreateFolderPath */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateFolderPathInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateFolderPathInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateFolderPath")]
    pub create_folder_path: mod_mes::CreateFolderPath,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateFolderPathInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateFolderPathInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateFolderPathInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateFolderPathOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateFolderPathOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateFolderPathResponse")]
    pub create_folder_path_response: mod_mes::CreateFolderPathResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateFolderPathOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateFolderPathOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateFolderPathOutputEnvelopeBody,
}
pub async fn create_folder_path(
    req: CreateFolderPathInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<CreateFolderPathOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/CreateFolderPath";
    helpers::send_soap_request(url, credentials, req).await
}

/* RemoveDelegate */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveDelegateInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveDelegateInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "RemoveDelegate")]
    pub remove_delegate: mod_mes::RemoveDelegate,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveDelegateInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: RemoveDelegateInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: RemoveDelegateInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveDelegateOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveDelegateOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "RemoveDelegateResponse")]
    pub remove_delegate_response: mod_mes::RemoveDelegateResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveDelegateOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: RemoveDelegateOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: RemoveDelegateOutputEnvelopeBody,
}
pub async fn remove_delegate(
    req: RemoveDelegateInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<RemoveDelegateOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveDelegate";
    helpers::send_soap_request(url, credentials, req).await
}

/* UploadItems */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UploadItemsInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UploadItemsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UploadItems")]
    pub upload_items: mod_mes::UploadItems,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UploadItemsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UploadItemsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UploadItemsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UploadItemsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UploadItemsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UploadItemsResponse")]
    pub upload_items_response: mod_mes::UploadItemsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UploadItemsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UploadItemsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UploadItemsOutputEnvelopeBody,
}
pub async fn upload_items(
    req: UploadItemsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<UploadItemsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/UploadItems";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetItem */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetItemInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
    #[yaserde(rename = "DateTimePrecision")]
    pub date_time_precision: Option<mod_typ::DateTimePrecision>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetItemInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetItem")]
    pub get_item: mod_mes::GetItem,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetItemInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetItemInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetItemInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetItemOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetItemOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetItemResponse")]
    pub get_item_response: mod_mes::GetItemResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetItemOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetItemOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetItemOutputEnvelopeBody,
}
pub async fn get_item(
    req: GetItemInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetItemOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetItem";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetConversationItems */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetConversationItemsInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetConversationItemsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetConversationItems")]
    pub get_conversation_items: mod_mes::GetConversationItems,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetConversationItemsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetConversationItemsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetConversationItemsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetConversationItemsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetConversationItemsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetConversationItemsResponse")]
    pub get_conversation_items_response: mod_mes::GetConversationItemsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetConversationItemsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetConversationItemsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetConversationItemsOutputEnvelopeBody,
}
pub async fn get_conversation_items(
    req: GetConversationItemsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetConversationItemsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetConversationItems";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetAppManifests */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAppManifestsInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAppManifestsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetAppManifests")]
    pub get_app_manifests: mod_mes::GetAppManifests,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAppManifestsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetAppManifestsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetAppManifestsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAppManifestsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAppManifestsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetAppManifestsResponse")]
    pub get_app_manifests_response: mod_mes::GetAppManifestsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAppManifestsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetAppManifestsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetAppManifestsOutputEnvelopeBody,
}
pub async fn get_app_manifests(
    req: GetAppManifestsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetAppManifestsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetAppManifests";
    helpers::send_soap_request(url, credentials, req).await
}

/* CreateMeetingInstance */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateMeetingInstanceInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateMeetingInstanceInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateMeetingInstanceRequest")]
    pub create_meeting_instance_request: mod_mes::CreateMeetingInstanceRequest,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateMeetingInstanceInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateMeetingInstanceInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateMeetingInstanceInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateMeetingInstanceOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateMeetingInstanceOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateMeetingInstanceResponse")]
    pub create_meeting_instance_response: mod_mes::CreateMeetingInstanceResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateMeetingInstanceOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateMeetingInstanceOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateMeetingInstanceOutputEnvelopeBody,
}
pub async fn create_meeting_instance(
    req: CreateMeetingInstanceInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<CreateMeetingInstanceOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/CreateMeetingInstanceRequest";
    helpers::send_soap_request(url, credentials, req).await
}

/* DeleteMeetingSpace */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteMeetingSpaceInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteMeetingSpaceInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteMeetingSpace")]
    pub delete_meeting_space: mod_mes::DeleteMeetingSpace,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteMeetingSpaceInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteMeetingSpaceInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteMeetingSpaceInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteMeetingSpaceOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteMeetingSpaceOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteMeetingSpaceResponseMessage")]
    pub delete_meeting_space_response_message: mod_mes::DeleteMeetingSpaceResponseMessage,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteMeetingSpaceOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteMeetingSpaceOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteMeetingSpaceOutputEnvelopeBody,
}
pub async fn delete_meeting_space(
    req: DeleteMeetingSpaceInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<DeleteMeetingSpaceOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteMeetingSpace";
    helpers::send_soap_request(url, credentials, req).await
}

/* CopyItem */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CopyItemInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CopyItemInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CopyItem")]
    pub copy_item: mod_mes::CopyItem,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CopyItemInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CopyItemInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CopyItemInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CopyItemOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CopyItemOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CopyItemResponse")]
    pub copy_item_response: mod_mes::CopyItemResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CopyItemOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CopyItemOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CopyItemOutputEnvelopeBody,
}
pub async fn copy_item(
    req: CopyItemInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<CopyItemOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/CopyItem";
    helpers::send_soap_request(url, credentials, req).await
}

/* HideTag */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct HideTagInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct HideTagInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "HideTag")]
    pub hide_tag: mod_mes::HideTag,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct HideTagInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: HideTagInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: HideTagInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct HideTagOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct HideTagOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "HideTagResponse")]
    pub hide_tag_response: mod_mes::HideTagResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct HideTagOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: HideTagOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: HideTagOutputEnvelopeBody,
}
pub async fn hide_tag(
    req: HideTagInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<HideTagOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/HideTag";
    helpers::send_soap_request(url, credentials, req).await
}

/* DeleteUserConfiguration */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteUserConfigurationInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteUserConfigurationInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteUserConfiguration")]
    pub delete_user_configuration: mod_mes::DeleteUserConfiguration,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteUserConfigurationInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteUserConfigurationInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteUserConfigurationInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteUserConfigurationOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteUserConfigurationOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteUserConfigurationResponse")]
    pub delete_user_configuration_response: mod_mes::DeleteUserConfigurationResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteUserConfigurationOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteUserConfigurationOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteUserConfigurationOutputEnvelopeBody,
}
pub async fn delete_user_configuration(
    req: DeleteUserConfigurationInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<DeleteUserConfigurationOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteUserConfiguration";
    helpers::send_soap_request(url, credentials, req).await
}

/* ResolveNames */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ResolveNamesInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ResolveNamesInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ResolveNames")]
    pub resolve_names: mod_mes::ResolveNames,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ResolveNamesInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ResolveNamesInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ResolveNamesInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ResolveNamesOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ResolveNamesOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ResolveNamesResponse")]
    pub resolve_names_response: mod_mes::ResolveNamesResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ResolveNamesOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ResolveNamesOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ResolveNamesOutputEnvelopeBody,
}
pub async fn resolve_names(
    req: ResolveNamesInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<ResolveNamesOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/ResolveNames";
    helpers::send_soap_request(url, credentials, req).await
}

/* UpdateItem */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateItemInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateItemInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateItem")]
    pub update_item: mod_mes::UpdateItem,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateItemInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateItemInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateItemInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateItemOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateItemOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateItemResponse")]
    pub update_item_response: mod_mes::UpdateItemResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateItemOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateItemOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateItemOutputEnvelopeBody,
}
pub async fn update_item(
    req: UpdateItemInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<UpdateItemOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateItem";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetSpecificUserConfiguration */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSpecificUserConfigurationInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSpecificUserConfigurationInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetSpecificUserConfiguration")]
    pub get_specific_user_configuration: mod_mes::GetSpecificUserConfiguration,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSpecificUserConfigurationInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetSpecificUserConfigurationInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetSpecificUserConfigurationInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSpecificUserConfigurationOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSpecificUserConfigurationOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetSpecificUserConfigurationResponse")]
    pub get_specific_user_configuration_response: mod_mes::GetSpecificUserConfigurationResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSpecificUserConfigurationOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetSpecificUserConfigurationOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetSpecificUserConfigurationOutputEnvelopeBody,
}
pub async fn get_specific_user_configuration(
    req: GetSpecificUserConfigurationInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetSpecificUserConfigurationOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetSpecificUserConfiguration";
    helpers::send_soap_request(url, credentials, req).await
}

/* InstallApp */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct InstallAppInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct InstallAppInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "InstallApp")]
    pub install_app: mod_mes::InstallApp,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct InstallAppInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: InstallAppInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: InstallAppInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct InstallAppOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct InstallAppOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "InstallAppResponse")]
    pub install_app_response: mod_mes::InstallAppResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct InstallAppOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: InstallAppOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: InstallAppOutputEnvelopeBody,
}
pub async fn install_app(
    req: InstallAppInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<InstallAppOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/InstallApp";
    helpers::send_soap_request(url, credentials, req).await
}

/* DeleteAttachment */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteAttachmentInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteAttachmentInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteAttachment")]
    pub delete_attachment: mod_mes::DeleteAttachment,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteAttachmentInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteAttachmentInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteAttachmentInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteAttachmentOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteAttachmentOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteAttachmentResponse")]
    pub delete_attachment_response: mod_mes::DeleteAttachmentResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteAttachmentOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteAttachmentOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteAttachmentOutputEnvelopeBody,
}
pub async fn delete_attachment(
    req: DeleteAttachmentInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<DeleteAttachmentOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteAttachment";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetPhoneCallInformation */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPhoneCallInformationInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPhoneCallInformationInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetPhoneCallInformation")]
    pub get_phone_call_information: mod_mes::GetPhoneCallInformation,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPhoneCallInformationInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetPhoneCallInformationInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetPhoneCallInformationInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPhoneCallInformationOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPhoneCallInformationOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetPhoneCallInformationResponse")]
    pub get_phone_call_information_response: mod_mes::GetPhoneCallInformationResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPhoneCallInformationOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetPhoneCallInformationOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetPhoneCallInformationOutputEnvelopeBody,
}
pub async fn get_phone_call_information(
    req: GetPhoneCallInformationInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetPhoneCallInformationOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetPhoneCallInformation";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetUserAvailability */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserAvailabilityInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserAvailabilityInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetUserAvailabilityRequest")]
    pub get_user_availability_request: mod_mes::GetUserAvailabilityRequest,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserAvailabilityInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetUserAvailabilityInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetUserAvailabilityInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserAvailabilityOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserAvailabilityOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetUserAvailabilityResponse")]
    pub get_user_availability_response: mod_mes::GetUserAvailabilityResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserAvailabilityOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetUserAvailabilityOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetUserAvailabilityOutputEnvelopeBody,
}
pub async fn get_user_availability(
    req: GetUserAvailabilityInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetUserAvailabilityOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetUserAvailability";
    helpers::send_soap_request(url, credentials, req).await
}

/* UpdateMeetingInstance */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateMeetingInstanceInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateMeetingInstanceInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateMeetingInstanceRequest")]
    pub update_meeting_instance_request: mod_mes::UpdateMeetingInstanceRequest,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateMeetingInstanceInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateMeetingInstanceInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateMeetingInstanceInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateMeetingInstanceOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateMeetingInstanceOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateMeetingInstanceResponse")]
    pub update_meeting_instance_response: mod_mes::UpdateMeetingInstanceResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateMeetingInstanceOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateMeetingInstanceOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateMeetingInstanceOutputEnvelopeBody,
}
pub async fn update_meeting_instance(
    req: UpdateMeetingInstanceInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<UpdateMeetingInstanceOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateMeetingInstanceRequest";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetUserConfiguration */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserConfigurationInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserConfigurationInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetUserConfiguration")]
    pub get_user_configuration: mod_mes::GetUserConfiguration,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserConfigurationInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetUserConfigurationInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetUserConfigurationInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserConfigurationOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserConfigurationOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetUserConfigurationResponse")]
    pub get_user_configuration_response: mod_mes::GetUserConfigurationResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserConfigurationOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetUserConfigurationOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetUserConfigurationOutputEnvelopeBody,
}
pub async fn get_user_configuration(
    req: GetUserConfigurationInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetUserConfigurationOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetUserConfiguration";
    helpers::send_soap_request(url, credentials, req).await
}

/* FindItem */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindItemInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
    #[yaserde(rename = "DateTimePrecision")]
    pub date_time_precision: Option<mod_typ::DateTimePrecision>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindItemInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindItem")]
    pub find_item: mod_mes::FindItem,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindItemInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindItemInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindItemInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindItemOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindItemOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindItemResponse")]
    pub find_item_response: mod_mes::FindItemResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindItemOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindItemOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindItemOutputEnvelopeBody,
}
pub async fn find_item(
    req: FindItemInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<FindItemOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/FindItem";
    helpers::send_soap_request(url, credentials, req).await
}

/* CreateItem */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateItemInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateItemInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateItem")]
    pub create_item: mod_mes::CreateItem,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateItemInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateItemInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateItemInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateItemOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateItemOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateItemResponse")]
    pub create_item_response: mod_mes::CreateItemResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateItemOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateItemOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateItemOutputEnvelopeBody,
}
pub async fn create_item(
    req: CreateItemInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<CreateItemOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/CreateItem";
    helpers::send_soap_request(url, credentials, req).await
}

/* ConvertId */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ConvertIdInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ConvertIdInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ConvertId")]
    pub convert_id: mod_mes::ConvertId,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ConvertIdInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ConvertIdInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ConvertIdInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ConvertIdOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ConvertIdOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ConvertIdResponse")]
    pub convert_id_response: mod_mes::ConvertIdResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ConvertIdOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ConvertIdOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ConvertIdOutputEnvelopeBody,
}
pub async fn convert_id(
    req: ConvertIdInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<ConvertIdOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/ConvertId";
    helpers::send_soap_request(url, credentials, req).await
}

/* DeleteMeetingInstance */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteMeetingInstanceInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteMeetingInstanceInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteMeetingInstanceRequest")]
    pub delete_meeting_instance_request: mod_mes::DeleteMeetingInstanceRequest,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteMeetingInstanceInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteMeetingInstanceInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteMeetingInstanceInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteMeetingInstanceOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteMeetingInstanceOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteMeetingInstanceResponse")]
    pub delete_meeting_instance_response: mod_mes::DeleteMeetingInstanceResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteMeetingInstanceOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteMeetingInstanceOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteMeetingInstanceOutputEnvelopeBody,
}
pub async fn delete_meeting_instance(
    req: DeleteMeetingInstanceInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<DeleteMeetingInstanceOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteMeetingInstanceRequest";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetRooms */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetRoomsInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetRoomsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetRooms")]
    pub get_rooms: mod_mes::GetRooms,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetRoomsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetRoomsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetRoomsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetRoomsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetRoomsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetRoomsResponse")]
    pub get_rooms_response: mod_mes::GetRoomsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetRoomsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetRoomsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetRoomsOutputEnvelopeBody,
}
pub async fn get_rooms(
    req: GetRoomsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetRoomsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetRooms";
    helpers::send_soap_request(url, credentials, req).await
}

/* RemoveContactFromImList */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveContactFromImListInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveContactFromImListInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "RemoveContactFromImList")]
    pub remove_contact_from_im_list: mod_mes::RemoveContactFromImList,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveContactFromImListInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: RemoveContactFromImListInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: RemoveContactFromImListInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveContactFromImListOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveContactFromImListOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "RemoveContactFromImListResponse")]
    pub remove_contact_from_im_list_response: mod_mes::RemoveContactFromImListResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveContactFromImListOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: RemoveContactFromImListOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: RemoveContactFromImListOutputEnvelopeBody,
}
pub async fn remove_contact_from_im_list(
    req: RemoveContactFromImListInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<RemoveContactFromImListOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveContactFromImList";
    helpers::send_soap_request(url, credentials, req).await
}

/* SetUserPhoto */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetUserPhotoInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetUserPhotoInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SetUserPhoto")]
    pub set_user_photo: mod_mes::SetUserPhoto,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetUserPhotoInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SetUserPhotoInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SetUserPhotoInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetUserPhotoOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetUserPhotoOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SetUserPhotoResponse")]
    pub set_user_photo_response: mod_mes::SetUserPhotoResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetUserPhotoOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SetUserPhotoOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SetUserPhotoOutputEnvelopeBody,
}
pub async fn set_user_photo(
    req: SetUserPhotoInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<SetUserPhotoOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/SetUserPhoto";
    helpers::send_soap_request(url, credentials, req).await
}

/* UpdateFolder */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateFolderInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateFolderInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateFolder")]
    pub update_folder: mod_mes::UpdateFolder,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateFolderInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateFolderInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateFolderInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateFolderOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateFolderOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateFolderResponse")]
    pub update_folder_response: mod_mes::UpdateFolderResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateFolderOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateFolderOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateFolderOutputEnvelopeBody,
}
pub async fn update_folder(
    req: UpdateFolderInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<UpdateFolderOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateFolder";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetServerTimeZones */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetServerTimeZonesInputEnvelopeHeader {
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetServerTimeZonesInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetServerTimeZones")]
    pub get_server_time_zones: mod_mes::GetServerTimeZones,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetServerTimeZonesInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetServerTimeZonesInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetServerTimeZonesInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetServerTimeZonesOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetServerTimeZonesOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetServerTimeZonesResponse")]
    pub get_server_time_zones_response: mod_mes::GetServerTimeZonesResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetServerTimeZonesOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetServerTimeZonesOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetServerTimeZonesOutputEnvelopeBody,
}
pub async fn get_server_time_zones(
    req: GetServerTimeZonesInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetServerTimeZonesOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetServerTimeZones";
    helpers::send_soap_request(url, credentials, req).await
}

/* SyncFolderHierarchy */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SyncFolderHierarchyInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SyncFolderHierarchyInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SyncFolderHierarchy")]
    pub sync_folder_hierarchy: mod_mes::SyncFolderHierarchy,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SyncFolderHierarchyInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SyncFolderHierarchyInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SyncFolderHierarchyInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SyncFolderHierarchyOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SyncFolderHierarchyOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SyncFolderHierarchyResponse")]
    pub sync_folder_hierarchy_response: mod_mes::SyncFolderHierarchyResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SyncFolderHierarchyOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SyncFolderHierarchyOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SyncFolderHierarchyOutputEnvelopeBody,
}
pub async fn sync_folder_hierarchy(
    req: SyncFolderHierarchyInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<SyncFolderHierarchyOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/SyncFolderHierarchy";
    helpers::send_soap_request(url, credentials, req).await
}

/* ExecuteSearch */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExecuteSearchInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExecuteSearchInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ExecuteSearch")]
    pub execute_search: mod_mes::ExecuteSearch,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExecuteSearchInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ExecuteSearchInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ExecuteSearchInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExecuteSearchOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExecuteSearchOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ExecuteSearchResponse")]
    pub execute_search_response: mod_mes::ExecuteSearchResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExecuteSearchOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ExecuteSearchOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ExecuteSearchOutputEnvelopeBody,
}
pub async fn execute_search(
    req: ExecuteSearchInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<ExecuteSearchOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/ExecuteSearch";
    helpers::send_soap_request(url, credentials, req).await
}

/* AddImGroup */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddImGroupInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddImGroupInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddImGroup")]
    pub add_im_group: mod_mes::AddImGroup,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddImGroupInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddImGroupInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddImGroupInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddImGroupOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddImGroupOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddImGroupResponse")]
    pub add_im_group_response: mod_mes::AddImGroupResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddImGroupOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddImGroupOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddImGroupOutputEnvelopeBody,
}
pub async fn add_im_group(
    req: AddImGroupInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<AddImGroupOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/AddImGroup";
    helpers::send_soap_request(url, credentials, req).await
}

/* CreateFolder */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateFolderInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateFolderInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateFolder")]
    pub create_folder: mod_mes::CreateFolder,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateFolderInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateFolderInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateFolderInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateFolderOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateFolderOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateFolderResponse")]
    pub create_folder_response: mod_mes::CreateFolderResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateFolderOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateFolderOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateFolderOutputEnvelopeBody,
}
pub async fn create_folder(
    req: CreateFolderInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<CreateFolderOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/CreateFolder";
    helpers::send_soap_request(url, credentials, req).await
}

/* FindTags */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindTagsInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindTagsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindTags")]
    pub find_tags: mod_mes::FindTags,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindTagsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindTagsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindTagsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindTagsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindTagsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindTagsResponse")]
    pub find_tags_response: mod_mes::FindTagsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindTagsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindTagsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindTagsOutputEnvelopeBody,
}
pub async fn find_tags(
    req: FindTagsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<FindTagsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/FindTags";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetUserOofSettings */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserOofSettingsInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserOofSettingsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetUserOofSettingsRequest")]
    pub get_user_oof_settings_request: mod_mes::GetUserOofSettingsRequest,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserOofSettingsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetUserOofSettingsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetUserOofSettingsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserOofSettingsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserOofSettingsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetUserOofSettingsResponse")]
    pub get_user_oof_settings_response: mod_mes::GetUserOofSettingsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserOofSettingsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetUserOofSettingsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetUserOofSettingsOutputEnvelopeBody,
}
pub async fn get_user_oof_settings(
    req: GetUserOofSettingsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetUserOofSettingsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetUserOofSettings";
    helpers::send_soap_request(url, credentials, req).await
}

/* CopyFolder */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CopyFolderInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CopyFolderInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CopyFolder")]
    pub copy_folder: mod_mes::CopyFolder,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CopyFolderInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CopyFolderInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CopyFolderInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CopyFolderOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CopyFolderOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CopyFolderResponse")]
    pub copy_folder_response: mod_mes::CopyFolderResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CopyFolderOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CopyFolderOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CopyFolderOutputEnvelopeBody,
}
pub async fn copy_folder(
    req: CopyFolderInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<CopyFolderOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/CopyFolder";
    helpers::send_soap_request(url, credentials, req).await
}

/* FindMessageTrackingReport */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMessageTrackingReportInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMessageTrackingReportInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindMessageTrackingReport")]
    pub find_message_tracking_report: mod_mes::FindMessageTrackingReport,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMessageTrackingReportInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindMessageTrackingReportInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindMessageTrackingReportInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMessageTrackingReportOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMessageTrackingReportOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindMessageTrackingReportResponse")]
    pub find_message_tracking_report_response: mod_mes::FindMessageTrackingReportResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMessageTrackingReportOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindMessageTrackingReportOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindMessageTrackingReportOutputEnvelopeBody,
}
pub async fn find_message_tracking_report(
    req: FindMessageTrackingReportInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<FindMessageTrackingReportOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/FindMessageTrackingReport";
    helpers::send_soap_request(url, credentials, req).await
}

/* FindPeople */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindPeopleInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindPeopleInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindPeople")]
    pub find_people: mod_mes::FindPeople,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindPeopleInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindPeopleInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindPeopleInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindPeopleOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindPeopleOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindPeopleResponse")]
    pub find_people_response: mod_mes::FindPeopleResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindPeopleOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindPeopleOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindPeopleOutputEnvelopeBody,
}
pub async fn find_people(
    req: FindPeopleInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<FindPeopleOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/FindPeople";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetFolder */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetFolderInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetFolderInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetFolder")]
    pub get_folder: mod_mes::GetFolder,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetFolderInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetFolderInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetFolderInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetFolderOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetFolderOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetFolderResponse")]
    pub get_folder_response: mod_mes::GetFolderResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetFolderOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetFolderOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetFolderOutputEnvelopeBody,
}
pub async fn get_folder(
    req: GetFolderInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetFolderOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetFolder";
    helpers::send_soap_request(url, credentials, req).await
}

/* DeleteFolder */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteFolderInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteFolderInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteFolder")]
    pub delete_folder: mod_mes::DeleteFolder,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteFolderInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteFolderInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteFolderInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteFolderOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteFolderOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteFolderResponse")]
    pub delete_folder_response: mod_mes::DeleteFolderResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteFolderOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteFolderOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteFolderOutputEnvelopeBody,
}
pub async fn delete_folder(
    req: DeleteFolderInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<DeleteFolderOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteFolder";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetAttachment */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAttachmentInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAttachmentInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetAttachment")]
    pub get_attachment: mod_mes::GetAttachment,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAttachmentInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetAttachmentInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetAttachmentInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAttachmentOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAttachmentOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetAttachmentResponse")]
    pub get_attachment_response: mod_mes::GetAttachmentResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAttachmentOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetAttachmentOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetAttachmentOutputEnvelopeBody,
}
pub async fn get_attachment(
    req: GetAttachmentInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetAttachmentOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetAttachment";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetSearchableMailboxes */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSearchableMailboxesInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSearchableMailboxesInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetSearchableMailboxes")]
    pub get_searchable_mailboxes: mod_mes::GetSearchableMailboxes,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSearchableMailboxesInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetSearchableMailboxesInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetSearchableMailboxesInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSearchableMailboxesOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSearchableMailboxesOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetSearchableMailboxesResponse")]
    pub get_searchable_mailboxes_response: mod_mes::GetSearchableMailboxesResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSearchableMailboxesOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetSearchableMailboxesOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetSearchableMailboxesOutputEnvelopeBody,
}
pub async fn get_searchable_mailboxes(
    req: GetSearchableMailboxesInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetSearchableMailboxesOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetSearchableMailboxes";
    helpers::send_soap_request(url, credentials, req).await
}

/* DisableApp */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DisableAppInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DisableAppInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DisableApp")]
    pub disable_app: mod_mes::DisableApp,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DisableAppInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DisableAppInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DisableAppInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DisableAppOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DisableAppOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DisableAppResponse")]
    pub disable_app_response: mod_mes::DisableAppResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DisableAppOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DisableAppOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DisableAppOutputEnvelopeBody,
}
pub async fn disable_app(
    req: DisableAppInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<DisableAppOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/DisableApp";
    helpers::send_soap_request(url, credentials, req).await
}

/* ReportMessage */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ReportMessageInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ReportMessageInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ReportMessage")]
    pub report_message: mod_mes::ReportMessage,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ReportMessageInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ReportMessageInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ReportMessageInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ReportMessageOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ReportMessageOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ReportMessageResponse")]
    pub report_message_response: mod_mes::ReportMessageResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ReportMessageOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ReportMessageOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ReportMessageOutputEnvelopeBody,
}
pub async fn report_message(
    req: ReportMessageInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<ReportMessageOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/ReportMessage";
    helpers::send_soap_request(url, credentials, req).await
}

/* FindMeetingTimeCandidates */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMeetingTimeCandidatesInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMeetingTimeCandidatesInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindMeetingTimeCandidates")]
    pub find_meeting_time_candidates: mod_mes::FindMeetingTimeCandidates,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMeetingTimeCandidatesInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindMeetingTimeCandidatesInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindMeetingTimeCandidatesInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMeetingTimeCandidatesOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMeetingTimeCandidatesOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindMeetingTimeCandidatesResponse")]
    pub find_meeting_time_candidates_response: mod_mes::FindMeetingTimeCandidatesResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMeetingTimeCandidatesOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindMeetingTimeCandidatesOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindMeetingTimeCandidatesOutputEnvelopeBody,
}
pub async fn find_meeting_time_candidates(
    req: FindMeetingTimeCandidatesInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<FindMeetingTimeCandidatesOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/FindMeetingTimeCandidates";
    helpers::send_soap_request(url, credentials, req).await
}

/* CreateMeetingSpace */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateMeetingSpaceInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateMeetingSpaceInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateMeetingSpace")]
    pub create_meeting_space: mod_mes::CreateMeetingSpace,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateMeetingSpaceInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateMeetingSpaceInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateMeetingSpaceInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateMeetingSpaceOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateMeetingSpaceOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateMeetingSpaceResponseMessage")]
    pub create_meeting_space_response_message: mod_mes::CreateMeetingSpaceResponseMessage,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateMeetingSpaceOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateMeetingSpaceOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateMeetingSpaceOutputEnvelopeBody,
}
pub async fn create_meeting_space(
    req: CreateMeetingSpaceInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<CreateMeetingSpaceOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/CreateMeetingSpace";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetMeetingSpace */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMeetingSpaceInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMeetingSpaceInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetMeetingSpace")]
    pub get_meeting_space: mod_mes::GetMeetingSpace,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMeetingSpaceInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetMeetingSpaceInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetMeetingSpaceInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMeetingSpaceOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMeetingSpaceOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetMeetingSpaceResponseMessage")]
    pub get_meeting_space_response_message: mod_mes::GetMeetingSpaceResponseMessage,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMeetingSpaceOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetMeetingSpaceOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetMeetingSpaceOutputEnvelopeBody,
}
pub async fn get_meeting_space(
    req: GetMeetingSpaceInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetMeetingSpaceOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetMeetingSpace";
    helpers::send_soap_request(url, credentials, req).await
}

/* EndSearchSession */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct EndSearchSessionInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct EndSearchSessionInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "EndSearchSession")]
    pub end_search_session: mod_mes::EndSearchSession,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct EndSearchSessionInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: EndSearchSessionInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: EndSearchSessionInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct EndSearchSessionOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct EndSearchSessionOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "EndSearchSessionResponse")]
    pub end_search_session_response: mod_mes::EndSearchSessionResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct EndSearchSessionOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: EndSearchSessionOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: EndSearchSessionOutputEnvelopeBody,
}
pub async fn end_search_session(
    req: EndSearchSessionInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<EndSearchSessionOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/EndSearchSession";
    helpers::send_soap_request(url, credentials, req).await
}

/* CreateAttachment */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateAttachmentInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateAttachmentInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateAttachment")]
    pub create_attachment: mod_mes::CreateAttachment,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateAttachmentInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateAttachmentInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateAttachmentInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateAttachmentOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateAttachmentOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateAttachmentResponse")]
    pub create_attachment_response: mod_mes::CreateAttachmentResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateAttachmentOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateAttachmentOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateAttachmentOutputEnvelopeBody,
}
pub async fn create_attachment(
    req: CreateAttachmentInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<CreateAttachmentOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/CreateAttachment";
    helpers::send_soap_request(url, credentials, req).await
}

/* UninstallApp */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UninstallAppInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UninstallAppInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UninstallApp")]
    pub uninstall_app: mod_mes::UninstallApp,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UninstallAppInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UninstallAppInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UninstallAppInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UninstallAppOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UninstallAppOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UninstallAppResponse")]
    pub uninstall_app_response: mod_mes::UninstallAppResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UninstallAppOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UninstallAppOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UninstallAppOutputEnvelopeBody,
}
pub async fn uninstall_app(
    req: UninstallAppInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<UninstallAppOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/UninstallApp";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetNonIndexableItemDetails */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetNonIndexableItemDetailsInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetNonIndexableItemDetailsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetNonIndexableItemDetails")]
    pub get_non_indexable_item_details: mod_mes::GetNonIndexableItemDetails,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetNonIndexableItemDetailsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetNonIndexableItemDetailsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetNonIndexableItemDetailsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetNonIndexableItemDetailsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetNonIndexableItemDetailsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetNonIndexableItemDetailsResponse")]
    pub get_non_indexable_item_details_response: mod_mes::GetNonIndexableItemDetailsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetNonIndexableItemDetailsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetNonIndexableItemDetailsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetNonIndexableItemDetailsOutputEnvelopeBody,
}
pub async fn get_non_indexable_item_details(
    req: GetNonIndexableItemDetailsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetNonIndexableItemDetailsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetNonIndexableItemDetails";
    helpers::send_soap_request(url, credentials, req).await
}

/* DeleteItem */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteItemInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteItemInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteItem")]
    pub delete_item: mod_mes::DeleteItem,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteItemInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteItemInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteItemInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteItemOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteItemOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteItemResponse")]
    pub delete_item_response: mod_mes::DeleteItemResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteItemOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteItemOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteItemOutputEnvelopeBody,
}
pub async fn delete_item(
    req: DeleteItemInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<DeleteItemOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteItem";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetMeetingInstance */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMeetingInstanceInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMeetingInstanceInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetMeetingInstanceRequest")]
    pub get_meeting_instance_request: mod_mes::GetMeetingInstanceRequest,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMeetingInstanceInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetMeetingInstanceInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetMeetingInstanceInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMeetingInstanceOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMeetingInstanceOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetMeetingInstanceResponse")]
    pub get_meeting_instance_response: mod_mes::GetMeetingInstanceResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMeetingInstanceOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetMeetingInstanceOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetMeetingInstanceOutputEnvelopeBody,
}
pub async fn get_meeting_instance(
    req: GetMeetingInstanceInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetMeetingInstanceOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetMeetingInstanceRequest";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetAppMarketplaceUrl */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAppMarketplaceUrlInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAppMarketplaceUrlInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetAppMarketplaceUrl")]
    pub get_app_marketplace_url: mod_mes::GetAppMarketplaceUrl,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAppMarketplaceUrlInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetAppMarketplaceUrlInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetAppMarketplaceUrlInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAppMarketplaceUrlOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAppMarketplaceUrlOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetAppMarketplaceUrlResponse")]
    pub get_app_marketplace_url_response: mod_mes::GetAppMarketplaceUrlResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetAppMarketplaceUrlOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetAppMarketplaceUrlOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetAppMarketplaceUrlOutputEnvelopeBody,
}
pub async fn get_app_marketplace_url(
    req: GetAppMarketplaceUrlInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetAppMarketplaceUrlOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetAppMarketplaceUrl";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetImItemList */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetImItemListInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetImItemListInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetImItemList")]
    pub get_im_item_list: mod_mes::GetImItemList,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetImItemListInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetImItemListInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetImItemListInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetImItemListOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetImItemListOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetImItemListResponse")]
    pub get_im_item_list_response: mod_mes::GetImItemListResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetImItemListOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetImItemListOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetImItemListOutputEnvelopeBody,
}
pub async fn get_im_item_list(
    req: GetImItemListInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetImItemListOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetImItemList";
    helpers::send_soap_request(url, credentials, req).await
}

/* CreateUserConfiguration */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateUserConfigurationInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateUserConfigurationInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateUserConfiguration")]
    pub create_user_configuration: mod_mes::CreateUserConfiguration,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateUserConfigurationInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateUserConfigurationInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateUserConfigurationInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateUserConfigurationOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateUserConfigurationOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateUserConfigurationResponse")]
    pub create_user_configuration_response: mod_mes::CreateUserConfigurationResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateUserConfigurationOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateUserConfigurationOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateUserConfigurationOutputEnvelopeBody,
}
pub async fn create_user_configuration(
    req: CreateUserConfigurationInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<CreateUserConfigurationOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/CreateUserConfiguration";
    helpers::send_soap_request(url, credentials, req).await
}

/* FindMeetingSpaceByJoinUrl */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMeetingSpaceByJoinUrlInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMeetingSpaceByJoinUrlInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindMeetingSpaceByJoinUrl")]
    pub find_meeting_space_by_join_url: mod_mes::FindMeetingSpaceByJoinUrl,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMeetingSpaceByJoinUrlInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindMeetingSpaceByJoinUrlInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindMeetingSpaceByJoinUrlInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMeetingSpaceByJoinUrlOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMeetingSpaceByJoinUrlOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindMeetingSpaceByJoinUrlResponseMessage")]
    pub find_meeting_space_by_join_url_response_message: mod_mes::FindMeetingSpaceByJoinUrlResponseMessage,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindMeetingSpaceByJoinUrlOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindMeetingSpaceByJoinUrlOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindMeetingSpaceByJoinUrlOutputEnvelopeBody,
}
pub async fn find_meeting_space_by_join_url(
    req: FindMeetingSpaceByJoinUrlInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<FindMeetingSpaceByJoinUrlOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/FindMeetingSpaceByJoinUrl";
    helpers::send_soap_request(url, credentials, req).await
}

/* FindConversation */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindConversationInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindConversationInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindConversation")]
    pub find_conversation: mod_mes::FindConversation,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindConversationInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindConversationInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindConversationInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindConversationOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindConversationOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindConversationResponse")]
    pub find_conversation_response: mod_mes::FindConversationResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindConversationOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindConversationOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindConversationOutputEnvelopeBody,
}
pub async fn find_conversation(
    req: FindConversationInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<FindConversationOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/FindConversation";
    helpers::send_soap_request(url, credentials, req).await
}

/* DeleteSearchSuggestion */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteSearchSuggestionInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteSearchSuggestionInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteSearchSuggestion")]
    pub delete_search_suggestion: mod_mes::DeleteSearchSuggestion,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteSearchSuggestionInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteSearchSuggestionInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteSearchSuggestionInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteSearchSuggestionOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteSearchSuggestionOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "DeleteSearchSuggestionResponse")]
    pub delete_search_suggestion_response: mod_mes::DeleteSearchSuggestionResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct DeleteSearchSuggestionOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: DeleteSearchSuggestionOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: DeleteSearchSuggestionOutputEnvelopeBody,
}
pub async fn delete_search_suggestion(
    req: DeleteSearchSuggestionInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<DeleteSearchSuggestionOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/DeleteSearchSuggestion";
    helpers::send_soap_request(url, credentials, req).await
}

/* AddNewTelUriContactToGroup */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddNewTelUriContactToGroupInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddNewTelUriContactToGroupInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddNewTelUriContactToGroup")]
    pub add_new_tel_uri_contact_to_group: mod_mes::AddNewTelUriContactToGroup,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddNewTelUriContactToGroupInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddNewTelUriContactToGroupInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddNewTelUriContactToGroupInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddNewTelUriContactToGroupOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddNewTelUriContactToGroupOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddNewTelUriContactToGroupResponse")]
    pub add_new_tel_uri_contact_to_group_response: mod_mes::AddNewTelUriContactToGroupResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddNewTelUriContactToGroupOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddNewTelUriContactToGroupOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddNewTelUriContactToGroupOutputEnvelopeBody,
}
pub async fn add_new_tel_uri_contact_to_group(
    req: AddNewTelUriContactToGroupInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<AddNewTelUriContactToGroupOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/AddNewTelUriContactToGroup";
    helpers::send_soap_request(url, credentials, req).await
}

/* SetImGroup */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetImGroupInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetImGroupInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SetImGroup")]
    pub set_im_group: mod_mes::SetImGroup,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetImGroupInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SetImGroupInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SetImGroupInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetImGroupOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetImGroupOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SetImGroupResponse")]
    pub set_im_group_response: mod_mes::SetImGroupResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetImGroupOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SetImGroupOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SetImGroupOutputEnvelopeBody,
}
pub async fn set_im_group(
    req: SetImGroupInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<SetImGroupOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/SetImGroup";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetUserPhoto */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserPhotoInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserPhotoInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetUserPhoto")]
    pub get_user_photo: mod_mes::GetUserPhoto,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserPhotoInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetUserPhotoInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetUserPhotoInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserPhotoOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserPhotoOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetUserPhotoResponse")]
    pub get_user_photo_response: mod_mes::GetUserPhotoResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserPhotoOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetUserPhotoOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetUserPhotoOutputEnvelopeBody,
}
pub async fn get_user_photo(
    req: GetUserPhotoInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetUserPhotoOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetUserPhoto";
    helpers::send_soap_request(url, credentials, req).await
}

/* AddDelegate */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddDelegateInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddDelegateInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddDelegate")]
    pub add_delegate: mod_mes::AddDelegate,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddDelegateInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddDelegateInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddDelegateInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddDelegateOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddDelegateOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "AddDelegateResponse")]
    pub add_delegate_response: mod_mes::AddDelegateResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct AddDelegateOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: AddDelegateOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: AddDelegateOutputEnvelopeBody,
}
pub async fn add_delegate(
    req: AddDelegateInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<AddDelegateOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/AddDelegate";
    helpers::send_soap_request(url, credentials, req).await
}

/* UpdateUserConfiguration */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateUserConfigurationInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateUserConfigurationInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateUserConfiguration")]
    pub update_user_configuration: mod_mes::UpdateUserConfiguration,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateUserConfigurationInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateUserConfigurationInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateUserConfigurationInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateUserConfigurationOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateUserConfigurationOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateUserConfigurationResponse")]
    pub update_user_configuration_response: mod_mes::UpdateUserConfigurationResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateUserConfigurationOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateUserConfigurationOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateUserConfigurationOutputEnvelopeBody,
}
pub async fn update_user_configuration(
    req: UpdateUserConfigurationInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<UpdateUserConfigurationOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateUserConfiguration";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetInboxRules */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetInboxRulesInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetInboxRulesInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetInboxRules")]
    pub get_inbox_rules: mod_mes::GetInboxRules,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetInboxRulesInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetInboxRulesInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetInboxRulesInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetInboxRulesOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetInboxRulesOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetInboxRulesResponse")]
    pub get_inbox_rules_response: mod_mes::GetInboxRulesResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetInboxRulesOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetInboxRulesOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetInboxRulesOutputEnvelopeBody,
}
pub async fn get_inbox_rules(
    req: GetInboxRulesInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetInboxRulesOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetInboxRules";
    helpers::send_soap_request(url, credentials, req).await
}

/* SetImListMigrationCompleted */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetImListMigrationCompletedInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetImListMigrationCompletedInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SetImListMigrationCompleted")]
    pub set_im_list_migration_completed: mod_mes::SetImListMigrationCompleted,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetImListMigrationCompletedInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SetImListMigrationCompletedInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SetImListMigrationCompletedInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetImListMigrationCompletedOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetImListMigrationCompletedOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SetImListMigrationCompletedResponse")]
    pub set_im_list_migration_completed_response: mod_mes::SetImListMigrationCompletedResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetImListMigrationCompletedOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SetImListMigrationCompletedOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SetImListMigrationCompletedOutputEnvelopeBody,
}
pub async fn set_im_list_migration_completed(
    req: SetImListMigrationCompletedInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<SetImListMigrationCompletedOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/SetImListMigrationCompleted";
    helpers::send_soap_request(url, credentials, req).await
}

/* SearchMailboxes */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SearchMailboxesInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SearchMailboxesInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SearchMailboxes")]
    pub search_mailboxes: mod_mes::SearchMailboxes,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SearchMailboxesInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SearchMailboxesInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SearchMailboxesInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SearchMailboxesOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SearchMailboxesOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SearchMailboxesResponse")]
    pub search_mailboxes_response: mod_mes::SearchMailboxesResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SearchMailboxesOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SearchMailboxesOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SearchMailboxesOutputEnvelopeBody,
}
pub async fn search_mailboxes(
    req: SearchMailboxesInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<SearchMailboxesOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/SearchMailboxes";
    helpers::send_soap_request(url, credentials, req).await
}

/* SyncFolderItems */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SyncFolderItemsInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SyncFolderItemsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SyncFolderItems")]
    pub sync_folder_items: mod_mes::SyncFolderItems,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SyncFolderItemsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SyncFolderItemsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SyncFolderItemsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SyncFolderItemsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SyncFolderItemsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SyncFolderItemsResponse")]
    pub sync_folder_items_response: mod_mes::SyncFolderItemsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SyncFolderItemsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SyncFolderItemsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SyncFolderItemsOutputEnvelopeBody,
}
pub async fn sync_folder_items(
    req: SyncFolderItemsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<SyncFolderItemsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/SyncFolderItems";
    helpers::send_soap_request(url, credentials, req).await
}

/* UnpinTeamMailbox */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UnpinTeamMailboxInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UnpinTeamMailboxInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UnpinTeamMailbox")]
    pub unpin_team_mailbox: mod_mes::UnpinTeamMailbox,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UnpinTeamMailboxInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UnpinTeamMailboxInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UnpinTeamMailboxInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UnpinTeamMailboxOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UnpinTeamMailboxOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UnpinTeamMailboxResponse")]
    pub unpin_team_mailbox_response: mod_mes::UnpinTeamMailboxResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UnpinTeamMailboxOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UnpinTeamMailboxOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UnpinTeamMailboxOutputEnvelopeBody,
}
pub async fn unpin_team_mailbox(
    req: UnpinTeamMailboxInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<UnpinTeamMailboxOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/UnpinTeamMailbox";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetDiscoverySearchConfiguration */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetDiscoverySearchConfigurationInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetDiscoverySearchConfigurationInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetDiscoverySearchConfiguration")]
    pub get_discovery_search_configuration: mod_mes::GetDiscoverySearchConfiguration,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetDiscoverySearchConfigurationInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetDiscoverySearchConfigurationInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetDiscoverySearchConfigurationInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetDiscoverySearchConfigurationOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetDiscoverySearchConfigurationOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetDiscoverySearchConfigurationResponse")]
    pub get_discovery_search_configuration_response: mod_mes::GetDiscoverySearchConfigurationResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetDiscoverySearchConfigurationOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetDiscoverySearchConfigurationOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetDiscoverySearchConfigurationOutputEnvelopeBody,
}
pub async fn get_discovery_search_configuration(
    req: GetDiscoverySearchConfigurationInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetDiscoverySearchConfigurationOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetDiscoverySearchConfiguration";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetPrivateCatalogAddIns */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPrivateCatalogAddInsInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPrivateCatalogAddInsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetPrivateCatalogAddIns")]
    pub get_private_catalog_add_ins: mod_mes::GetPrivateCatalogAddIns,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPrivateCatalogAddInsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetPrivateCatalogAddInsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetPrivateCatalogAddInsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPrivateCatalogAddInsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPrivateCatalogAddInsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetPrivateCatalogAddInsResponse")]
    pub get_private_catalog_add_ins_response: mod_mes::GetPrivateCatalogAddInsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPrivateCatalogAddInsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetPrivateCatalogAddInsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetPrivateCatalogAddInsOutputEnvelopeBody,
}
pub async fn get_private_catalog_add_ins(
    req: GetPrivateCatalogAddInsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetPrivateCatalogAddInsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetPrivateCatalogAddIns";
    helpers::send_soap_request(url, credentials, req).await
}

/* ExportItems */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExportItemsInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExportItemsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ExportItems")]
    pub export_items: mod_mes::ExportItems,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExportItemsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ExportItemsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ExportItemsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExportItemsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExportItemsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "ExportItemsResponse")]
    pub export_items_response: mod_mes::ExportItemsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct ExportItemsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: ExportItemsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: ExportItemsOutputEnvelopeBody,
}
pub async fn export_items(
    req: ExportItemsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<ExportItemsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/ExportItems";
    helpers::send_soap_request(url, credentials, req).await
}

/* SendItem */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SendItemInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SendItemInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SendItem")]
    pub send_item: mod_mes::SendItem,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SendItemInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SendItemInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SendItemInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SendItemOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SendItemOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SendItemResponse")]
    pub send_item_response: mod_mes::SendItemResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SendItemOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SendItemOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SendItemOutputEnvelopeBody,
}
pub async fn send_item(
    req: SendItemInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<SendItemOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/SendItem";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetRoomLists */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetRoomListsInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetRoomListsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetRoomLists")]
    pub get_room_lists: mod_mes::GetRoomLists,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetRoomListsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetRoomListsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetRoomListsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetRoomListsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetRoomListsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetRoomListsResponse")]
    pub get_room_lists_response: mod_mes::GetRoomListsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetRoomListsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetRoomListsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetRoomListsOutputEnvelopeBody,
}
pub async fn get_room_lists(
    req: GetRoomListsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetRoomListsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetRoomLists";
    helpers::send_soap_request(url, credentials, req).await
}

/* RemoveImContactFromGroup */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveImContactFromGroupInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveImContactFromGroupInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "RemoveImContactFromGroup")]
    pub remove_im_contact_from_group: mod_mes::RemoveImContactFromGroup,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveImContactFromGroupInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: RemoveImContactFromGroupInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: RemoveImContactFromGroupInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveImContactFromGroupOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveImContactFromGroupOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "RemoveImContactFromGroupResponse")]
    pub remove_im_contact_from_group_response: mod_mes::RemoveImContactFromGroupResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveImContactFromGroupOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: RemoveImContactFromGroupOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: RemoveImContactFromGroupOutputEnvelopeBody,
}
pub async fn remove_im_contact_from_group(
    req: RemoveImContactFromGroupInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<RemoveImContactFromGroupOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveImContactFromGroup";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetClientAccessToken */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetClientAccessTokenInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetClientAccessTokenInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetClientAccessToken")]
    pub get_client_access_token: mod_mes::GetClientAccessToken,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetClientAccessTokenInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetClientAccessTokenInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetClientAccessTokenInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetClientAccessTokenOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetClientAccessTokenOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetClientAccessTokenResponse")]
    pub get_client_access_token_response: mod_mes::GetClientAccessTokenResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetClientAccessTokenOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetClientAccessTokenOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetClientAccessTokenOutputEnvelopeBody,
}
pub async fn get_client_access_token(
    req: GetClientAccessTokenInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetClientAccessTokenOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetClientAccessToken";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetLastPrivateCatalogUpdate */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetLastPrivateCatalogUpdateInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetLastPrivateCatalogUpdateInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetLastPrivateCatalogUpdate")]
    pub get_last_private_catalog_update: mod_mes::GetLastPrivateCatalogUpdate,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetLastPrivateCatalogUpdateInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetLastPrivateCatalogUpdateInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetLastPrivateCatalogUpdateInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetLastPrivateCatalogUpdateOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetLastPrivateCatalogUpdateOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetLastPrivateCatalogUpdateResponse")]
    pub get_last_private_catalog_update_response: mod_mes::GetLastPrivateCatalogUpdateResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetLastPrivateCatalogUpdateOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetLastPrivateCatalogUpdateOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetLastPrivateCatalogUpdateOutputEnvelopeBody,
}
pub async fn get_last_private_catalog_update(
    req: GetLastPrivateCatalogUpdateInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetLastPrivateCatalogUpdateOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetLastPrivateCatalogUpdate";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetUserRetentionPolicyTags */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserRetentionPolicyTagsInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserRetentionPolicyTagsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetUserRetentionPolicyTags")]
    pub get_user_retention_policy_tags: mod_mes::GetUserRetentionPolicyTags,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserRetentionPolicyTagsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetUserRetentionPolicyTagsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetUserRetentionPolicyTagsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserRetentionPolicyTagsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserRetentionPolicyTagsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetUserRetentionPolicyTagsResponse")]
    pub get_user_retention_policy_tags_response: mod_mes::GetUserRetentionPolicyTagsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetUserRetentionPolicyTagsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetUserRetentionPolicyTagsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetUserRetentionPolicyTagsOutputEnvelopeBody,
}
pub async fn get_user_retention_policy_tags(
    req: GetUserRetentionPolicyTagsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetUserRetentionPolicyTagsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetUserRetentionPolicyTags";
    helpers::send_soap_request(url, credentials, req).await
}

/* FindFolder */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindFolderInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "TimeZoneContext")]
    pub time_zone_context: Option<mod_typ::TimeZoneContext>,
    #[yaserde(rename = "ManagementRole")]
    pub management_role: Option<mod_typ::ManagementRole>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindFolderInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindFolder")]
    pub find_folder: mod_mes::FindFolder,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindFolderInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindFolderInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindFolderInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindFolderOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindFolderOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "FindFolderResponse")]
    pub find_folder_response: mod_mes::FindFolderResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct FindFolderOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: FindFolderOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: FindFolderOutputEnvelopeBody,
}
pub async fn find_folder(
    req: FindFolderInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<FindFolderOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/FindFolder";
    helpers::send_soap_request(url, credentials, req).await
}

/* CreateManagedFolder */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateManagedFolderInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateManagedFolderInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateManagedFolder")]
    pub create_managed_folder: mod_mes::CreateManagedFolder,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateManagedFolderInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateManagedFolderInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateManagedFolderInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateManagedFolderOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateManagedFolderOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "CreateManagedFolderResponse")]
    pub create_managed_folder_response: mod_mes::CreateManagedFolderResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct CreateManagedFolderOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: CreateManagedFolderOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: CreateManagedFolderOutputEnvelopeBody,
}
pub async fn create_managed_folder(
    req: CreateManagedFolderInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<CreateManagedFolderOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/CreateManagedFolder";
    helpers::send_soap_request(url, credentials, req).await
}

/* Unsubscribe */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UnsubscribeInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UnsubscribeInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "Unsubscribe")]
    pub unsubscribe: mod_mes::Unsubscribe,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UnsubscribeInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UnsubscribeInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UnsubscribeInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UnsubscribeOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UnsubscribeOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UnsubscribeResponse")]
    pub unsubscribe_response: mod_mes::UnsubscribeResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UnsubscribeOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UnsubscribeOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UnsubscribeOutputEnvelopeBody,
}
pub async fn unsubscribe(
    req: UnsubscribeInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<UnsubscribeOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/Unsubscribe";
    helpers::send_soap_request(url, credentials, req).await
}

/* SetUserOofSettings */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetUserOofSettingsInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetUserOofSettingsInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SetUserOofSettingsRequest")]
    pub set_user_oof_settings_request: mod_mes::SetUserOofSettingsRequest,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetUserOofSettingsInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SetUserOofSettingsInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SetUserOofSettingsInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetUserOofSettingsOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetUserOofSettingsOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "SetUserOofSettingsResponse")]
    pub set_user_oof_settings_response: mod_mes::SetUserOofSettingsResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct SetUserOofSettingsOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: SetUserOofSettingsOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: SetUserOofSettingsOutputEnvelopeBody,
}
pub async fn set_user_oof_settings(
    req: SetUserOofSettingsInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<SetUserOofSettingsOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/SetUserOofSettings";
    helpers::send_soap_request(url, credentials, req).await
}

/* RemoveDistributionGroupFromImList */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveDistributionGroupFromImListInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveDistributionGroupFromImListInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "RemoveDistributionGroupFromImList")]
    pub remove_distribution_group_from_im_list: mod_mes::RemoveDistributionGroupFromImList,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveDistributionGroupFromImListInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: RemoveDistributionGroupFromImListInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: RemoveDistributionGroupFromImListInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveDistributionGroupFromImListOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveDistributionGroupFromImListOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "RemoveDistributionGroupFromImListResponse")]
    pub remove_distribution_group_from_im_list_response: mod_mes::RemoveDistributionGroupFromImListResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct RemoveDistributionGroupFromImListOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: RemoveDistributionGroupFromImListOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: RemoveDistributionGroupFromImListOutputEnvelopeBody,
}
pub async fn remove_distribution_group_from_im_list(
    req: RemoveDistributionGroupFromImListInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<RemoveDistributionGroupFromImListOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/RemoveDistributionGroupFromImList";
    helpers::send_soap_request(url, credentials, req).await
}

/* UpdateDelegate */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateDelegateInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateDelegateInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateDelegate")]
    pub update_delegate: mod_mes::UpdateDelegate,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateDelegateInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateDelegateInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateDelegateInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateDelegateOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateDelegateOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "UpdateDelegateResponse")]
    pub update_delegate_response: mod_mes::UpdateDelegateResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct UpdateDelegateOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: UpdateDelegateOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: UpdateDelegateOutputEnvelopeBody,
}
pub async fn update_delegate(
    req: UpdateDelegateInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<UpdateDelegateOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/UpdateDelegate";
    helpers::send_soap_request(url, credentials, req).await
}

/* PlayOnPhone */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct PlayOnPhoneInputEnvelopeHeader {
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
    #[yaserde(rename = "MailboxCulture")]
    pub mailbox_culture: Option<mod_typ::MailboxCulture>,
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct PlayOnPhoneInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "PlayOnPhone")]
    pub play_on_phone: mod_mes::PlayOnPhone,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct PlayOnPhoneInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: PlayOnPhoneInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: PlayOnPhoneInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct PlayOnPhoneOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct PlayOnPhoneOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "PlayOnPhoneResponse")]
    pub play_on_phone_response: mod_mes::PlayOnPhoneResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct PlayOnPhoneOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: PlayOnPhoneOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: PlayOnPhoneOutputEnvelopeBody,
}
pub async fn play_on_phone(
    req: PlayOnPhoneInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<PlayOnPhoneOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/PlayOnPhone";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetMessageTrackingReport */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMessageTrackingReportInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMessageTrackingReportInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetMessageTrackingReport")]
    pub get_message_tracking_report: mod_mes::GetMessageTrackingReport,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMessageTrackingReportInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetMessageTrackingReportInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetMessageTrackingReportInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMessageTrackingReportOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMessageTrackingReportOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetMessageTrackingReportResponse")]
    pub get_message_tracking_report_response: mod_mes::GetMessageTrackingReportResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetMessageTrackingReportOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetMessageTrackingReportOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetMessageTrackingReportOutputEnvelopeBody,
}
pub async fn get_message_tracking_report(
    req: GetMessageTrackingReportInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetMessageTrackingReportOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetMessageTrackingReport";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetPersona */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPersonaInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
    #[yaserde(rename = "Impersonation")]
    pub impersonation: Option<mod_typ::ExchangeImpersonation>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPersonaInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetPersona")]
    pub get_persona: mod_mes::GetPersona,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPersonaInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetPersonaInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetPersonaInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPersonaOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPersonaOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetPersonaResponseMessage")]
    pub get_persona_response_message: mod_mes::GetPersonaResponseMessage,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetPersonaOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetPersonaOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetPersonaOutputEnvelopeBody,
}
pub async fn get_persona(
    req: GetPersonaInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetPersonaOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetPersona";
    helpers::send_soap_request(url, credentials, req).await
}

/* GetSharingFolder */

#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSharingFolderInputEnvelopeHeader {
    #[yaserde(rename = "RequestVersion")]
    pub request_version: Option<mod_typ::RequestServerVersion>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSharingFolderInputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetSharingFolder")]
    pub get_sharing_folder: mod_mes::GetSharingFolder,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSharingFolderInputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetSharingFolderInputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetSharingFolderInputEnvelopeBody,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSharingFolderOutputEnvelopeHeader {
    #[yaserde(rename = "ServerVersion")]
    pub server_version: Option<mod_typ::ServerVersionInfo>,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "mes", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSharingFolderOutputEnvelopeBody {
    #[yaserde(prefix = "mes", rename = "GetSharingFolderResponse")]
    pub get_sharing_folder_response: mod_mes::GetSharingFolderResponse,
}
#[derive(Debug, Default, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "soapenv", rename = "Envelope", namespaces = { "soapenv" = "http://schemas.xmlsoap.org/soap/envelope/", "mes" = "http://schemas.microsoft.com/exchange/services/2006/messages", "typ" = "http://schemas.microsoft.com/exchange/services/2006/types" })]
pub struct GetSharingFolderOutputEnvelope {
    #[yaserde(prefix = "soapenv", rename = "Header")]
    pub header: GetSharingFolderOutputEnvelopeHeader,
    #[yaserde(prefix = "soapenv", rename = "Body")]
    pub body: GetSharingFolderOutputEnvelopeBody,
}
pub async fn get_sharing_folder(
    req: GetSharingFolderInputEnvelope,
    credentials: Option<(String, String)>,
) -> error::SoapResult<GetSharingFolderOutputEnvelope> {
    let url = "http://schemas.microsoft.com/exchange/services/2006/messages/GetSharingFolder";
    helpers::send_soap_request(url, credentials, req).await
}
pub mod error {
    #![allow(dead_code)]

    use std::error::Error;

    #[derive(Debug)]
    pub enum SoapError {
        YaserdeError(String),
        Http(reqwest::Error),
    }

    pub type SoapResult<T> = Result<T, SoapError>;

    impl std::fmt::Display for SoapError {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                SoapError::YaserdeError(e) => write!(f, "Yaserde error: {e}"),
                SoapError::Http(e) => write!(f, "HTTP error: {e}"),
            }
        }
    }

    impl Error for SoapError {
        fn source(&self) -> Option<&(dyn Error + 'static)> {
            match self {
                SoapError::YaserdeError(_) => None,
                SoapError::Http(e) => Some(e),
            }
        }

        fn cause(&self) -> Option<&dyn Error> {
            self.source()
        }
    }

    impl From<reqwest::Error> for SoapError {
        fn from(e: reqwest::Error) -> Self {
            SoapError::Http(e)
        }
    }
}

mod helpers {
    #![allow(dead_code)]

    use super::error::{SoapError, SoapResult};
    use reqwest::Client;
    use std::fmt;
    use yaserde::{YaDeserialize, YaSerialize};

    pub(super) async fn send_soap_request<YI, YO, U, P>(
        url: &str,
        credentials: Option<(U, P)>,
        req: YI,
    ) -> SoapResult<YO>
    where
        YI: YaSerialize,
        YO: YaDeserialize,
        U: fmt::Display,
        P: fmt::Display,
    {
        let client = Client::new();
        send_soap_request_using_client(&client, url, credentials, req).await
    }

    pub(super) async fn send_soap_request_using_client<YI, YO, U, P>(
        client: &Client,
        url: &str,
        credentials: Option<(U, P)>,
        req: YI,
    ) -> SoapResult<YO>
    where
        YI: YaSerialize,
        YO: YaDeserialize,
        U: fmt::Display,
        P: fmt::Display,
    {
        let body = yaserde::ser::to_string(&req).map_err(SoapError::YaserdeError)?;
        let mut req = client.post(url).body(body);
        if let Some((username, password)) = credentials {
            req = req.basic_auth(username, Some(password));
        }
        let response = req.send().await?;
        response.error_for_status_ref()?;
        let response_body = response.text().await?;
        let response = yaserde::de::from_str(&response_body).map_err(SoapError::YaserdeError)?;
        Ok(response)
    }
}

/// This module contains the `MultiRef` type which is a wrapper around `Arc<RwLock<T>>` that implements `YaDeserialize` and `YaSerialize` for `T` and allows for multiple references to the same object.
/// Inspired by [this](https://github.com/media-io/yaserde/issues/165#issuecomment-1810243674) comment on the yaserde repository.
/// Needs `xml-rs`, `tokio` and `yaserde` as dependencies.
pub mod multi_ref {
    use std::{ops::Deref, sync::Arc};
    use yaserde::{YaDeserialize, YaSerialize};

    pub struct MultiRef<T> {
        inner: Arc<T>,
    }

    impl<T> MultiRef<T> {
        #[allow(dead_code)]
        pub fn new(inner: T) -> Self {
            Self { inner: Arc::new(inner) }
        }
    }

    impl<T: YaDeserialize> YaDeserialize for MultiRef<T> {
        fn deserialize<R: std::io::prelude::Read>(reader: &mut yaserde::de::Deserializer<R>) -> Result<Self, String> {
            let inner = T::deserialize(reader)?;
            Ok(Self { inner: Arc::new(inner) })
        }
    }

    impl<T: YaSerialize> YaSerialize for MultiRef<T> {
        fn serialize<W: std::io::prelude::Write>(
            &self,
            writer: &mut yaserde::ser::Serializer<W>,
        ) -> Result<(), String> {
            self.inner.serialize(writer)?;
            Ok(())
        }

        fn serialize_attributes(
            &self,
            attributes: Vec<xml::attribute::OwnedAttribute>,
            namespace: xml::namespace::Namespace,
        ) -> Result<(Vec<xml::attribute::OwnedAttribute>, xml::namespace::Namespace), String> {
            self.inner.serialize_attributes(attributes, namespace)
        }
    }

    impl<T: Default> Default for MultiRef<T> {
        fn default() -> Self {
            Self { inner: Arc::default() }
        }
    }

    impl<T: Clone> Clone for MultiRef<T> {
        fn clone(&self) -> Self {
            Self {
                inner: self.inner.clone(),
            }
        }
    }

    impl<T: std::fmt::Debug> std::fmt::Debug for MultiRef<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            self.inner.fmt(f)
        }
    }

    impl<T> Deref for MultiRef<T> {
        type Target = Arc<T>;

        fn deref(&self) -> &Self::Target {
            &self.inner
        }
    }
}
